# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountAccount(models.Model):
    active = models.BooleanField(blank=True, null=True)
    bank_name = models.CharField(max_length=256, blank=True, null=True)
    bank_no = models.CharField(max_length=256, blank=True, null=True)
    bank_type = models.CharField(max_length=64, blank=True, null=True)
    code = models.CharField(max_length=256)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    creditcard_no = models.CharField(max_length=256, blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    description = models.TextField(blank=True, null=True)
    enable_payment = models.BooleanField(blank=True, null=True)
    fixed_asset_type = models.ForeignKey('AccountFixedAssetType', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    require_contact = models.BooleanField(blank=True, null=True)
    require_tax_no = models.BooleanField(blank=True, null=True)
    require_track = models.BooleanField(blank=True, null=True)
    require_track2 = models.BooleanField(blank=True, null=True)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_cheque = models.BooleanField(blank=True, null=True)
    is_deposit = models.BooleanField(blank=True, null=True)
    is_credit = models.BooleanField(blank=True, null=True)
    show_bank_account_page = models.BooleanField(blank=True, null=True)
    account = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_account'


class AccountAccount2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    bank_name = models.CharField(max_length=256, blank=True, null=True)
    bank_no = models.CharField(max_length=256, blank=True, null=True)
    bank_type = models.CharField(max_length=64, blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    creditcard_no = models.CharField(max_length=256, blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    enable_payment = models.BooleanField(blank=True, null=True)
    fixed_asset_type_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    parent_id = models.IntegerField(blank=True, null=True)
    require_contact = models.BooleanField(blank=True, null=True)
    require_tax_no = models.BooleanField(blank=True, null=True)
    require_track = models.BooleanField(blank=True, null=True)
    require_track2 = models.BooleanField(blank=True, null=True)
    tax_id = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_cheque = models.BooleanField(blank=True, null=True)
    is_deposit = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_account2'


class AccountAdvance(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    amount_cheque = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_expense = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approved_by = models.ForeignKey('BaseUser', models.DO_NOTHING, db_column='approved_by', blank=True, null=True)
    approved_date = models.DateField(blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8)
    date = models.DateField()
    due_date = models.DateField()
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    approve_counter = models.IntegerField(blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    role_approve = models.ForeignKey('Role', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    due_date_payment = models.DateField(blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    disapproved_date = models.DateTimeField(blank=True, null=True)
    disapproved = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    display_approved_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reject_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    review_date = models.DateTimeField(blank=True, null=True)
    review = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    reason_reject = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    reason_reject_text = models.TextField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    reject = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    acc_approve_date = models.DateTimeField(blank=True, null=True)
    acc_approve = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    dep_track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    approve_relate = models.TextField(blank=True, null=True)
    back_acc_approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_acc_approve_date = models.DateTimeField(blank=True, null=True)
    back_acc_review_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_acc_review_date = models.DateTimeField(blank=True, null=True)
    back_approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_approve_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_advance'
        unique_together = (('company', 'number'),)


class AccountAdvanceClear(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING)
    amount_advance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_expense = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_wht = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8)
    date = models.DateField()
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    check_fund_type = models.CharField(max_length=64, blank=True, null=True)
    budget = models.ForeignKey('AccountBudgetItem', models.DO_NOTHING, blank=True, null=True)
    approve_counter = models.IntegerField(blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    advance_amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    department_ids = models.TextField(blank=True, null=True)
    approve_by_2 = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_by_3 = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve_date_2 = models.DateTimeField(blank=True, null=True)
    approve_date_3 = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reject_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reason_reject = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    reason_reject_text = models.TextField(blank=True, null=True)
    due_date_payment = models.DateField(blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    acc_approve_date = models.DateTimeField(blank=True, null=True)
    acc_approve = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    review_date = models.DateTimeField(blank=True, null=True)
    review = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    payment_date = models.DateField(blank=True, null=True)
    approve_relate = models.TextField(blank=True, null=True)
    wht_tax_no = models.CharField(max_length=256, blank=True, null=True)
    wht_tax_no_backup = models.TextField(blank=True, null=True)
    back_acc_approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_acc_approve_date = models.DateTimeField(blank=True, null=True)
    back_acc_review_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_acc_review_date = models.DateTimeField(blank=True, null=True)
    back_approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_approve_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_advance_clear'


class AccountAdvanceClearLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    advance_clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    budget_line = models.ForeignKey('AccountBudgetLine', models.DO_NOTHING, blank=True, null=True)
    budget_item_line = models.ForeignKey('AccountBudgetItemLine', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_advance_clear_line'


class AccountAdvanceLine(models.Model):
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()

    class Meta:
        managed = False
        db_table = 'account_advance_line'


class AccountAllocWizard(models.Model):
    amount_alloc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_credit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    type = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_alloc_wizard'


class AccountAllocWizardLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    wiz = models.ForeignKey(AccountAllocWizard, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_alloc_wizard_line'


class AccountBalance(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=2)
    debit = models.DecimalField(max_digits=16, decimal_places=2)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_balance'


class AccountBankReconcile(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_bank_reconcile'


class AccountBill(models.Model):
    company = models.ForeignKey('Company', models.DO_NOTHING)
    contact_address = models.ForeignKey('Address', models.DO_NOTHING, db_column='contact_address', blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    date = models.DateField()
    date_paid = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    bill_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    date_collect_cheque = models.DateField(blank=True, null=True)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    type_collector = models.CharField(max_length=64, blank=True, null=True)
    contact_ids = models.TextField(blank=True, null=True)
    place = models.CharField(max_length=64, blank=True, null=True)
    salesman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    confirmed_date = models.DateTimeField(blank=True, null=True)
    confirmed = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    billing_date = models.DateField(blank=True, null=True)
    desc_billing_note = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_bill'
        unique_together = (('company', 'number'),)


class AccountBillLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_unbill = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_issue = models.ForeignKey(AccountBill, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    shipping_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    wht_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    pay_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_bill_line'


class AccountBudget(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField()
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget'


class AccountBudgetItem(models.Model):
    budget_period = models.ForeignKey('AccountBudgetPeriod', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=1024)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64)
    view_report = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve_user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm_user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    max_budget_year = models.DecimalField(max_digits=16, decimal_places=2)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    code = models.CharField(max_length=256)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget_item'


class AccountBudgetItemLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    budget_amount = models.DecimalField(max_digits=16, decimal_places=2)
    budget_detail_name = models.CharField(max_length=256, blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    po_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    pr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING)
    type = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    pr_reserve = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    pr_reserve_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    po_reserve_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prpo_remain_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_selection = models.ForeignKey('BudgetSelection', models.DO_NOTHING)
    categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    budget_allocate = models.CharField(max_length=256, blank=True, null=True)
    budget_allocate_0 = models.ForeignKey('self', models.DO_NOTHING, db_column='budget_allocate_id', blank=True, null=True)  # Field renamed because of name conflict.
    period_amount = models.IntegerField()
    period_type = models.CharField(max_length=64, blank=True, null=True)
    actual_budget = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    adjust_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    act_inventory = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget_item_line'


class AccountBudgetLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    budget_amount = models.DecimalField(max_digits=16, decimal_places=2)
    budget = models.ForeignKey(AccountBudget, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget_line'


class AccountBudgetPeriod(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget_period'


class AccountBudgetSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_budget_setting'


class AccountCheque(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    advance_clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    cheque_date = models.DateField()
    cheque_number = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    pay_only = models.BooleanField(blank=True, null=True)
    payment = models.ForeignKey('AccountPayment', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    subtype = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    cheque_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    memo = models.TextField(blank=True, null=True)
    petty_cash = models.ForeignKey('PettyCash', models.DO_NOTHING, blank=True, null=True)
    cancel_move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    exp_date = models.DateField(blank=True, null=True)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    reason_text = models.TextField(blank=True, null=True)
    receive_new_type = models.CharField(max_length=64, blank=True, null=True)
    delivery_type = models.CharField(max_length=64, blank=True, null=True)
    bank_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    cheque_book = models.CharField(max_length=256, blank=True, null=True)
    cheque_book_0 = models.ForeignKey('LmChequeBook', models.DO_NOTHING, db_column='cheque_book_id', blank=True, null=True)  # Field renamed because of name conflict.
    cheque_book_line = models.ForeignKey('LmChequeBookLine', models.DO_NOTHING, blank=True, null=True)
    bo_move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    reopen_move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    pay_in_move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    pay_in_bank_account_number = models.CharField(max_length=256, blank=True, null=True)
    pay_in_bank_book_name = models.CharField(max_length=256, blank=True, null=True)
    pay_in_bank_branch = models.CharField(max_length=256, blank=True, null=True)
    pay_in_bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    pay_in_date = models.DateField(blank=True, null=True)
    back_to_onhand_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    back_to_onhand_time = models.DateTimeField(blank=True, null=True)
    bounced_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    bounced_time = models.DateTimeField(blank=True, null=True)
    cancal_exp_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    cancel_exp_time = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    pay_in_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    pay_in_time = models.DateTimeField(blank=True, null=True)
    reopen_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reopen_time = models.DateTimeField(blank=True, null=True)
    write_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    lm_bank = models.ForeignKey('LmBank', models.DO_NOTHING, blank=True, null=True)
    depositor = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    tax_id = models.CharField(max_length=256, blank=True, null=True)
    voucher_date = models.DateField(blank=True, null=True)
    voucher_no = models.CharField(max_length=256, blank=True, null=True)
    bounced_date = models.DateTimeField(blank=True, null=True)
    cancel_date = models.DateTimeField(blank=True, null=True)
    expired_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_cheque'


class AccountChequeMove(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    subtype = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    posted_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    posted_date = models.DateTimeField(blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    bank_branch = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_cheque_move'


class AccountChequeMoveAdjust(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    cheque_move = models.ForeignKey(AccountChequeMove, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_cheque_move_adjust'


class AccountChequeMoveLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    charge_amount = models.DecimalField(max_digits=16, decimal_places=2)
    cheque_date = models.DateField()
    cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING)
    cheque_move = models.ForeignKey(AccountChequeMove, models.DO_NOTHING, blank=True, null=True)
    cheque_number = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_cheque_move_line'


class AccountClaim(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount_approved = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_paid = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_claim'


class AccountCreditAlloc(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    date = models.DateField()
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_credit_alloc'


class AccountCreditCard(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    book_bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_date = models.DateField(blank=True, null=True)
    credit_name = models.ForeignKey('Contact', models.DO_NOTHING, db_column='credit_name', blank=True, null=True)
    credit_number = models.CharField(max_length=256, blank=True, null=True)
    date_payment = models.DateField(blank=True, null=True)
    is_post = models.BooleanField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    payment = models.ForeignKey('AccountPayment', models.DO_NOTHING)
    post_related = models.ForeignKey('AccountCreditCardMove', models.DO_NOTHING, db_column='post_related', blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    subtype = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_credit_card'


class AccountCreditCardMove(models.Model):
    amount_net = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_wht = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    book_bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    memo = models.TextField(blank=True, null=True)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    subtype = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    wht_tax_no = models.CharField(max_length=256, blank=True, null=True)
    wht_tax_no_backup = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_credit_card_move'


class AccountCreditCardMoveLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    book_bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_date = models.DateField(blank=True, null=True)
    credit = models.ForeignKey(AccountCreditCard, models.DO_NOTHING, blank=True, null=True)
    credit_name = models.ForeignKey('Contact', models.DO_NOTHING, db_column='credit_name', blank=True, null=True)
    credit_number = models.CharField(max_length=256, blank=True, null=True)
    move = models.ForeignKey(AccountCreditCardMove, models.DO_NOTHING)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_credit_card_move_line'


class AccountCreditWizard(models.Model):
    amount_alloc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    type = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_credit_wizard'


class AccountCreditWizardLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_credit_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    date = models.DateField(blank=True, null=True)
    wiz = models.ForeignKey(AccountCreditWizard, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_credit_wizard_line'


class AccountDepositAlloc(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    deposit = models.ForeignKey('AccountPayment', models.DO_NOTHING)
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    total_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_deposit_alloc'


class AccountExpense(models.Model):
    attach = models.CharField(max_length=256, blank=True, null=True)
    claim = models.ForeignKey(AccountClaim, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    ref = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_expense'


class AccountExpenseLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256)
    expense = models.ForeignKey(AccountExpense, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_expense_line'


class AccountFixedAsset(models.Model):
    accum_dep_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_dispose = models.DateField(blank=True, null=True)
    date_purchase = models.DateField()
    dep_exp_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    dep_method = models.CharField(max_length=64)
    dep_rate = models.DecimalField(max_digits=16, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    fixed_asset_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    number = models.CharField(max_length=256)
    price_purchase = models.DecimalField(max_digits=16, decimal_places=2)
    salvage_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.ForeignKey('AccountFixedAssetType', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sell_invoice = models.ForeignKey('AccountInvoice', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    dispost_date = models.DateField(blank=True, null=True)
    dispost = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    pendding_date = models.DateTimeField(blank=True, null=True)
    pendding = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    register_date = models.DateTimeField(blank=True, null=True)
    register = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    sell_date = models.DateField(blank=True, null=True)
    sell = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('AccountFixedAssetParentType', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset'


class AccountFixedAssetConfirmToPending(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    fix_asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_confirm_to_pending'


class AccountFixedAssetDepreciation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_est = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_depreciation'


class AccountFixedAssetDispose(models.Model):
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    accum_depr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_dispose'


class AccountFixedAssetDisposes(models.Model):
    accum_depr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_disposes'


class AccountFixedAssetDisposesLine(models.Model):
    accum_dep_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    asset_dispose = models.ForeignKey(AccountFixedAssetDisposes, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    book_val = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_purchase = models.DateField(blank=True, null=True)
    dep_exp_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    fixed_asset_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    last_dep = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    price_purchase = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.ForeignKey('AccountFixedAssetType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_disposes_line'


class AccountFixedAssetParentType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_parent_type'


class AccountFixedAssetPeriod(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_period'


class AccountFixedAssetPeriodEst(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_period_est'


class AccountFixedAssetSell(models.Model):
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    gain_loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    journal = models.ForeignKey('AccountJournal', models.DO_NOTHING)
    price = models.DecimalField(max_digits=16, decimal_places=2)
    sale_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    accum_depr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    sell_date = models.DateTimeField(blank=True, null=True)
    sell = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_sell'


class AccountFixedAssetSells(models.Model):
    accum_depr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    gain_loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    journal = models.ForeignKey('AccountJournal', models.DO_NOTHING)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    desc_sum = models.TextField(blank=True, null=True)
    is_sum = models.BooleanField(blank=True, null=True)
    sum_contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    sum_track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    sum_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    total_sale = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_sells'


class AccountFixedAssetSellsLine(models.Model):
    accum_dep_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    asset_sell = models.ForeignKey(AccountFixedAssetSells, models.DO_NOTHING, blank=True, null=True)
    book_val = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_purchase = models.DateField(blank=True, null=True)
    dep_exp_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    fixed_asset_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    last_dep = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    price_purchase = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.ForeignKey('AccountFixedAssetType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_sells_line'


class AccountFixedAssetType(models.Model):
    accum_dep_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dep_exp_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    dep_method = models.CharField(max_length=64)
    dep_rate = models.DecimalField(max_digits=16, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    fixed_asset_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    parent = models.ForeignKey(AccountFixedAssetParentType, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_fixed_asset_type'


class AccountInvoice(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount_credit_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_credit_remain_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_credit_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_paid = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_paid_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_rounding = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    attachment = models.CharField(max_length=256, blank=True, null=True)
    bill_address = models.ForeignKey('Address', models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    date = models.DateField()
    due_date = models.DateField(blank=True, null=True)
    inv_type = models.CharField(max_length=64)
    journal = models.ForeignKey('AccountJournal', models.DO_NOTHING, blank=True, null=True)
    memo = models.TextField(blank=True, null=True)
    move = models.ForeignKey('AccountMove', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    original_invoice = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    payment = models.ForeignKey('AccountPayment', models.DO_NOTHING, blank=True, null=True)
    reconcile_move_line = models.ForeignKey('AccountMoveLine', models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    tax_branch_no = models.CharField(max_length=256, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    payment_terms = models.ForeignKey('PaymentTerms', models.DO_NOTHING, blank=True, null=True)
    amount_remaining_inv = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal_org_inv = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_bill = models.BooleanField(blank=True, null=True)
    amount_deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_deposit_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal_deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax_deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_deposit_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    recur_inv = models.ForeignKey('RecurInv', models.DO_NOTHING, blank=True, null=True)
    subtotal_after_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    interval = models.CharField(max_length=64, blank=True, null=True)
    interval_month = models.IntegerField(blank=True, null=True)
    interval_week = models.CharField(max_length=64, blank=True, null=True)
    start_date = models.DateField(blank=True, null=True)
    reason = models.ForeignKey('ReasonIssue', models.DO_NOTHING, db_column='reason', blank=True, null=True)
    customer_due_date = models.DateField(blank=True, null=True)
    invoice_foc = models.BooleanField(blank=True, null=True)
    expense_foc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    eta = models.DateField(blank=True, null=True)
    etd = models.DateField(blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    commission = models.CharField(max_length=64, blank=True, null=True)
    incentive = models.CharField(max_length=64, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    project_type = models.ForeignKey('ProjectType', models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    subtotal_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    arrival_warehouse = models.DateField(blank=True, null=True)
    default_currency = models.ForeignKey('Currency', models.DO_NOTHING, blank=True, null=True)
    is_default_currency = models.BooleanField(blank=True, null=True)
    shipping_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, db_column='shipping_method', blank=True, null=True)
    account_for_pay = models.CharField(max_length=256, blank=True, null=True)
    approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    cancel_date = models.DateTimeField(blank=True, null=True)
    cancel = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    expired_date = models.DateTimeField(blank=True, null=True)
    expired = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    wait_date = models.DateTimeField(blank=True, null=True)
    wait = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING, blank=True, null=True)
    fix_tax_rate_only = models.BooleanField(blank=True, null=True)
    is_voucher = models.BooleanField(blank=True, null=True)
    pass_check_cost = models.BooleanField(blank=True, null=True)
    is_sale_man = models.BooleanField(blank=True, null=True)
    is_project = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_invoice'


class AccountInvoiceLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    purch = models.ForeignKey('PurchaseOrder', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    alloc_discount_amount = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    budget_line = models.ForeignKey(AccountBudgetLine, models.DO_NOTHING, blank=True, null=True)
    budget_item_line = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    is_commission = models.BooleanField(blank=True, null=True)
    is_incentive = models.BooleanField(blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    job_line = models.ForeignKey('JobLine', models.DO_NOTHING, blank=True, null=True)
    after_discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_line = models.ForeignKey('SaleOrderLine', models.DO_NOTHING, blank=True, null=True)
    borrow_line = models.ForeignKey('ProductBorrowLine', models.DO_NOTHING, blank=True, null=True)
    original_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    original_invoice_line = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_invoice_line'


class AccountInvoiceShipment(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    shipment_no = models.CharField(max_length=256, blank=True, null=True)
    shipment_qty = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_invoice_shipment'


class AccountInvoiceTax(models.Model):
    base_amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey('RecurTemplate', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_invoice_tax'


class AccountJournal(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_journal'


class AccountLog(models.Model):
    after_value = models.TextField(blank=True, null=True)
    before_value = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_log'


class AccountMove(models.Model):
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_posted = models.DateField(blank=True, null=True)
    default_line_desc = models.BooleanField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING)
    narration = models.TextField()
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    type = models.CharField(max_length=64, blank=True, null=True)
    verified = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_reverse = models.BooleanField(blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_move'


class AccountMoveLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank_reconcile = models.ForeignKey(AccountBankReconcile, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=2)
    debit = models.DecimalField(max_digits=16, decimal_places=2)
    description = models.TextField()
    due_date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    move_date = models.DateField(blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING)
    move_state = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    reconcile = models.ForeignKey('AccountReconcile', models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    statement_line = models.ForeignKey('AccountStatementLine', models.DO_NOTHING, blank=True, null=True)
    stock_move = models.ForeignKey('StockMove', models.DO_NOTHING, blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    revert_reconcile = models.ForeignKey('AccountReconcileVat', models.DO_NOTHING, blank=True, null=True)
    additional = models.BooleanField(blank=True, null=True)
    additional_time = models.IntegerField(blank=True, null=True)
    tax_filed = models.BooleanField(blank=True, null=True)
    tax_filing_date = models.DateField(blank=True, null=True)
    reconcile_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    reconcile_date = models.DateTimeField(blank=True, null=True)
    statement_ids = models.TextField(blank=True, null=True)
    name_search = models.CharField(max_length=3000, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_move_line'


class AccountOldChequeLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank = models.ForeignKey('Bank', models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    cheque_book_ids = models.TextField(blank=True, null=True)
    cheque_book_line = models.ForeignKey('LmChequeBookLine', models.DO_NOTHING, blank=True, null=True)
    cheque_date = models.DateField(blank=True, null=True)
    cheque_number = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    edit_date = models.DateTimeField(blank=True, null=True)
    line_pay_cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    payment = models.ForeignKey('AccountPayment', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact_id_new = models.ForeignKey('Contact', models.DO_NOTHING, db_column='contact_id_new', blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_issue = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_old_cheque_line'


class AccountPayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    amount_payment = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_wht = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    date = models.DateField()
    default_line_desc = models.BooleanField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    memo = models.TextField(blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    pay_type = models.CharField(max_length=64)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    wht_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_deposit_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_deposit_remain_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    adjust_diff = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_deposit_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_paid_method = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    payment_action = models.CharField(max_length=64)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    cheque_state = models.CharField(max_length=64, blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    due_date_inv = models.DateField(blank=True, null=True)
    not_reconcile_suspent_vat = models.BooleanField(blank=True, null=True)
    project_related = models.CharField(max_length=64, blank=True, null=True)
    description = models.ForeignKey('LmAdjustment', models.DO_NOTHING, blank=True, null=True)
    project_track2_ids = models.TextField(blank=True, null=True)
    cancel_date = models.DateTimeField(blank=True, null=True)
    cancel = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    expired_date = models.DateTimeField(blank=True, null=True)
    expired = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    state_dummy = models.CharField(max_length=64, blank=True, null=True)
    approve_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reason_issue = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    bank = models.ForeignKey('LmBank', models.DO_NOTHING, blank=True, null=True)
    is_credit = models.BooleanField(blank=True, null=True)
    wht_tax_no = models.CharField(max_length=256, blank=True, null=True)
    wht_tax_no_backup = models.TextField(blank=True, null=True)
    edit_cheque_date = models.DateTimeField(blank=True, null=True)
    edit_cheque = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    edit_cheque_reason = models.TextField(blank=True, null=True)
    bill_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    reserve_deposit = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_payment'


class AccountPaymentLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    bill_line = models.ForeignKey(AccountBillLine, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expense = models.ForeignKey('HrExpense', models.DO_NOTHING, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    unit_price = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    budget_line = models.ForeignKey(AccountBudgetLine, models.DO_NOTHING, blank=True, null=True)
    budget_item_line = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    adjustment = models.ForeignKey('LmAdjustment', models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    type_tax_comp = models.CharField(max_length=64, blank=True, null=True)
    adjust_contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_payment_line'


class AccountPaymentMultiLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    pay = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_payment_multi_line'


class AccountReconcile(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_reconcile'


class AccountReconcileVat(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    account_ids = models.TextField(blank=True, null=True)
    claim_date = models.DateField()
    company = models.ForeignKey('Company', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    doc_date = models.DateField()
    memo = models.CharField(max_length=256, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    tax_comp = models.ForeignKey('AccountTaxComponent', models.DO_NOTHING, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_reconcile_vat'


class AccountReconcileVatLine(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING)
    rec = models.ForeignKey(AccountReconcileVat, models.DO_NOTHING)
    related_id = models.CharField(max_length=64)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_reconcile_vat_line'


class AccountRejectLine(models.Model):
    actual_sum_com = models.ForeignKey('ActualSumCom', models.DO_NOTHING, blank=True, null=True)
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING, blank=True, null=True)
    clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    com_form_kpi = models.ForeignKey('ComFormKpi', models.DO_NOTHING, blank=True, null=True)
    commission_settings = models.ForeignKey('CommissionSettings', models.DO_NOTHING, blank=True, null=True)
    commission_target = models.ForeignKey('CommissionTarget', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    expense = models.ForeignKey('HrExpense', models.DO_NOTHING, blank=True, null=True)
    leader_sale_com = models.ForeignKey('LeaderSaleCom', models.DO_NOTHING, blank=True, null=True)
    petty = models.ForeignKey('PettyCash', models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    sale_com = models.ForeignKey('SaleCom', models.DO_NOTHING, blank=True, null=True)
    sale_target = models.ForeignKey('SaleTarget', models.DO_NOTHING, blank=True, null=True)
    team_sale = models.ForeignKey('SaleTeamTerritory', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=256, blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sale_com_est = models.ForeignKey('SaleComEst', models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    incentive_warranty = models.ForeignKey('IncentiveWarranty', models.DO_NOTHING, blank=True, null=True)
    adjust_coupon = models.ForeignKey('AdjustCoupon', models.DO_NOTHING, blank=True, null=True)
    burn = models.ForeignKey('BurnRequest', models.DO_NOTHING, blank=True, null=True)
    catalog = models.ForeignKey('CatalogItem', models.DO_NOTHING, blank=True, null=True)
    create_coupon = models.ForeignKey('CreateVoidCoupon', models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING, blank=True, null=True)
    reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING, blank=True, null=True)
    return_earn = models.ForeignKey('ReturnEarn', models.DO_NOTHING, blank=True, null=True)
    transfer_coupon = models.ForeignKey('TransferCoupon', models.DO_NOTHING, blank=True, null=True)
    purchase_order = models.ForeignKey('PurchaseOrder', models.DO_NOTHING, blank=True, null=True)
    purchase_request = models.ForeignKey('PurchaseRequest', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_reject_line'


class AccountReport(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_report'


class AccountReportTemplate(models.Model):
    company = models.ForeignKey('Company', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    operating_cost = models.BooleanField(blank=True, null=True)
    turnover = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_report_template'


class AccountReportTemplateLine(models.Model):
    account_code = models.CharField(max_length=256, blank=True, null=True)
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey(AccountReportTemplate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_report_template_line'


class AccountStatement(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    balance_start = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_end = models.DateField(blank=True, null=True)
    date_imported = models.DateField(blank=True, null=True)
    date_start = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_statement'


class AccountStatementLine(models.Model):
    balance = models.DecimalField(max_digits=16, decimal_places=2)
    bank_reconcile = models.ForeignKey(AccountBankReconcile, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.CharField(max_length=256, blank=True, null=True)
    received = models.DecimalField(max_digits=16, decimal_places=2)
    spent = models.DecimalField(max_digits=16, decimal_places=2)
    state = models.CharField(max_length=64)
    statement = models.ForeignKey(AccountStatement, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_statement_line'


class AccountTaxComponent(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    compound = models.BooleanField(blank=True, null=True)
    contact_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    exp_type = models.CharField(max_length=64, blank=True, null=True)
    name = models.CharField(max_length=256)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    tax_rate = models.ForeignKey('AccountTaxRate', models.DO_NOTHING)
    trans_type = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_tax_component'


class AccountTaxLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    advance_clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    base_amount = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax_group = models.CharField(max_length=64)
    tax = models.ForeignKey('AccountTaxRate', models.DO_NOTHING)
    tax_no = models.CharField(max_length=256)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    expense = models.ForeignKey('HrExpense', models.DO_NOTHING, blank=True, null=True)
    advance_clear_line = models.ForeignKey(AccountAdvanceClearLine, models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('AccountTrackCateg', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_tax_line'


class AccountTaxRate(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)
    note = models.TextField(blank=True, null=True)
    payer = models.CharField(max_length=64, blank=True, null=True)
    contact_type = models.CharField(max_length=64)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_tax_rate'


class AccountTrackCateg(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    full_name = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    invisible = models.BooleanField(blank=True, null=True)
    department = models.BooleanField(blank=True, null=True)
    sub_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_track_categ'


class AccountTrackEntry(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_track_entry'


class AccountTransfer(models.Model):
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    amount_received = models.DecimalField(max_digits=16, decimal_places=2)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_charge = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank_charge = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    posted_date = models.DateTimeField(blank=True, null=True)
    posted = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'account_transfer'


class Action(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    menu = models.ForeignKey('ViewLayout', models.DO_NOTHING, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING, blank=True, null=True)
    module = models.ForeignKey('Module', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    options = models.TextField(blank=True, null=True)
    string = models.CharField(max_length=256, blank=True, null=True)
    view = models.CharField(max_length=64, blank=True, null=True)
    view_layout = models.ForeignKey('ViewLayout', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'action'


class Activity(models.Model):
    body = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    email_account = models.ForeignKey('EmailAccount', models.DO_NOTHING, blank=True, null=True)
    email_uid = models.CharField(max_length=256, blank=True, null=True)
    event_end = models.DateTimeField(blank=True, null=True)
    event_start = models.DateTimeField(blank=True, null=True)
    location = models.CharField(max_length=256, blank=True, null=True)
    name_id = models.CharField(max_length=64, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    subject = models.CharField(max_length=128)
    type = models.CharField(max_length=64)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'activity'


class ActualSumCom(models.Model):
    approved_date = models.DateTimeField(blank=True, null=True)
    com_setting = models.ForeignKey('CommissionSettings', models.DO_NOTHING)
    com_type = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    description = models.TextField(blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    voided_date = models.DateTimeField(blank=True, null=True)
    voided = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actual_sum_com'


class ActualSumComLine(models.Model):
    actual = models.ForeignKey(ActualSumCom, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sale_com = models.ForeignKey('SaleCom', models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'actual_sum_com_line'


class AddCarrier(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    route = models.ForeignKey('DeliveryRoute', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    stock = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    carrier = models.ForeignKey('DeliveryCarrier', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    delivery_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    departure_time = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    departures = models.CharField(max_length=64, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    dr_list = models.TextField(blank=True, null=True)
    delivery_slot = models.ForeignKey('DeliverySlot', models.DO_NOTHING, blank=True, null=True)
    depart_time = models.DateTimeField(blank=True, null=True)
    slot_list = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'add_carrier'


class AddCarrierLines(models.Model):
    add = models.ForeignKey(AddCarrier, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey('StockMove', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    private_trans = models.ForeignKey('Contact', models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'add_carrier_lines'


class AddCouponWarranty(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive = models.ForeignKey('IncentiveWarranty', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'add_coupon_warranty'


class AddFreeGift(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    so = models.ForeignKey('SaleOrder', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    free_list = models.TextField(blank=True, null=True)
    pmt_list = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    max_cal_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_both = models.BooleanField(blank=True, null=True)
    is_other = models.BooleanField(blank=True, null=True)
    is_premium = models.BooleanField(blank=True, null=True)
    exceed_noti = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'add_free_gift'


class AddFreeGiftLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    free = models.ForeignKey(AddFreeGift, models.DO_NOTHING, blank=True, null=True)
    item = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    promotion_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'add_free_gift_line'


class AddonPackage(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    install = models.BooleanField(blank=True, null=True)
    module_requires = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    path = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'addon_package'


class Address(models.Model):
    address = models.TextField(blank=True, null=True)
    address2 = models.TextField(blank=True, null=True)
    bldg_name = models.CharField(max_length=256, blank=True, null=True)
    bldg_no = models.CharField(max_length=256, blank=True, null=True)
    city = models.CharField(max_length=256, blank=True, null=True)
    company = models.CharField(max_length=256, blank=True, null=True)
    company_0 = models.ForeignKey('Company', models.DO_NOTHING, db_column='company_id', blank=True, null=True)  # Field renamed because of name conflict.
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey('Country', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    district = models.CharField(max_length=256, blank=True, null=True)
    district_0 = models.ForeignKey('District', models.DO_NOTHING, db_column='district_id', blank=True, null=True)  # Field renamed because of name conflict.
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    fax = models.CharField(max_length=256, blank=True, null=True)
    first_name = models.CharField(max_length=256, blank=True, null=True)
    floor = models.CharField(max_length=256, blank=True, null=True)
    last_name = models.CharField(max_length=256, blank=True, null=True)
    lead = models.ForeignKey('SaleLead', models.DO_NOTHING, blank=True, null=True)
    moo = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.CharField(max_length=256, blank=True, null=True)
    province_0 = models.ForeignKey('Province', models.DO_NOTHING, db_column='province_id', blank=True, null=True)  # Field renamed because of name conflict.
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    soi = models.CharField(max_length=256, blank=True, null=True)
    street = models.CharField(max_length=256, blank=True, null=True)
    sub_district = models.CharField(max_length=256, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    unit_no = models.CharField(max_length=256, blank=True, null=True)
    village = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    shop = models.ForeignKey('PosShop', models.DO_NOTHING, blank=True, null=True)
    address_id = models.CharField(max_length=256, blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    name_title_indiv = models.ForeignKey('NameTitle', models.DO_NOTHING, blank=True, null=True)
    name_title_org = models.ForeignKey('NameTitle', models.DO_NOTHING, blank=True, null=True)
    name_title = models.ForeignKey('NameTitle', models.DO_NOTHING, blank=True, null=True)
    name_person = models.CharField(max_length=256, blank=True, null=True)
    junction = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'address'


class AdjustCoupon(models.Model):
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    number = models.CharField(max_length=256)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    cus_con_date = models.DateTimeField(blank=True, null=True)
    cus_con = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    adjust_reason = models.TextField(blank=True, null=True)
    adjust_reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='adjust_reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'adjust_coupon'


class AdjustCouponLine(models.Model):
    adjust = models.ForeignKey(AdjustCoupon, models.DO_NOTHING, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive_actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    stamp_actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    coupon_master_ids = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    invoice_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'adjust_coupon_line'


class AdminTools(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'admin_tools'


class AllocateGroup(models.Model):
    allocate_date = models.DateField()
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    from_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    memo = models.TextField(blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    template = models.ForeignKey('AllocateGroupTemplate', models.DO_NOTHING)
    total_expense = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_group'


class AllocateGroupLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    gl_balance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    item = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    order = models.ForeignKey(AllocateGroup, models.DO_NOTHING)
    sale_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    to_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    unit_price_kg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    used_kg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    used_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_group_line'


class AllocateGroupTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_group_template'


class AllocateGroupTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    order = models.ForeignKey(AllocateGroupTemplate, models.DO_NOTHING)
    sale_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    to_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_group_template_line'


class AllocatePrepaidExpense(models.Model):
    bill_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    contract_maturity = models.DateField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    day = models.IntegerField(blank=True, null=True)
    expense_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    in_period = models.IntegerField(blank=True, null=True)
    in_rate = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    is_interest = models.BooleanField(blank=True, null=True)
    is_prepaid_expense = models.BooleanField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    prepaid_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_prepaid_expense'


class AllocatePrepaidExpenseInLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    day_period = models.IntegerField(blank=True, null=True)
    end_date_period = models.DateField(blank=True, null=True)
    order = models.ForeignKey(AllocatePrepaidExpense, models.DO_NOTHING)
    period_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    start_date_period = models.DateField(blank=True, null=True)
    subtotal_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_prepaid_expense_in_line'


class AllocatePrepaidExpenseLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    order = models.ForeignKey(AllocatePrepaidExpense, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'allocate_prepaid_expense_line'


class AmortizePrepaidExpense(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'amortize_prepaid_expense'


class ApproveLevel(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field = models.ForeignKey('Field', models.DO_NOTHING)
    model = models.ForeignKey('Model', models.DO_NOTHING)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'approve_level'


class ApproveLevelLine(models.Model):
    approve = models.ForeignKey(ApproveLevel, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    role = models.ForeignKey('Role', models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    field = models.ForeignKey('Field', models.DO_NOTHING, blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'approve_level_line'


class ApproveLevelListLine(models.Model):
    approve_email = models.CharField(max_length=256, blank=True, null=True)
    approver = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    level = models.CharField(max_length=256, blank=True, null=True)
    max = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'approve_level_list_line'


class ApproveWizard(models.Model):
    approve_id = models.IntegerField(blank=True, null=True)
    approve_method = models.CharField(max_length=256, blank=True, null=True)
    approve_model = models.CharField(max_length=256, blank=True, null=True)
    approver = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pin_code = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'approve_wizard'


class AreaFilm(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'area_film'


class Attach(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=256)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'attach'


class AutoReconcile(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    to_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'auto_reconcile'


class BangkokMetro(models.Model):
    country = models.ForeignKey('Country', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    province_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    setting = models.ForeignKey('Settings', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bangkok_metro'


class Bank(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    bank_account_number = models.CharField(max_length=256)
    bank_book_name = models.CharField(max_length=256, blank=True, null=True)
    bank_branch = models.CharField(max_length=256, blank=True, null=True)
    bank = models.ForeignKey('LmBank', models.DO_NOTHING)
    depositor = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    tax_id = models.CharField(max_length=256, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bank'


class BankAccount(models.Model):
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    number = models.CharField(max_length=256)
    online = models.BooleanField(blank=True, null=True)
    signatory = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    lm_bank = models.ForeignKey('LmBank', models.DO_NOTHING, blank=True, null=True)
    book_bank_name = models.TextField(blank=True, null=True)
    email = models.TextField(blank=True, null=True)
    phone_sms = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bank_account'


class BarcodeIssue(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_issue'


class BarcodeIssueLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeIssue, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_issue_line'


class BarcodeIssueMfg(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_issue_mfg'


class BarcodeIssueMfgLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_loss = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_loss = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    mode = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeIssueMfg, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_issue_mfg_line'


class BarcodeOps(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_ops'


class BarcodeQc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    result = models.CharField(max_length=64, blank=True, null=True)
    sample_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    test = models.ForeignKey('QcTest', models.DO_NOTHING, blank=True, null=True)
    value = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_qc'


class BarcodeQcLine(models.Model):
    barcode = models.ForeignKey(BarcodeQc, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    prod_qc = models.ForeignKey('ProductionQc', models.DO_NOTHING, blank=True, null=True)
    result = models.CharField(max_length=64)
    sample_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    test = models.ForeignKey('QcTest', models.DO_NOTHING)
    value = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_qc_line'


class BarcodeReceive(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_receive'


class BarcodeReceiveLine(models.Model):
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeReceive, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_receive_line'


class BarcodeReceiveMfg(models.Model):
    approved_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_receive_mfg'


class BarcodeReceiveMfgLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeReceiveMfg, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_receive_mfg_line'


class BarcodeSafeIn(models.Model):
    approved_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, db_column='container', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_safe_in'


class BarcodeSafeInLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeSafeIn, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_safe_in_line'


class BarcodeSafeOut(models.Model):
    approved_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, db_column='container', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_safe_out'


class BarcodeSafeOutLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeSafeOut, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_safe_out_line'


class BarcodeStation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_station'


class BarcodeTransfer(models.Model):
    approved_by = models.ForeignKey('BaseUser', models.DO_NOTHING, blank=True, null=True)
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_transfer'


class BarcodeTransferLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeTransfer, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_transfer_line'


class BarcodeValidate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_loss = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    mode = models.CharField(max_length=64, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_validate'


class BarcodeValidateLine(models.Model):
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty_actual = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_planned = models.DecimalField(max_digits=16, decimal_places=2)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(BarcodeValidate, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'barcode_validate_line'


class BaseUser(models.Model):
    active = models.BooleanField(blank=True, null=True)
    company2 = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    lastlog = models.DateTimeField(blank=True, null=True)
    login = models.CharField(max_length=256)
    mobile = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    password = models.CharField(max_length=256, blank=True, null=True)
    pin_code = models.CharField(max_length=256, blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)
    role = models.ForeignKey('Role', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    check_user = models.BooleanField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    check_close = models.BooleanField(blank=True, null=True)
    signature = models.CharField(max_length=256, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    archive_date = models.DateTimeField(blank=True, null=True)
    archive = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_user'


class BatchImport(models.Model):
    bank_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    bank_file = models.CharField(max_length=256, blank=True, null=True)
    cash_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cash_file = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_fmt = models.CharField(max_length=256, blank=True, null=True)
    from_date = models.DateField()
    purchase_file = models.CharField(max_length=256, blank=True, null=True)
    sale_file = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    to_date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'batch_import'


class BatchImportPayment(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    import_field = models.ForeignKey(BatchImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    invoice_no = models.CharField(max_length=256, blank=True, null=True)
    other_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    received = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    spent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'batch_import_payment'


class BatchImportPurchaseInvoice(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    import_field = models.ForeignKey(BatchImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    number = models.TextField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'batch_import_purchase_invoice'


class BatchImportSaleInvoice(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    import_field = models.ForeignKey(BatchImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    number = models.TextField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'batch_import_sale_invoice'


class BillAddInvoice(models.Model):
    bill = models.ForeignKey(AccountBill, models.DO_NOTHING)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    invoice_type = models.CharField(max_length=256)
    collector = models.BooleanField(blank=True, null=True)
    date_collect_cheque = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bill_add_invoice'


class Bom(models.Model):
    container = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.CharField(max_length=64, blank=True, null=True)
    max_qty_loss = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    number = models.CharField(max_length=256)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    routing = models.ForeignKey('Routing', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    fg_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    rm_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    pd_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    qc_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bom'


class BomLine(models.Model):
    bom = models.ForeignKey(Bom, models.DO_NOTHING)
    container = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    issue_method = models.CharField(max_length=64, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.CharField(max_length=64, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty2 = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bom_line'


class Bookingdetail(models.Model):
    id = models.IntegerField()
    bookingid = models.CharField(max_length=256, blank=True, null=True)
    productid = models.CharField(max_length=256, blank=True, null=True)
    productname = models.CharField(max_length=60, blank=True, null=True)
    producttype = models.CharField(max_length=20, blank=True, null=True)
    productprice = models.IntegerField(blank=True, null=True)
    amount = models.IntegerField(blank=True, null=True)
    createdate = models.CharField(max_length=-1, blank=True, null=True)
    receipt = models.TextField(blank=True, null=True)  # This field type is a guess.
    discountprice = models.IntegerField(blank=True, null=True)
    totalprice = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bookingdetail'


class BorrowSetting(models.Model):
    borrow_seq = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cus_inv_foc_seq = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    cus_inv_seq = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    journal_gi = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'borrow_setting'


class BudgetItemAllocate(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING)
    period = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    month = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'budget_item_allocate'


class BudgetSelection(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    note = models.TextField(blank=True, null=True)
    code = models.CharField(max_length=256)
    brand = models.TextField(blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'budget_selection'


class BurnRequest(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    catalog = models.ForeignKey('CatalogItem', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256)
    point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    done = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    amount_c = models.CharField(max_length=256, blank=True, null=True)
    point_c = models.CharField(max_length=256, blank=True, null=True)
    qty_c = models.CharField(max_length=256, blank=True, null=True)
    stamp_c = models.CharField(max_length=256, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    approve_over_date = models.DateTimeField(blank=True, null=True)
    approve_over = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    is_over = models.BooleanField(blank=True, null=True)
    over_date = models.DateTimeField(blank=True, null=True)
    over = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_over_date = models.DateTimeField(blank=True, null=True)
    reject_over = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    over_amount = models.CharField(max_length=256, blank=True, null=True)
    over_point = models.CharField(max_length=256, blank=True, null=True)
    over_stamp = models.CharField(max_length=256, blank=True, null=True)
    is_pay = models.BooleanField(blank=True, null=True)
    request_pay = models.CharField(max_length=256, blank=True, null=True)
    over_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    owe = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_user_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    voucher_ids = models.TextField(blank=True, null=True)
    wait_date = models.DateTimeField(blank=True, null=True)
    wait = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    request_type = models.CharField(max_length=256, blank=True, null=True)
    film_voucher_ids = models.TextField(blank=True, null=True)
    total_stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_user_use_stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    contact_id_seach = models.ForeignKey('Contact', models.DO_NOTHING, db_column='contact_id_seach', blank=True, null=True)
    is_incentive_money = models.BooleanField(blank=True, null=True)
    incentive_money = models.ForeignKey('CatalogItemIncentive', models.DO_NOTHING, blank=True, null=True)
    total_incentive_money = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_user_use_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_qty_wr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_user_use_qty_wr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    over_reason = models.TextField(blank=True, null=True)
    over_reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='over_reason_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'burn_request'


class BurnRequestFilmVoucher(models.Model):
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    voucher = models.ForeignKey('FilmVoucher', models.DO_NOTHING, blank=True, null=True)
    voucher_item = models.ForeignKey('FilmVoucherLine', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_film_voucher'


class BurnRequestLine(models.Model):
    amount_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    point_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    use_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_line'


class BurnRequestMoney(models.Model):
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    coupon_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    exchange = models.ForeignKey('CatalogItemMoney', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_money'


class BurnRequestProduct(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_product'


class BurnRequestUser(models.Model):
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    coupon_master_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    use_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    value_per_coupon = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    balance_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    balance_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    use_qty_wr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_user'


class BurnRequestVoucher(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    voucher = models.ForeignKey('Voucher', models.DO_NOTHING, blank=True, null=True)
    voucher_item = models.ForeignKey('VoucherLine', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    amount_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'burn_request_voucher'


class BusinessArea(models.Model):
    categ = models.ForeignKey('ContactCateg', models.DO_NOTHING, blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'business_area'


class CarBrand(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    code = models.CharField(max_length=256)

    class Meta:
        managed = False
        db_table = 'car_brand'


class CarModel(models.Model):
    brand = models.ForeignKey(CarBrand, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    code = models.CharField(max_length=256)
    type = models.ForeignKey('CarType', models.DO_NOTHING)
    product_related = models.ForeignKey('Product', models.DO_NOTHING, db_column='product_related', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'car_model'


class CarType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    code = models.CharField(max_length=256)
    install_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'car_type'


class CatalogItem(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    disapprove_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    wait_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    disapprove_date = models.DateTimeField(blank=True, null=True)
    inactive_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    inactive_date = models.DateTimeField(blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    wait_date = models.DateTimeField(blank=True, null=True)
    coupon_master_incentive = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, db_column='coupon_master_incentive', blank=True, null=True)
    coupon_master_point = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, db_column='coupon_master_point', blank=True, null=True)
    coupon_master_stamp = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, db_column='coupon_master_stamp', blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    disapprove = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    inactive = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reopen_date = models.DateTimeField(blank=True, null=True)
    reopen = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    wait = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item'


class CatalogItemFilmVoucher(models.Model):
    catalog = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    use_stamp = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    voucher = models.ForeignKey('FilmVoucher', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_film_voucher'


class CatalogItemIncentive(models.Model):
    catalog = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_incentive'


class CatalogItemLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cat = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    point_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_line'


class CatalogItemMoney(models.Model):
    catalog = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    exchange = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_money'


class CatalogItemProduct(models.Model):
    catalog = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_product'


class CatalogItemVoucher(models.Model):
    catalog = models.ForeignKey(CatalogItem, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    voucher = models.ForeignKey('Voucher', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'catalog_item_voucher'


class CauseOfDamage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cause_of_damage'


class ChangePasswd(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    key = models.CharField(max_length=256)
    new_password = models.CharField(max_length=256)
    new_password_repeat = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    dbname = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'change_passwd'


class ChequeMoveAddCheque(models.Model):
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    cheque_move = models.ForeignKey(AccountChequeMove, models.DO_NOTHING)
    cheque_type = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    cheque_use_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cheque_move_add_cheque'


class ClaimPayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    claim = models.ForeignKey(AccountClaim, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'claim_payment'


class CmsBlock(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    html = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_block'


class CmsBlog(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_blog'


class CmsBlogPost(models.Model):
    blog = models.ForeignKey(CmsBlog, models.DO_NOTHING)
    body = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    meta_description = models.CharField(max_length=256, blank=True, null=True)
    meta_keywords = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_blog_post'


class CmsCustomerMessage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    email = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_customer_message'


class CmsForgotPasswd(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.CharField(max_length=256)
    key = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_forgot_passwd'


class CmsLinklist(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_linklist'


class CmsLinklistItem(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    list = models.ForeignKey(CmsLinklist, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    title = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    url = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_linklist_item'


class CmsPage(models.Model):
    body = models.TextField(blank=True, null=True)
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    meta_description = models.CharField(max_length=256, blank=True, null=True)
    meta_keywords = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    template = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms_page'


class ComFormKpi(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'com_form_kpi'


class ComFormKpiLine(models.Model):
    com_form_kpi = models.ForeignKey(ComFormKpi, models.DO_NOTHING)
    com_template = models.ForeignKey('ComTemplate', models.DO_NOTHING, blank=True, null=True)
    count_1 = models.IntegerField(blank=True, null=True)
    count_2 = models.IntegerField(blank=True, null=True)
    count_3 = models.IntegerField(blank=True, null=True)
    count_4 = models.IntegerField(blank=True, null=True)
    count_5 = models.IntegerField(blank=True, null=True)
    count_6 = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default_kpi = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    point = models.IntegerField(blank=True, null=True)
    qty = models.IntegerField(blank=True, null=True)
    qty_bill = models.IntegerField(blank=True, null=True)
    qty_finish = models.IntegerField(blank=True, null=True)
    qty_remain = models.IntegerField(blank=True, null=True)
    receive_qty_bill = models.IntegerField(blank=True, null=True)
    remain_qty_bill = models.IntegerField(blank=True, null=True)
    seq = models.IntegerField(blank=True, null=True)
    total_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=256, blank=True, null=True)
    value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'com_form_kpi_line'


class ComReportAccountReceivableLine(models.Model):
    bill_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    contact_categ = models.ForeignKey('ContactCateg', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    receipt_number = models.CharField(max_length=256, blank=True, null=True)
    date_diff = models.IntegerField(blank=True, null=True)
    inv_date_from = models.DateField(blank=True, null=True)
    inv_date_to = models.DateField(blank=True, null=True)
    inv_number = models.CharField(max_length=256, blank=True, null=True)
    inv_type = models.CharField(max_length=64, blank=True, null=True)
    post_cheque_from = models.DateField(blank=True, null=True)
    post_cheque_to = models.DateField(blank=True, null=True)
    show_product_detail = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'com_report_account_receivable_line'


class ComTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default_kpi = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    approved = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    created = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    type_kpi = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'com_template'


class ComTemplateLine(models.Model):
    com_template = models.ForeignKey(ComTemplate, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    point = models.IntegerField(blank=True, null=True)
    seq = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'com_template_line'


class CommissionCondition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    com_item = models.ForeignKey('CommissionItem', models.DO_NOTHING, blank=True, null=True)
    com_setting = models.ForeignKey('CommissionSettings', models.DO_NOTHING, blank=True, null=True)
    com_var = models.ForeignKey('CommissionVariable', models.DO_NOTHING, blank=True, null=True)
    formula = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    contact_fix_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    default_building_project = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    fix_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    group_name = models.CharField(max_length=256, blank=True, null=True)
    in_bmr_other = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    in_bmr_thule = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_target_team = models.BooleanField(blank=True, null=True)
    out_bmr_other = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    out_bmr_thule = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    salethule = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    is_bmr = models.BooleanField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING, blank=True, null=True)
    position = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    sale_area = models.ForeignKey('SaleArea', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition'


class CommissionConditionLine(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    condition = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    operation = models.CharField(max_length=256, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    variable = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line'


class CommissionConditionLineAec(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    contact = models.ForeignKey('Contact', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_aec'


class CommissionConditionLineBuddyThule(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    thule = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    thule_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_buddy_thule'


class CommissionConditionLineContact(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_contact'


class CommissionConditionLineContactThule(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_contact_thule'


class CommissionConditionLineContactTns(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_contact_tns'


class CommissionConditionLineFixRateTarget(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_fix_rate_target'


class CommissionConditionLineSpecialCs(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_special_cs'


class CommissionConditionLineSpecialImc(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_special_imc'


class CommissionConditionLineTargetTeam(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_target_team'


class CommissionConditionLineUnitRate(models.Model):
    cond = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_condition_line_unit_rate'


class CommissionItem(models.Model):
    active = models.BooleanField(blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    confirm_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    period_from = models.DateField()
    period_to = models.DateField()
    reject_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_item'


class CommissionItemLine(models.Model):
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    com_item = models.ForeignKey(CommissionItem, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    formula = models.CharField(max_length=256, blank=True, null=True)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_item_line'


class CommissionLeaderTeam(models.Model):
    approved_date = models.DateTimeField(blank=True, null=True)
    com_setting = models.ForeignKey('CommissionSettings', models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_leader_team'


class CommissionLeaderTeamLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey(CommissionLeaderTeam, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_leader_team_line'


class CommissionRate(models.Model):
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    settings = models.ForeignKey('CommissionSettings', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    formula = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_rate'


class CommissionRateLine(models.Model):
    condition = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    formula = models.CharField(max_length=256, blank=True, null=True)
    parent = models.ForeignKey(CommissionRate, models.DO_NOTHING, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rate_0 = models.ForeignKey(CommissionRate, models.DO_NOTHING, db_column='rate_id')  # Field renamed because of name conflict.
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    condition_0 = models.ForeignKey(CommissionCondition, models.DO_NOTHING, db_column='condition_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'commission_rate_line'


class CommissionSettings(models.Model):
    active = models.BooleanField(blank=True, null=True)
    company = models.ForeignKey('Company', models.DO_NOTHING)
    confirm_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    number = models.CharField(max_length=256)
    period_from = models.DateField()
    period_to = models.DateField()
    reject_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    commission_rate_bill_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    commission_rate_kpi_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    commission_rate_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    default_approve_level = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    department = models.ForeignKey('HrDepartment', models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    type_com = models.CharField(max_length=64, blank=True, null=True)
    month = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'commission_settings'


class CommissionSettingsExpense(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_commission = models.BooleanField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_settings_expense'


class CommissionTarget(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    approve_time = models.DateTimeField(blank=True, null=True)
    approve_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    draft_time = models.DateTimeField(blank=True, null=True)
    draft_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    leader = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    void_time = models.DateTimeField(blank=True, null=True)
    void_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    product_group_name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_target'


class CommissionVariable(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    settings = models.ForeignKey('Settings', models.DO_NOTHING)
    variable = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    formula = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commission_variable'


class Company(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    prevent_trans = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'company'


class CompanyType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'company_type'


class Competitor(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'competitor'


class ConfigFlowLine(models.Model):
    config = models.ForeignKey('Settings', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    drive_link = models.CharField(max_length=256, blank=True, null=True)
    head_name = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'config_flow_line'


class Contact(models.Model):
    account_payable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_receivable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    assigned_to = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    assistant = models.CharField(max_length=256, blank=True, null=True)
    assistant_phone = models.CharField(max_length=256, blank=True, null=True)
    bank_account_details = models.CharField(max_length=256, blank=True, null=True)
    bank_account_name = models.CharField(max_length=256, blank=True, null=True)
    bank_account_no = models.CharField(max_length=256, blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    business_area = models.ForeignKey(BusinessArea, models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey('ContactCateg', models.DO_NOTHING, blank=True, null=True)
    code = models.CharField(max_length=256)
    commission_po_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey('Country', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('Currency', models.DO_NOTHING, blank=True, null=True)
    customer = models.BooleanField(blank=True, null=True)
    department = models.CharField(max_length=256, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    employees = models.CharField(max_length=256, blank=True, null=True)
    fax = models.CharField(max_length=256, blank=True, null=True)
    first_name = models.CharField(max_length=256, blank=True, null=True)
    first_name2 = models.CharField(max_length=256, blank=True, null=True)
    first_name3 = models.CharField(max_length=256, blank=True, null=True)
    fleet_size = models.ForeignKey('FleetSize', models.DO_NOTHING, blank=True, null=True)
    home_phone = models.CharField(max_length=256, blank=True, null=True)
    industry = models.CharField(max_length=256, blank=True, null=True)
    industry_0 = models.ForeignKey('Industry', models.DO_NOTHING, db_column='industry_id', blank=True, null=True)  # Field renamed because of name conflict.
    inquiry_type = models.CharField(max_length=256, blank=True, null=True)
    last_name = models.CharField(max_length=256, blank=True, null=True)
    lead_source = models.CharField(max_length=256, blank=True, null=True)
    mobile = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    other_phone = models.CharField(max_length=256, blank=True, null=True)
    pay_in_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    pay_out_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    payables_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    payables_overdue = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    pick_in_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    pick_out_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    picture = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    purchase_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    purchase_price_list = models.ForeignKey('PriceList', models.DO_NOTHING, blank=True, null=True)
    receivables_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    receivables_overdue = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    region = models.CharField(max_length=256, blank=True, null=True)
    region_0 = models.ForeignKey('Region', models.DO_NOTHING, db_column='region_id', blank=True, null=True)  # Field renamed because of name conflict.
    report_to = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    revenue = models.CharField(max_length=256, blank=True, null=True)
    sale_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    sale_price_list = models.ForeignKey('PriceList', models.DO_NOTHING, blank=True, null=True)
    supplier = models.BooleanField(blank=True, null=True)
    tax_branch_no = models.CharField(max_length=256, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_payable = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_receivable = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    website = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    purchase_payment_terms = models.ForeignKey('PaymentTerms', models.DO_NOTHING, blank=True, null=True)
    sale_payment_terms = models.ForeignKey('PaymentTerms', models.DO_NOTHING, blank=True, null=True)
    activate_credit_control = models.BooleanField(blank=True, null=True)
    block = models.BooleanField(blank=True, null=True)
    credit_limit = models.FloatField(blank=True, null=True)
    credit_term = models.IntegerField(blank=True, null=True)
    require_approval = models.BooleanField(blank=True, null=True)
    rev_frequency = models.IntegerField(blank=True, null=True)
    bill_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    sale_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    place = models.CharField(max_length=64, blank=True, null=True)
    ship_company = models.BooleanField(blank=True, null=True)
    warranty_card = models.IntegerField(blank=True, null=True)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    sale_area = models.ForeignKey('SaleArea', models.DO_NOTHING, blank=True, null=True)
    check_customer = models.CharField(max_length=64, blank=True, null=True)
    check_supplier = models.CharField(max_length=64, blank=True, null=True)
    is_bmr = models.BooleanField(blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    reserve_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    balance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_master = models.BooleanField(blank=True, null=True)
    is_approved = models.BooleanField(blank=True, null=True)
    leader = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    edit_date = models.DateTimeField(blank=True, null=True)
    edit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    district = models.ForeignKey('District', models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    related_contact = models.CharField(max_length=64, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    is_bounce = models.BooleanField(blank=True, null=True)
    billing_date = models.CharField(max_length=64, blank=True, null=True)
    receipt_cheque_date = models.CharField(max_length=64, blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    desc_billing_note = models.TextField(blank=True, null=True)
    lead = models.ForeignKey('SaleLead', models.DO_NOTHING, blank=True, null=True)
    credit_control_note = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approved_by_date = models.DateTimeField(blank=True, null=True)
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    archive_date = models.DateTimeField(blank=True, null=True)
    archive = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    write_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    bill_province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    old_code = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact'


class ContactCateg(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_categ'


class ContactGroup(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    sale_price_list = models.ForeignKey('PriceList', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_group'


class ContactRelation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    details = models.TextField(blank=True, null=True)
    from_contact = models.ForeignKey(Contact, models.DO_NOTHING)
    rel_type = models.ForeignKey('ContactRelationType', models.DO_NOTHING)
    to_contact = models.ForeignKey(Contact, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_relation'


class ContactRelationType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_relation_type'


class ContactSettings(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contact_settings'


class ConvAccount(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    conv = models.ForeignKey('ConvBal', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    debit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_account'


class ConvBal(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_fmt = models.CharField(max_length=256, blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_cheque_fmt = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_bal'


class ConvChequePayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    cheque_date = models.DateField()
    cheque_number = models.CharField(max_length=256)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    conv = models.ForeignKey(ConvBal, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    subtype = models.CharField(max_length=64)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_cheque_payment'


class ConvChequeReceipt(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    cheque_date = models.DateField()
    cheque_number = models.CharField(max_length=256)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    conv = models.ForeignKey(ConvBal, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    subtype = models.CharField(max_length=64)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lm_bank = models.ForeignKey('LmBank', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_cheque_receipt'


class ConvPurchInvoice(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    conv = models.ForeignKey(ConvBal, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    due_date = models.DateField()
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_purch_invoice'


class ConvSaleInvoice(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    conv = models.ForeignKey(ConvBal, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    due_date = models.DateField()
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'conv_sale_invoice'


class ConvertLead(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lead = models.ForeignKey('SaleLead', models.DO_NOTHING)
    name = models.CharField(max_length=256)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'convert_lead'


class CostName(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    alloc_type = models.CharField(max_length=64, blank=True, null=True)
    code = models.CharField(max_length=256)
    cost_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cost_name'


class Country(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'country'


class CouponCondition(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    max_qty = models.IntegerField(blank=True, null=True)
    min_qty = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'coupon_condition'


class CouponConditionAmount(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    max_amount = models.IntegerField(blank=True, null=True)
    min_amount = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'coupon_condition_amount'


class CreateCouponLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    coupon_number = models.CharField(max_length=256, blank=True, null=True)
    coupon_type = models.CharField(max_length=64, blank=True, null=True)
    create = models.ForeignKey('CreateVoidCoupon', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_coupon_line'


class CreateDeliveryRoute(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_delivery_route'


class CreateDeliveryRouteLine(models.Model):
    carrier = models.ForeignKey('DeliveryCarrier', models.DO_NOTHING, blank=True, null=True)
    create_delivery = models.ForeignKey(CreateDeliveryRoute, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    delivery_slot = models.ForeignKey('DeliverySlot', models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_delivery_route_line'


class CreateProjectTaskList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    milestone = models.ForeignKey('ProjectMilestone', models.DO_NOTHING, blank=True, null=True)
    milestones = models.TextField(blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey('TaskListTemplate', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_project_task_list'


class CreateTaskList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    milestone = models.ForeignKey('ProjectMilestone', models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey('TaskListTemplate', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    milestones = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_task_list'


class CreateVoidCoupon(models.Model):
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    done = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_void_coupon'


class CreateVoidCouponLine(models.Model):
    coupon = models.ForeignKey('SaleCoupon', models.DO_NOTHING, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    coupon_type = models.CharField(max_length=64, blank=True, null=True)
    create = models.ForeignKey(CreateVoidCoupon, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'create_void_coupon_line'


class CreditControlSetting(models.Model):
    activate_credit_control = models.BooleanField(blank=True, null=True)
    block = models.BooleanField(blank=True, null=True)
    contact_master = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    credit_master = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    master_term = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    approved = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    await_approve_date = models.DateTimeField(blank=True, null=True)
    await_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    rejected_date = models.DateTimeField(blank=True, null=True)
    rejected = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    voided_date = models.DateTimeField(blank=True, null=True)
    voided = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    is_master = models.BooleanField(blank=True, null=True)
    contact_ids = models.TextField(blank=True, null=True)
    ref = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'credit_control_setting'


class CreditControlSettingLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.ForeignKey(CreditControlSetting, models.DO_NOTHING)
    term = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    block = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'credit_control_setting_line'


class CreditMoveAddCredit(models.Model):
    book_bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    move = models.ForeignKey(AccountCreditCardMove, models.DO_NOTHING, blank=True, null=True)
    selected_ids = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'credit_move_add_credit'


class CronJob(models.Model):
    args = models.TextField(blank=True, null=True)
    call_num = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    date_start = models.DateTimeField(blank=True, null=True)
    date_stop = models.DateTimeField(blank=True, null=True)
    error_message = models.TextField(blank=True, null=True)
    interval_num = models.IntegerField(blank=True, null=True)
    interval_type = models.CharField(max_length=64, blank=True, null=True)
    last_error_time = models.DateTimeField(blank=True, null=True)
    method = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    timeout = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cron_job'


class Currency(models.Model):
    account_payable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_receivable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    sign = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'currency'


class CurrencyRate(models.Model):
    buy_rate = models.DecimalField(max_digits=16, decimal_places=8)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    sell_rate = models.DecimalField(max_digits=16, decimal_places=8)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'currency_rate'


class CustomCurrencyRate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    rate = models.DecimalField(max_digits=16, decimal_places=8)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'custom_currency_rate'


class DeliveryCarrier(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    delivery_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_carrier'


class DeliveryCarrierRound(models.Model):
    carrier = models.ForeignKey(DeliveryCarrier, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    seq_max = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    seq_min = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    depart_time = models.DateTimeField(blank=True, null=True)
    return_time = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_carrier_round'


class DeliveryRoute(models.Model):
    carrier = models.ForeignKey(DeliveryCarrier, models.DO_NOTHING, blank=True, null=True)
    create_delivery_route = models.ForeignKey(CreateDeliveryRoute, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    delivery_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    delivery_user = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    transport = models.CharField(max_length=256, blank=True, null=True)
    create_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    ext_number = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    departures = models.CharField(max_length=64, blank=True, null=True)
    depart_time = models.DateTimeField(blank=True, null=True)
    return_time = models.DateTimeField(blank=True, null=True)
    car_list = models.TextField(blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    user_list = models.TextField(blank=True, null=True)
    delivery_slot = models.ForeignKey('DeliverySlot', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    complete_all = models.BooleanField(blank=True, null=True)
    complete_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    complete_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    create_date = models.DateTimeField(blank=True, null=True)
    transit_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    transit_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_route'


class DeliveryRouteLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    route = models.ForeignKey(DeliveryRoute, models.DO_NOTHING)
    sequence = models.IntegerField()
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    description = models.TextField()
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    big_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    big_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    str_brc = models.CharField(max_length=256, blank=True, null=True)
    check_prod = models.BooleanField(blank=True, null=True)
    move = models.ForeignKey('StockMove', models.DO_NOTHING, blank=True, null=True)
    state_line = models.CharField(max_length=64)
    check_state = models.CharField(max_length=256, blank=True, null=True)
    ship_pay_by = models.CharField(max_length=64, blank=True, null=True)
    reason_code = models.ForeignKey('ReasonCode', models.DO_NOTHING, blank=True, null=True)
    private_trans = models.ForeignKey(Contact, models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_route_line'


class DeliverySlot(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    test_time = models.TimeField(blank=True, null=True)
    time_from = models.CharField(max_length=256)
    time_to = models.CharField(max_length=256)
    time_from_new = models.TimeField(blank=True, null=True)
    time_to_new = models.TimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_slot'


class DeliverySlotCapacity(models.Model):
    capacity = models.IntegerField()
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    exclude_postal_codes = models.TextField(blank=True, null=True)
    slot = models.ForeignKey(DeliverySlot, models.DO_NOTHING)
    weekday = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'delivery_slot_capacity'


class DetailReportCustDeposit(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    document_type = models.CharField(max_length=64, blank=True, null=True)
    number_deposit = models.CharField(max_length=256, blank=True, null=True)
    number_invoice = models.CharField(max_length=256, blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'detail_report_cust_deposit'


class DetailReportCustPayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    document_type = models.CharField(max_length=64, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    pay_type = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_currency = models.BooleanField(blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    show_related = models.BooleanField(blank=True, null=True)
    cheque_no = models.CharField(max_length=256, blank=True, null=True)
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    accounts = models.TextField(blank=True, null=True)
    select_type = models.CharField(max_length=64, blank=True, null=True)
    bill = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    show_ref = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'detail_report_cust_payment'


class DetailReportSuppDeposit(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    document_type = models.CharField(max_length=64, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    pay_type = models.CharField(max_length=64, blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'detail_report_supp_deposit'


class DetailReportSuppPayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    document_type = models.CharField(max_length=64, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    pay_type = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_currency = models.BooleanField(blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    show_related = models.BooleanField(blank=True, null=True)
    cheque_no = models.CharField(max_length=256, blank=True, null=True)
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    accounts = models.TextField(blank=True, null=True)
    select_type = models.CharField(max_length=64, blank=True, null=True)
    show_ref = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'detail_report_supp_payment'


class District(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'district'


class Document(models.Model):
    active = models.BooleanField(blank=True, null=True)
    categ = models.ForeignKey('DocumentCateg', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_job = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    expiry_date = models.DateField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    share = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'document'


class DocumentCateg(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expire_after = models.CharField(max_length=256, blank=True, null=True)
    file_name = models.CharField(max_length=256, blank=True, null=True)
    full_name = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'document_categ'


class DocumentTmpl(models.Model):
    categ = models.ForeignKey(DocumentCateg, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'document_tmpl'


class EcomCart(models.Model):
    accept_marketing = models.BooleanField(blank=True, null=True)
    amount_ship = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_address = models.CharField(max_length=256, blank=True, null=True)
    bill_address2 = models.CharField(max_length=256, blank=True, null=True)
    bill_city = models.CharField(max_length=256, blank=True, null=True)
    bill_company = models.CharField(max_length=256, blank=True, null=True)
    bill_country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    bill_district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    bill_first_name = models.CharField(max_length=256, blank=True, null=True)
    bill_last_name = models.CharField(max_length=256, blank=True, null=True)
    bill_phone = models.CharField(max_length=256, blank=True, null=True)
    bill_postal_code = models.CharField(max_length=256, blank=True, null=True)
    bill_province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    bill_subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    comments = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    coupon_code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_confirmed = models.DateTimeField(blank=True, null=True)
    date_created = models.DateTimeField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    ip_addr = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    pay_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING, blank=True, null=True)
    payment_checked = models.BooleanField(blank=True, null=True)
    payment_notes = models.TextField(blank=True, null=True)
    payment_ref = models.CharField(max_length=256, blank=True, null=True)
    pricelist = models.ForeignKey('PriceList', models.DO_NOTHING, blank=True, null=True)
    promotion_message = models.TextField(blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.CharField(max_length=256, blank=True, null=True)
    ship_address2 = models.CharField(max_length=256, blank=True, null=True)
    ship_city = models.CharField(max_length=256, blank=True, null=True)
    ship_company = models.CharField(max_length=256, blank=True, null=True)
    ship_country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    ship_district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    ship_first_name = models.CharField(max_length=256, blank=True, null=True)
    ship_last_name = models.CharField(max_length=256, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_phone = models.CharField(max_length=256, blank=True, null=True)
    ship_postal_code = models.CharField(max_length=256, blank=True, null=True)
    ship_province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    ship_subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    ship_to_bill = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_branch_no = models.CharField(max_length=256, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    website = models.ForeignKey('Website', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_cart'


class EcomCartLine(models.Model):
    cart = models.ForeignKey(EcomCart, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.IntegerField()
    sequence = models.IntegerField()
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_cart_line'


class EcomCartLineImage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    line = models.ForeignKey(EcomCartLine, models.DO_NOTHING)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_cart_line_image'


class EcomCartPromotion(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cart = models.ForeignKey(EcomCart, models.DO_NOTHING)
    cond_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    cond_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_cart_promotion'


class EcomProductReview(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    rating = models.CharField(max_length=64, blank=True, null=True)
    review = models.TextField()
    state = models.CharField(max_length=64, blank=True, null=True)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_product_review'


class EcomWishlist(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ecom_wishlist'


class EmailAccount(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    host = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    password = models.CharField(max_length=256, blank=True, null=True)
    port = models.IntegerField(blank=True, null=True)
    security = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64)
    user = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_account'


class EmailAttach(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.ForeignKey('EmailMessage', models.DO_NOTHING)
    file = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_attach'


class EmailEvent(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    details = models.TextField(blank=True, null=True)
    email = models.ForeignKey('EmailMessage', models.DO_NOTHING)
    ip_addr = models.CharField(max_length=256, blank=True, null=True)
    location = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    url = models.CharField(max_length=1024, blank=True, null=True)
    user_agent = models.CharField(max_length=1024, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_event'


class EmailMailbox(models.Model):
    account = models.ForeignKey(EmailAccount, models.DO_NOTHING, blank=True, null=True)
    account_mailbox = models.CharField(max_length=256, blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    last_msg_date = models.DateField(blank=True, null=True)
    last_msg_uid = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_mailbox'


class EmailMessage(models.Model):
    body = models.TextField(blank=True, null=True)
    cc_addrs = models.CharField(max_length=256, blank=True, null=True)
    clicked = models.BooleanField(blank=True, null=True)
    content_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    error_message = models.TextField(blank=True, null=True)
    from_addr = models.CharField(max_length=256)
    mailbox = models.ForeignKey(EmailMailbox, models.DO_NOTHING, blank=True, null=True)
    mailbox_message_uid = models.CharField(max_length=256, blank=True, null=True)
    message_id = models.CharField(max_length=256, blank=True, null=True)
    name_id = models.CharField(max_length=64, blank=True, null=True)
    opened = models.BooleanField(blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    parent_uid = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    subject = models.CharField(max_length=128)
    to_addrs = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_message'


class EmailReject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    details = models.TextField(blank=True, null=True)
    email = models.CharField(max_length=256)
    reason = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_reject'


class EmailTemplate(models.Model):
    attachments = models.CharField(max_length=256, blank=True, null=True)
    body = models.TextField()
    cc_addrs = models.CharField(max_length=256, blank=True, null=True)
    contact = models.CharField(max_length=256, blank=True, null=True)
    content_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    from_addr = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    related = models.CharField(max_length=256, blank=True, null=True)
    subject = models.CharField(max_length=256)
    to_addrs = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'email_template'


class EmployeeWorkcenterLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING, blank=True, null=True)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'employee_workcenter_line'


class ExtUrlLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ext_id_field = models.CharField(max_length=256, blank=True, null=True)
    ext_url = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING, blank=True, null=True)
    setting = models.ForeignKey('Settings', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ext_url_line'


class FaultCode(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fault_code'


class Feedback(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    feeling = models.CharField(max_length=64, blank=True, null=True)
    from_field = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='from_id')  # Field renamed because it was a Python reserved word.
    message = models.TextField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'feedback'


class FetchInlineHelp(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fetch_inline_help'


class Field(models.Model):
    condition = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default = models.CharField(max_length=1024, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    function = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING)
    module = models.ForeignKey('Module', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    readonly = models.BooleanField(blank=True, null=True)
    relation = models.ForeignKey('Model', models.DO_NOTHING, blank=True, null=True)
    relfield = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    required = models.BooleanField(blank=True, null=True)
    search = models.BooleanField(blank=True, null=True)
    selection = models.CharField(max_length=1024, blank=True, null=True)
    stored = models.BooleanField(blank=True, null=True)
    string = models.CharField(max_length=256)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field'


class Field2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    condition = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default = models.CharField(max_length=1024, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    function = models.CharField(max_length=256, blank=True, null=True)
    model_id = models.IntegerField(blank=True, null=True)
    module_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    readonly = models.BooleanField(blank=True, null=True)
    relation_id = models.IntegerField(blank=True, null=True)
    relfield_id = models.IntegerField(blank=True, null=True)
    required = models.BooleanField(blank=True, null=True)
    search = models.BooleanField(blank=True, null=True)
    selection = models.CharField(max_length=1024, blank=True, null=True)
    stored = models.BooleanField(blank=True, null=True)
    string = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field2'


class FieldAccess(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field = models.ForeignKey(Field, models.DO_NOTHING)
    perm_read = models.BooleanField(blank=True, null=True)
    perm_write = models.BooleanField(blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_access'


class FieldCache(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ctime = models.DateTimeField(blank=True, null=True)
    field = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=256, blank=True, null=True)
    record_id = models.IntegerField(blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_cache'


class FieldDefault(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field = models.CharField(max_length=256)
    model = models.CharField(max_length=256)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    value = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_default'


class FieldSelect(models.Model):
    active = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field_name = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING)
    name = models.CharField(max_length=256)
    select = models.TextField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    select_value = models.TextField(blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_select'


class FieldValue(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field = models.CharField(max_length=256, blank=True, null=True)
    language = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=256, blank=True, null=True)
    record_id = models.IntegerField(blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_value'


class FilmVoucher(models.Model):
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'film_voucher'


class FilmVoucherItem(models.Model):
    burn_related = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    voucher = models.ForeignKey(FilmVoucher, models.DO_NOTHING)
    voucher_item = models.ForeignKey('FilmVoucherLine', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    number = models.CharField(max_length=256)
    credit_related = models.ForeignKey(AccountInvoice, models.DO_NOTHING, db_column='credit_related', blank=True, null=True)
    state = models.CharField(max_length=64)
    use_related = models.ForeignKey('SaleOrder', models.DO_NOTHING, db_column='use_related', blank=True, null=True)
    coupon_used = models.TextField(blank=True, null=True)
    qty_coupon = models.ForeignKey('SaleCoupon', models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    manual_used_date = models.DateTimeField(blank=True, null=True)
    manual_used = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    used_date = models.DateTimeField(blank=True, null=True)
    used = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'film_voucher_item'


class FilmVoucherLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    voucher = models.ForeignKey(FilmVoucher, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    is_credit = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'film_voucher_line'


class FixedAssetDisposesMove(models.Model):
    asset_dispose = models.ForeignKey(AccountFixedAssetDisposes, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fixed_asset_disposes_move'


class FixedAssetSellsMove(models.Model):
    accum_depr_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    asset_sell = models.ForeignKey(AccountFixedAssetSells, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    gain_loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    test = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fixed_asset_sells_move'


class FleetSize(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fleet_size'


class Flow(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'flow'


class ForgotPasswd(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.CharField(max_length=256)
    key = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    db_name = models.CharField(max_length=64)
    show_dbs = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'forgot_passwd'


class FreeGiftLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_add = models.BooleanField(blank=True, null=True)
    promotion_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'free_gift_line'


class Hidden(models.Model):
    active = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field_name = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent_menu = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    separator_remove = models.CharField(max_length=64, blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hidden'


class Hidden2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field_name = models.CharField(max_length=256, blank=True, null=True)
    model_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    parent_menu = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    separator_remove = models.CharField(max_length=64, blank=True, null=True)
    profile_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hidden2'


class HiddenAddon(models.Model):
    active = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field_name = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey('Model', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent_menu = models.CharField(max_length=256, blank=True, null=True)
    separator_remove = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hidden_addon'


class HrApprove(models.Model):
    approver_encode = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    days_remaining_show = models.CharField(max_length=256, blank=True, null=True)
    days_requested_show = models.CharField(max_length=256, blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    end_date = models.DateTimeField()
    key = models.CharField(max_length=256, blank=True, null=True)
    leave_no = models.CharField(max_length=256, blank=True, null=True)
    leave_reason = models.TextField(blank=True, null=True)
    leave_type = models.ForeignKey('HrLeaveType', models.DO_NOTHING)
    period = models.ForeignKey('HrLeavePeriod', models.DO_NOTHING)
    pin_code = models.CharField(max_length=256, blank=True, null=True)
    schedule = models.ForeignKey('HrSchedule', models.DO_NOTHING)
    start_date = models.DateTimeField()
    state = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_approve'


class HrAttendance(models.Model):
    action = models.CharField(max_length=64)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey('HrEmployee', models.DO_NOTHING)
    mode = models.CharField(max_length=64, blank=True, null=True)
    time = models.DateTimeField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_attendance'


class HrAttendanceConfig(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ip_address = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    os_type = models.CharField(max_length=64, blank=True, null=True)
    password = models.CharField(max_length=256, blank=True, null=True)
    port = models.IntegerField(blank=True, null=True)
    url_download = models.CharField(max_length=256, blank=True, null=True)
    user = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_attendance_config'


class HrDepartment(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_department'


class HrEmployee(models.Model):
    active = models.BooleanField(blank=True, null=True)
    approver = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    attendance_code = models.CharField(max_length=256, blank=True, null=True)
    bank_account = models.CharField(max_length=256, blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    depart_district = models.CharField(max_length=256, blank=True, null=True)
    depart_name = models.CharField(max_length=256, blank=True, null=True)
    depart_number = models.CharField(max_length=256, blank=True, null=True)
    depart_province = models.CharField(max_length=256, blank=True, null=True)
    depart_road = models.CharField(max_length=256, blank=True, null=True)
    depart_room_number = models.CharField(max_length=256, blank=True, null=True)
    depart_soi = models.CharField(max_length=256, blank=True, null=True)
    depart_stage = models.CharField(max_length=256, blank=True, null=True)
    depart_sub_district = models.CharField(max_length=256, blank=True, null=True)
    depart_sub_number = models.CharField(max_length=256, blank=True, null=True)
    depart_tel = models.CharField(max_length=256, blank=True, null=True)
    depart_village = models.CharField(max_length=256, blank=True, null=True)
    depart_zip = models.CharField(max_length=256, blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    disabled_support = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    drive_license_no = models.CharField(max_length=256, blank=True, null=True)
    drive_license_type = models.CharField(max_length=64, blank=True, null=True)
    education_donation = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    father_id_no = models.CharField(max_length=256, blank=True, null=True)
    first_name = models.CharField(max_length=256)
    gender = models.CharField(max_length=64, blank=True, null=True)
    gov_pension_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    hire_date = models.DateField()
    house_deduct = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    id_no = models.CharField(max_length=256, blank=True, null=True)
    interest_residence = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    last_name = models.CharField(max_length=256)
    life_insurance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    long_term_equity_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    marital_status = models.CharField(max_length=64, blank=True, null=True)
    mother_id_no = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    name_last_th = models.CharField(max_length=256, blank=True, null=True)
    name_th = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    num_child1 = models.IntegerField(blank=True, null=True)
    num_child2 = models.IntegerField(blank=True, null=True)
    old_disabled = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    old_disabled_spouse = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    other_deduct = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    other_donation = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    parent_health_insurance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    payslip_template = models.ForeignKey('HrPayslipTemplate', models.DO_NOTHING, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    picture = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    profile = models.ForeignKey('HrPayitemProfile', models.DO_NOTHING, blank=True, null=True)
    prov_fund_no = models.CharField(max_length=256, blank=True, null=True)
    prov_rate_employee = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prov_rate_employer = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prov_regis = models.BooleanField(blank=True, null=True)
    resign_date = models.DateField(blank=True, null=True)
    retirement_mutual_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    salary = models.DecimalField(max_digits=16, decimal_places=2)
    schedule = models.ForeignKey('HrSchedule', models.DO_NOTHING)
    severance_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_calc_method = models.CharField(max_length=64, blank=True, null=True)
    social_no = models.CharField(max_length=256, blank=True, null=True)
    social_register = models.BooleanField(blank=True, null=True)
    spouse_birth_date = models.DateField(blank=True, null=True)
    spouse_father_id_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_filing_status = models.CharField(max_length=64, blank=True, null=True)
    spouse_first_name = models.CharField(max_length=256, blank=True, null=True)
    spouse_last_name = models.CharField(max_length=256, blank=True, null=True)
    spouse_mother_id_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_status = models.CharField(max_length=64, blank=True, null=True)
    spouse_tax_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_title = models.CharField(max_length=64, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_register = models.BooleanField(blank=True, null=True)
    teacher_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    title = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    wht_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    work_status = models.CharField(max_length=64, blank=True, null=True)
    work_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    bank_name = models.CharField(max_length=256, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    ending_probation = models.DateField(blank=True, null=True)
    exp_date_drive_license_no = models.DateField(blank=True, null=True)
    expire_date_id_no = models.DateField(blank=True, null=True)
    family_book_date = models.DateField(blank=True, null=True)
    family_book_no = models.CharField(max_length=256, blank=True, null=True)
    hospital = models.CharField(max_length=256, blank=True, null=True)
    attendance_id = models.IntegerField(blank=True, null=True)
    prov_open_date = models.DateField(blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_employee'


class HrExpense(models.Model):
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='approved_by', blank=True, null=True)
    approved_date = models.DateField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    date = models.DateField()
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    approve_counter = models.IntegerField(blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    due_date_payment = models.DateField(blank=True, null=True)
    department_ids = models.TextField(blank=True, null=True)
    approve_by_2 = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_by_3 = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve_date_2 = models.DateTimeField(blank=True, null=True)
    approve_date_3 = models.DateTimeField(blank=True, null=True)
    cancel_date = models.DateTimeField(blank=True, null=True)
    cancel = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    decline_date = models.DateTimeField(blank=True, null=True)
    decline_date_2 = models.DateTimeField(blank=True, null=True)
    decline_date_3 = models.DateTimeField(blank=True, null=True)
    decline = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    decline_id_2 = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='decline_id_2', blank=True, null=True)
    decline_id_3 = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='decline_id_3', blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason_reject = models.ForeignKey('ReasonIssue', models.DO_NOTHING, blank=True, null=True)
    reason_reject_text = models.TextField(blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    review_date = models.DateTimeField(blank=True, null=True)
    review = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    exp_track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    approve_relate = models.TextField(blank=True, null=True)
    wht_tax_no = models.CharField(max_length=256, blank=True, null=True)
    wht_tax_no_backup = models.TextField(blank=True, null=True)
    back_acc_review_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    back_acc_review_date = models.DateTimeField(blank=True, null=True)
    back_approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    back_approve_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_expense'


class HrExpenseAlloc(models.Model):
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_expense_alloc'


class HrExpenseLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField()
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    budget_detail = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_expense_line'


class HrHoliday(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(unique=True)
    description = models.TextField(blank=True, null=True)
    generic = models.BooleanField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_holiday'


class HrImportAttendance(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_fmt = models.CharField(max_length=256, blank=True, null=True)
    encoding = models.CharField(max_length=64)
    file = models.CharField(max_length=256, blank=True, null=True)
    import_type = models.CharField(max_length=64)
    machine = models.ForeignKey(HrAttendanceConfig, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_import_attendance'


class HrLeave(models.Model):
    check_day_remaining = models.TextField(blank=True, null=True)
    check_repeat = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    employee_work_status = models.CharField(max_length=64, blank=True, null=True)
    end_date = models.DateTimeField()
    format_type = models.CharField(max_length=64, blank=True, null=True)
    key = models.CharField(max_length=10, blank=True, null=True)
    leave_reason = models.TextField()
    leave_type = models.ForeignKey('HrLeaveType', models.DO_NOTHING)
    num_of_day = models.DecimalField(max_digits=16, decimal_places=2)
    num_of_hour = models.DecimalField(max_digits=16, decimal_places=2)
    number = models.CharField(max_length=256, blank=True, null=True)
    period = models.ForeignKey('HrLeavePeriod', models.DO_NOTHING)
    schedule = models.ForeignKey('HrSchedule', models.DO_NOTHING)
    start_date = models.DateTimeField()
    start_date_ft = models.DateField()
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    time_from = models.CharField(max_length=256, blank=True, null=True)
    time_to = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_leave'


class HrLeavePeriod(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    leave_type = models.ForeignKey('HrLeaveType', models.DO_NOTHING)
    max_date = models.DateField(blank=True, null=True)
    max_days = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    week_end = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_leave_period'


class HrLeaveType(models.Model):
    condition = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_leave_type'


class HrNotification(models.Model):
    birthday_ntf = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    subject = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_notification'


class HrPayPeriod(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_pay_period'


class HrPayPeriodLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    period = models.ForeignKey(HrPayPeriod, models.DO_NOTHING)
    time_start = models.DateTimeField()
    time_stop = models.DateTimeField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_pay_period_line'


class HrPayitem(models.Model):
    acc_type = models.CharField(max_length=64, blank=True, null=True)
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    contrib_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    deduct_type = models.CharField(max_length=64, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    fix_income = models.BooleanField(blank=True, null=True)
    include_pnd1 = models.BooleanField(blank=True, null=True)
    include_sso = models.BooleanField(blank=True, null=True)
    include_tax = models.BooleanField(blank=True, null=True)
    months = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    show_default = models.BooleanField(blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    times = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64)
    wage_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    allow_type = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    recal = models.BooleanField(blank=True, null=True)
    regular = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payitem'


class HrPayitemProfile(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payitem_profile'


class HrPayitemProfileLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    payitem = models.ForeignKey(HrPayitem, models.DO_NOTHING, blank=True, null=True)
    profile = models.ForeignKey(HrPayitemProfile, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payitem_profile_line'


class HrPayrollSettings(models.Model):
    bank_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    child_alw_limit = models.IntegerField(blank=True, null=True)
    company = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    depart_district = models.CharField(max_length=256, blank=True, null=True)
    depart_fax = models.CharField(max_length=256, blank=True, null=True)
    depart_name = models.CharField(max_length=256, blank=True, null=True)
    depart_number = models.CharField(max_length=256, blank=True, null=True)
    depart_province = models.CharField(max_length=256, blank=True, null=True)
    depart_road = models.CharField(max_length=256, blank=True, null=True)
    depart_room_number = models.CharField(max_length=256, blank=True, null=True)
    depart_soi = models.CharField(max_length=256, blank=True, null=True)
    depart_stage = models.CharField(max_length=256, blank=True, null=True)
    depart_sub_district = models.CharField(max_length=256, blank=True, null=True)
    depart_sub_number = models.CharField(max_length=256, blank=True, null=True)
    depart_tel = models.CharField(max_length=256, blank=True, null=True)
    depart_village = models.CharField(max_length=256, blank=True, null=True)
    depart_zip = models.CharField(max_length=256, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    prov_name = models.CharField(max_length=256, blank=True, null=True)
    prov_no = models.CharField(max_length=256, blank=True, null=True)
    social_max_wage = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_min_wage = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_number = models.CharField(max_length=256, blank=True, null=True)
    social_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    payslip_template = models.ForeignKey('ReportTemplate', models.DO_NOTHING, blank=True, null=True)
    intg_acc = models.BooleanField(blank=True, null=True)
    sso_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sso_comp_support = models.BooleanField(blank=True, null=True)
    work_day_sat = models.BooleanField(blank=True, null=True)
    work_day_sun = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payroll_settings'


class HrPayrun(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_pay = models.DateField(blank=True, null=True)
    date_to = models.DateField()
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    month = models.CharField(max_length=64, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payrun'
        unique_together = (('number', 'company'),)


class HrPayrunJournal(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    payrun = models.ForeignKey(HrPayrun, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payrun_journal'


class HrPayrunJournalLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    debit = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    payrun_journal = models.ForeignKey(HrPayrunJournal, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payrun_journal_line'


class HrPayslip(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    run = models.ForeignKey(HrPayrun, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    month_name = models.CharField(max_length=256, blank=True, null=True)
    date = models.DateField()
    tax_profile = models.ForeignKey('HrTaxProfile', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip'


class HrPayslipJournal(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    payslip = models.ForeignKey(HrPayslip, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_journal'


class HrPayslipJournalLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contrib = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=4, blank=True, null=True)
    debit = models.DecimalField(max_digits=16, decimal_places=4, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    payslip_journal = models.ForeignKey(HrPayslipJournal, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_journal_line'


class HrPayslipLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pay_type = models.CharField(max_length=64)
    payitem = models.ForeignKey(HrPayitem, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    rate = models.DecimalField(max_digits=16, decimal_places=4)
    slip = models.ForeignKey(HrPayslip, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_line'


class HrPayslipTax(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    payslip = models.ForeignKey(HrPayslip, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_tax'


class HrPayslipTemplate(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    name = models.CharField(max_length=256, blank=True, null=True)
    payitem_profile = models.ForeignKey(HrPayitemProfile, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    fix_currency_rate = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_template'


class HrPayslipTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    payitem = models.ForeignKey(HrPayitem, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    regular = models.BooleanField(blank=True, null=True)
    template = models.ForeignKey(HrPayslipTemplate, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_payslip_template_line'


class HrSchedule(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    fri = models.BooleanField(blank=True, null=True)
    mon = models.BooleanField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sat = models.BooleanField(blank=True, null=True)
    sun = models.BooleanField(blank=True, null=True)
    thu = models.BooleanField(blank=True, null=True)
    tue = models.BooleanField(blank=True, null=True)
    wed = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_schedule'


class HrScheduleLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dow = models.CharField(max_length=64, blank=True, null=True)
    schedule = models.ForeignKey(HrSchedule, models.DO_NOTHING, blank=True, null=True)
    time_start = models.CharField(max_length=256, blank=True, null=True)
    time_stop = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_schedule_line'


class HrScheduleTime(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    schedule = models.ForeignKey(HrSchedule, models.DO_NOTHING, blank=True, null=True)
    time_start = models.CharField(max_length=5, blank=True, null=True)
    time_stop = models.CharField(max_length=5, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_schedule_time'


class HrTaxProfile(models.Model):
    buying_cash = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cash_property = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    child1_id_1 = models.CharField(max_length=256, blank=True, null=True)
    child1_id_2 = models.CharField(max_length=256, blank=True, null=True)
    child1_id_3 = models.CharField(max_length=256, blank=True, null=True)
    child2_id_1 = models.CharField(max_length=256, blank=True, null=True)
    child2_id_2 = models.CharField(max_length=256, blank=True, null=True)
    child2_id_3 = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    deduction_accum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    dis_tax_under_65 = models.BooleanField(blank=True, null=True)
    disabled_support = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    education_donation = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    father_id_no = models.CharField(max_length=256, blank=True, null=True)
    gov_pension_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    house_deduct = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    income_accum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    interest_residence = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    life_insurance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    long_term_equity_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    mother_id_no = models.CharField(max_length=256, blank=True, null=True)
    national_saving_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    num_child1 = models.IntegerField(blank=True, null=True)
    num_child2 = models.IntegerField(blank=True, null=True)
    old_disabled = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    old_disabled_spouse = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    other_donation = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    parent_health_insurance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    property_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    property_value_a13 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prov_fund_no = models.CharField(max_length=256, blank=True, null=True)
    prov_open_date = models.CharField(max_length=256, blank=True, null=True)
    prov_rate_employee = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prov_rate_employer = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    provident_accum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    retirement_mutual_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    severance_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_calc_method = models.CharField(max_length=64, blank=True, null=True)
    social_no = models.CharField(max_length=256, blank=True, null=True)
    social_register = models.BooleanField(blank=True, null=True)
    spouse_birth_date = models.DateField(blank=True, null=True)
    spouse_father_id_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_filing_status = models.CharField(max_length=64, blank=True, null=True)
    spouse_first_name = models.CharField(max_length=256, blank=True, null=True)
    spouse_last_name = models.CharField(max_length=256, blank=True, null=True)
    spouse_mother_id_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_status = models.CharField(max_length=64, blank=True, null=True)
    spouse_tax_no = models.CharField(max_length=256, blank=True, null=True)
    spouse_title = models.CharField(max_length=64, blank=True, null=True)
    sso_accum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_accum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_aged_65_older = models.BooleanField(blank=True, null=True)
    tax_year = models.ForeignKey('HrTaxYear', models.DO_NOTHING)
    teacher_fund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    travel_cash = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    wht_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_tax_profile'


class HrTaxRate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_income = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_income = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    settings = models.ForeignKey(HrPayrollSettings, models.DO_NOTHING, blank=True, null=True)
    tax_year = models.ForeignKey('HrTaxYear', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_tax_rate'


class HrTaxYear(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    not_exceed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    pc_gross_income = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_payer = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_unlimited_num_of_child = models.BooleanField(blank=True, null=True)
    tax_reduction_child = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_reduction_spouse = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    code = models.CharField(max_length=256)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    social_max_wage = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_min_wage = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_number = models.CharField(max_length=256, blank=True, null=True)
    social_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_employee_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    social_employer_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hr_tax_year'


class ImportChequeData(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256)
    model = models.CharField(max_length=256)
    next = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_cheque_data'


class ImportData(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256)
    model = models.CharField(max_length=256)
    next = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_data'


class ImportDemo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_demo'


class ImportDemoLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    import_field = models.ForeignKey(ImportDemo, models.DO_NOTHING, db_column='import_id', blank=True, null=True)  # Field renamed because it was a Python reserved word.
    import_list = models.ForeignKey('ImportDemoList', models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_demo_line'


class ImportDemoList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file_id = models.CharField(max_length=256)
    key_name = models.CharField(max_length=64, blank=True, null=True)
    model_name = models.CharField(max_length=64)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_demo_list'


class ImportField(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    model = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    string = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_field'


class ImportInlineHelp(models.Model):
    auth_code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    folder_id = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_inline_help'


class ImportModule(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_module'


class ImportStatement(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_end = models.DateField()
    date_start = models.DateField()
    encoding = models.CharField(max_length=64)
    file = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_statement'


class ImportStep(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_step'


class ImportStockCount(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256)
    model = models.CharField(max_length=256)
    next = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'import_stock_count'


class Incentive(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    incentive_coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    point_coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    request_related = models.CharField(max_length=64, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive'


class IncentiveDealerContacts(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING)
    incentive_line = models.ForeignKey('IncentiveLine', models.DO_NOTHING)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    tns_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    is_charge = models.BooleanField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    incentive_0 = models.DecimalField(db_column='incentive', max_digits=16, decimal_places=2, blank=True, null=True)  # Field renamed because of name conflict.
    inc_dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    remark_person = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_dealer_contacts'


class IncentiveDealerContactsGive(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    inc_dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING)
    incentive_line = models.ForeignKey('IncentiveGiveLine', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_dealer_contacts_give'


class IncentiveDealerContactsPoint(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    inc_dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING)
    incentive_line = models.ForeignKey('IncentivePointLine', models.DO_NOTHING)
    point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_dealer_contacts_point'


class IncentiveGiveLine(models.Model):
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_give_line'


class IncentiveLine(models.Model):
    cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    tns_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_charge = models.BooleanField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_line'


class IncentivePointLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_point_line'


class IncentivePromotion(models.Model):
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    request = models.ForeignKey('RequestPromotion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_promotion'


class IncentiveWarranty(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    confirm_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    contact_address = models.ForeignKey(Address, models.DO_NOTHING, db_column='contact_address', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    date_paid = models.DateField(blank=True, null=True)
    dealer_pay_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    number = models.CharField(max_length=256)
    reason = models.CharField(max_length=256, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    tns_pay_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    revise_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    revise_date = models.DateTimeField(blank=True, null=True)
    incentive_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'incentive_warranty'


class IncentiveWarrantyLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive = models.ForeignKey(IncentiveWarranty, models.DO_NOTHING)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    tns_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    warranty = models.ForeignKey('ServiceItem', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    coupon = models.ForeignKey('SaleCoupon', models.DO_NOTHING)
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    incentive_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    invoice2 = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_warranty_line'


class IncentiveWarrantyReviewLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive = models.ForeignKey(IncentiveWarranty, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incentive_warranty_review_line'


class Industry(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'industry'


class InlineHelp(models.Model):
    action = models.CharField(max_length=256)
    content = models.TextField()
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    hide = models.BooleanField(blank=True, null=True)
    modif_date = models.DateTimeField(blank=True, null=True)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'inline_help'


class InstallStep(models.Model):
    count = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'install_step'


class IntervalSettings(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'interval_settings'


class InvoiceOverpay(models.Model):
    amount_overpay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'invoice_overpay'


class InvoicePayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.CharField(max_length=256, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'invoice_payment'


class InvoiceRefund(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'invoice_refund'


class Issue(models.Model):
    comments = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_closed = models.DateTimeField(blank=True, null=True)
    date_created = models.DateTimeField()
    date_estimate = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    planned_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    priority = models.DecimalField(max_digits=16, decimal_places=2)
    project = models.ForeignKey('Project', models.DO_NOTHING)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    title = models.CharField(max_length=256)
    type = models.ForeignKey('IssueType', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'issue'


class IssueType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'issue_type'


class Job(models.Model):
    bill_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cancel_periodic = models.BooleanField(blank=True, null=True)
    cancel_reason = models.TextField(blank=True, null=True)
    cause = models.TextField(blank=True, null=True)
    close_date = models.DateTimeField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    complaints = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    correction = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_close = models.DateTimeField(blank=True, null=True)
    date_open = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    done_approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    due_date = models.DateTimeField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    invoice_no = models.CharField(max_length=256, blank=True, null=True)
    is_duplicate = models.BooleanField(blank=True, null=True)
    late_response_code = models.ForeignKey('ReasonCode', models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    multi_visit_code = models.ForeignKey('ReasonCode', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    next_job = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(unique=True, max_length=256)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    quotation = models.ForeignKey('SaleQuot', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    service_type = models.ForeignKey('ServiceType', models.DO_NOTHING, blank=True, null=True)
    skill_level = models.ForeignKey('SkillLevel', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    template = models.ForeignKey('JobTemplate', models.DO_NOTHING, blank=True, null=True)
    time_start = models.DateTimeField(blank=True, null=True)
    time_stop = models.DateTimeField(blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    total_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_sell = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    include_mtbf_mttr = models.BooleanField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    is_rsv = models.BooleanField(blank=True, null=True)
    is_invoice = models.BooleanField(blank=True, null=True)
    is_request = models.BooleanField(blank=True, null=True)
    is_reserve = models.CharField(max_length=64, blank=True, null=True)
    team = models.ForeignKey('ServiceTeam', models.DO_NOTHING, blank=True, null=True)
    is_receive = models.CharField(max_length=64, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_return = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_rsv = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    sr_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    track_cost_show = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    project_type = models.ForeignKey('ProjectType', models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    chassis = models.CharField(max_length=256, blank=True, null=True)
    showroom = models.ForeignKey('ShowroomRecord', models.DO_NOTHING, blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    is_showroom = models.BooleanField(blank=True, null=True)
    is_insentive = models.BooleanField(blank=True, null=True)
    type = models.CharField(max_length=64)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    shipping_address = models.CharField(max_length=256, blank=True, null=True)
    is_done = models.BooleanField(blank=True, null=True)
    is_incentive = models.BooleanField(blank=True, null=True)
    is_warranty = models.BooleanField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    est_cost_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_cost_amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_template = models.ForeignKey('JobEstTemplate', models.DO_NOTHING, blank=True, null=True)
    ref = models.TextField(blank=True, null=True)
    allocated_date = models.DateTimeField(blank=True, null=True)
    allocated = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    done = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    in_progress_date = models.DateTimeField(blank=True, null=True)
    in_progress = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    planned_date = models.DateTimeField(blank=True, null=True)
    planned = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job'


class JobCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_cost'


class JobCostLine(models.Model):
    cost_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expense_type = models.CharField(max_length=64, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    unit_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_cost_line'


class JobEstCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_est_cost'


class JobEstCostLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expenses_type = models.CharField(max_length=64, blank=True, null=True)
    job_est = models.ForeignKey(JobEstCost, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    unit_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    expense_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_est_cost_line'


class JobEstTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_est_template'


class JobEstTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expense_type = models.CharField(max_length=64, blank=True, null=True)
    job_est = models.ForeignKey(JobEstTemplate, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    unit_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_est_template_line'


class JobIncentive(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_per_unit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    alloc_incentive = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    technician_type = models.CharField(max_length=64, blank=True, null=True)
    incentive = models.CharField(max_length=64, blank=True, null=True)
    resource_ids = models.TextField(blank=True, null=True)
    team = models.ForeignKey('ServiceTeam', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_incentive'


class JobIncentiveLine(models.Model):
    alloc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    incentive = models.ForeignKey(JobIncentive, models.DO_NOTHING)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey('ServiceTeam', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_incentive_line'


class JobInsentive(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_insentive'


class JobItem(models.Model):
    counter = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    fault_code = models.ForeignKey(FaultCode, models.DO_NOTHING, blank=True, null=True)
    fault_reason = models.ForeignKey('ReasonCode', models.DO_NOTHING, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_item'


class JobLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    payment_type = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    receive_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rel_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    rel_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rel_unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rel_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    film_setting = models.CharField(max_length=64, blank=True, null=True)
    job_state = models.CharField(max_length=64, blank=True, null=True)
    sale_line = models.ForeignKey('SaleOrderLine', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_line'


class JobLineFilmSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job_line = models.ForeignKey(JobLine, models.DO_NOTHING)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_line_film_setting'


class JobPart(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty_planned = models.DecimalField(max_digits=16, decimal_places=2)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_part'


class JobPartTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job_template = models.ForeignKey('JobTemplate', models.DO_NOTHING)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_part_template'


class JobQuotCondition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_condition'


class JobQuotConditionLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotCondition, models.DO_NOTHING)
    min = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_condition_line'


class JobQuotConditionLineFail(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotCondition, models.DO_NOTHING)
    min = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_condition_line_fail'


class JobQuotConditionLineProduct(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotCondition, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_condition_line_product'


class JobQuotLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    setting_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    is_sp = models.BooleanField(blank=True, null=True)
    sp_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_line'


class JobQuotLineCar(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='type_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    brand = models.ForeignKey(CarBrand, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_line_car'


class JobQuotLinePosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_line_position'


class JobQuotLinePositionSpecial(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_line_position_special'


class JobQuotPromotion(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_promotion'


class JobQuotPromotionLine(models.Model):
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotPromotion, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_get = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_promotion_line'


class JobQuotPromotionPosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(JobQuotPromotion, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_quot_promotion_position'


class JobReceive(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    job = models.ForeignKey(Job, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_receive'


class JobReceiveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    receive = models.ForeignKey(JobReceive, models.DO_NOTHING)
    request_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    rel_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    rsv_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    job_line_ids = models.TextField(blank=True, null=True)
    return_qty = models.DecimalField(max_digits=16, decimal_places=6)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_receive_line'


class JobRequest(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    job = models.ForeignKey(Job, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_request'


class JobRequestLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    request = models.ForeignKey(JobRequest, models.DO_NOTHING)
    request_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    rsv_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    rel_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    job_line_ids = models.TextField(blank=True, null=True)
    default_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_request_line'


class JobReserve(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    job = models.ForeignKey(Job, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_reserve'


class JobReserveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    reserve_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    rsv = models.ForeignKey(JobReserve, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    rel_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    job_line_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_reserve_line'


class JobStockLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    job_line = models.ForeignKey(JobLine, models.DO_NOTHING, blank=True, null=True)
    job_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    receive_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    request_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    reserve_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    return_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    rel_product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    job_line_ids = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_stock_line'


class JobTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    period_type = models.CharField(max_length=64, blank=True, null=True)
    period_value = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    service_type = models.ForeignKey('ServiceType', models.DO_NOTHING, blank=True, null=True)
    skill_level = models.ForeignKey('SkillLevel', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    running_interval = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_template'


class JobTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'job_template_line'


class JournalEntryDisplay(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'journal_entry_display'


class LaminaAllApprove(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lamina_all_approve'


class LandedCost(models.Model):
    alloc_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    alloc_cost_type = models.CharField(max_length=64, blank=True, null=True)
    alloc_type = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    cost_alloc_method = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    reverse_move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    cost_type = models.CharField(max_length=64, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    show_all = models.BooleanField(blank=True, null=True)
    est_before = models.BooleanField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reverse_date = models.DateTimeField(blank=True, null=True)
    reverse = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'landed_cost'


class LandedCostAlloc(models.Model):
    act_duty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    act_ship = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    est_duty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    est_ship = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    landed = models.ForeignKey(LandedCost, models.DO_NOTHING)
    move = models.ForeignKey('StockMove', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    remain_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_price_gr = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    cost_price_lc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_price_variance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'landed_cost_alloc'


class LandedCostLines(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_name = models.ForeignKey(CostName, models.DO_NOTHING, db_column='cost_name', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    landed_cost = models.ForeignKey(LandedCost, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'landed_cost_lines'


class Language(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'language'


class LeaderSaleCom(models.Model):
    actual_com = models.ForeignKey(ActualSumCom, models.DO_NOTHING, blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    leader_team = models.ForeignKey('SaleTeamTerritory', models.DO_NOTHING)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    type_com = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'leader_sale_com'


class LeaderSaleComDataLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(LeaderSaleCom, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sale_com = models.ForeignKey('SaleCom', models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'leader_sale_com_data_line'


class LeaderSaleComLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(LeaderSaleCom, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'leader_sale_com_line'


class LmAdjustment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'lm_adjustment'


class LmAdjustmentLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    description_0 = models.ForeignKey(LmAdjustment, models.DO_NOTHING, db_column='description_id', blank=True, null=True)  # Field renamed because of name conflict.
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_adjustment_line'


class LmBank(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_bank'


class LmBarcodeTransfer(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_claim = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    temp = models.ForeignKey('QcTemplate', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    gen_barcode = models.CharField(max_length=64, blank=True, null=True)
    location_cr = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_cn = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    validate_date = models.DateTimeField()
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    process_run = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_barcode_transfer'


class LmBarcodeTransferLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(LmBarcodeTransfer, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    barcode = models.ForeignKey(LmBarcodeTransfer, models.DO_NOTHING)
    qc_remark = models.TextField(blank=True, null=True)
    avb_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incom_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incom_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_barcode_transfer_line'


class LmChequeBook(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    bank = models.ForeignKey(Bank, models.DO_NOTHING)
    branch = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    bank_account_number = models.CharField(max_length=256, blank=True, null=True)
    bank_book_name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_cheque_book'


class LmChequeBookLine(models.Model):
    cheque_book = models.CharField(max_length=256, blank=True, null=True)
    cheque_book_0 = models.ForeignKey(LmChequeBook, models.DO_NOTHING, db_column='cheque_book_id')  # Field renamed because of name conflict.
    cheque_number = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    total_qty = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    next = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_cheque_book_line'


class LmChequeDetail(models.Model):
    bank_account_number = models.CharField(max_length=256, blank=True, null=True)
    bank_book_name = models.CharField(max_length=256, blank=True, null=True)
    bank_branch = models.CharField(max_length=256, blank=True, null=True)
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    depositor = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    tax_id = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_cheque_detail'


class LmGenJvEarn(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_gen_jv_earn'


class LmGenJvEarnLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(LmGenJvEarn, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_gen_jv_earn_line'


class LmReconcileStatement(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_reconcile_statement'


class LmReconcileStatementLine(models.Model):
    click_move = models.CharField(max_length=10000, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(LmReconcileStatement, models.DO_NOTHING)
    received = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    spent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    statement_line = models.ForeignKey(AccountStatementLine, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    total_move_line = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_reconcile_statement_line'


class LmReconcileStatementMoveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    order_line = models.ForeignKey(LmReconcileStatementLine, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_reconcile_statement_move_line'


class LmReportAgedReceivablesBill(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_report_aged_receivables_bill'


class LmReportArDetailsBill(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_report_ar_details_bill'


class LmReportBudget(models.Model):
    budget_period = models.ForeignKey(AccountBudgetPeriod, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    select_budget_item = models.BooleanField(blank=True, null=True)
    show_actual = models.BooleanField(blank=True, null=True)
    show_budget = models.BooleanField(blank=True, null=True)
    show_variance = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    compare_periods = models.CharField(max_length=64, blank=True, null=True)
    compare_with = models.CharField(max_length=64, blank=True, null=True)
    hide_detail = models.CharField(max_length=64, blank=True, null=True)
    show_variance_per = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_report_budget'


class LmTaxClaim(models.Model):
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_tax_claim'


class LmTaxClaimLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    doc_number = models.CharField(max_length=256, blank=True, null=True)
    new_jv_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(LmTaxClaim, models.DO_NOTHING)
    parent = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_tax_claim_line'


class LmTaxUnclaim(models.Model):
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_tax_unclaim'


class LmTaxUnclaimLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    doc_number = models.CharField(max_length=256, blank=True, null=True)
    new_jv_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(LmTaxUnclaim, models.DO_NOTHING)
    parent = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_tax_unclaim_line'


class LmWizardReconcileStatement(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount_receive_from = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_receive_to = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_spent_from = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_spent_to = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    start_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_date = models.BooleanField(blank=True, null=True)
    is_receive = models.BooleanField(blank=True, null=True)
    is_spent = models.BooleanField(blank=True, null=True)
    reconcile_statement = models.ForeignKey(LmReconcileStatement, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_wizard_reconcile_statement'


class LmWizardReconcileStatementLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    order = models.ForeignKey(LmWizardReconcileStatement, models.DO_NOTHING)
    received = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    spent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    statement_line = models.ForeignKey(AccountStatementLine, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_wizard_reconcile_statement_line'


class LmWizardSuppVatOverSixMonth(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_ids = models.TextField(blank=True, null=True)
    text = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    tax_claim = models.ForeignKey(LmTaxClaim, models.DO_NOTHING, blank=True, null=True)
    tax_comp_ids = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=256, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_wizard_supp_vat_over_six_month'


class LmWizardSuppVatOverSixMonthLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    inv_line = models.ForeignKey(AccountInvoiceLine, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(LmWizardSuppVatOverSixMonth, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    debit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tc_line = models.ForeignKey(LmTaxClaimLine, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    pay_line = models.ForeignKey(AccountPaymentLine, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lm_wizard_supp_vat_over_six_month_line'


class LockDate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.CharField(max_length=256)

    class Meta:
        managed = False
        db_table = 'lock_date'


class LockDateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    history = models.TextField(blank=True, null=True)
    lock = models.ForeignKey(LockDate, models.DO_NOTHING, blank=True, null=True)
    status = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    month = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lock_date_line'


class Log(models.Model):
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    details = models.TextField(blank=True, null=True)
    ip_addr = models.CharField(max_length=256, blank=True, null=True)
    message = models.TextField()
    related_id = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'log'


class Login(models.Model):
    company_logo = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    db_name = models.CharField(max_length=64)
    login = models.CharField(max_length=256)
    password = models.CharField(max_length=256)
    show_dbs = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    version = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'login'


class M2MAccountBillPaymentAddBill(models.Model):
    payment_add_bill = models.ForeignKey('PaymentAddBill', models.DO_NOTHING)
    account_bill = models.ForeignKey(AccountBill, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_bill_payment_add_bill'


class M2MAccountBudgetItemLmReportBudget(models.Model):
    lm_report_budget = models.ForeignKey(LmReportBudget, models.DO_NOTHING)
    account_budget_item = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_budget_item_lm_report_budget'


class M2MAccountChequeChequeMoveAddCheque(models.Model):
    cheque_move_add_cheque = models.ForeignKey(ChequeMoveAddCheque, models.DO_NOTHING)
    account_cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_cheque_cheque_move_add_cheque'


class M2MAccountFixedAssetFixedAssetDisposesMove(models.Model):
    fixed_asset_disposes_move = models.ForeignKey(FixedAssetDisposesMove, models.DO_NOTHING)
    account_fixed_asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_fixed_asset_fixed_asset_disposes_move'


class M2MAccountFixedAssetFixedAssetSellsMove(models.Model):
    fixed_asset_sells_move = models.ForeignKey(FixedAssetSellsMove, models.DO_NOTHING)
    account_fixed_asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_fixed_asset_fixed_asset_sells_move'


class M2MAccountInvoiceBillAddInvoice(models.Model):
    bill_add_invoice = models.ForeignKey(BillAddInvoice, models.DO_NOTHING)
    account_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_invoice_bill_add_invoice'


class M2MAccountInvoicePaymentAddInvoice(models.Model):
    payment_add_invoice = models.ForeignKey('PaymentAddInvoice', models.DO_NOTHING)
    account_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_invoice_payment_add_invoice'


class M2MAccountMoveLineAccountStatementLine(models.Model):
    account_move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING)
    account_statement_line = models.ForeignKey(AccountStatementLine, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_move_line_account_statement_line'


class M2MAccountPaymentSaleReserve(models.Model):
    sale_reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING)
    account_payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_account_payment_sale_reserve'


class M2MAddCouponWarrantySaleCoupon(models.Model):
    add_coupon_warranty = models.ForeignKey(AddCouponWarranty, models.DO_NOTHING)
    sale_coupon = models.ForeignKey('SaleCoupon', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_add_coupon_warranty_sale_coupon'


class M2MAddressContact(models.Model):
    address = models.ForeignKey(Address, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_address_contact'


class M2MAddressShipMethod(models.Model):
    address = models.ForeignKey(Address, models.DO_NOTHING)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_address_ship_method'


class M2MBarcodeSafeOutProductionOrder(models.Model):
    barcode_safe_out = models.ForeignKey(BarcodeSafeOut, models.DO_NOTHING)
    production_order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_barcode_safe_out_production_order'


class M2MBarcodeSafeOutStockContainer(models.Model):
    barcode_safe_out = models.ForeignKey(BarcodeSafeOut, models.DO_NOTHING)
    stock_container = models.ForeignKey('StockContainer', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_barcode_safe_out_stock_container'


class M2MBaseUserUserGroup(models.Model):
    user_group = models.ForeignKey('UserGroup', models.DO_NOTHING)
    base_user = models.ForeignKey(BaseUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_base_user_user_group'


class M2MBomQcTest(models.Model):
    bom = models.ForeignKey(Bom, models.DO_NOTHING)
    qc_test = models.ForeignKey('QcTest', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_bom_qc_test'


class M2MBudgetSelectionLmReportBudget(models.Model):
    lm_report_budget = models.ForeignKey(LmReportBudget, models.DO_NOTHING)
    budget_selection = models.ForeignKey(BudgetSelection, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_budget_selection_lm_report_budget'


class M2MCarBrandCarType(models.Model):
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_car_brand_car_type'


class M2MCarBrandSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_car_brand_sale_promotion'


class M2MCarModelSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_car_model_sale_promotion'


class M2MCarTypeSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_car_type_sale_promotion'


class M2MComReportAccountReceivableLineProductBrand(models.Model):
    com_report_account_receivable_line = models.ForeignKey(ComReportAccountReceivableLine, models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_com_report_account_receivable_line_product_brand'


class M2MComReportAccountReceivableLineProductCateg(models.Model):
    com_report_account_receivable_line = models.ForeignKey(ComReportAccountReceivableLine, models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_com_report_account_receivable_line_product_categ'


class M2MComReportAccountReceivableLineProductGroup(models.Model):
    com_report_account_receivable_line = models.ForeignKey(ComReportAccountReceivableLine, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_com_report_account_receivable_line_product_group'


class M2MCommissionConditionContact(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_contact'


class M2MCommissionConditionHrEmployee(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    hr_employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_hr_employee'


class M2MCommissionConditionInvProductBrand(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_inv_product_brand'


class M2MCommissionConditionInvProductCateg(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_inv_product_categ'


class M2MCommissionConditionInvProductGroup(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_inv_product_group'


class M2MCommissionConditionProduct(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_product'


class M2MCommissionConditionProductBrand(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_product_brand'


class M2MCommissionConditionProductCateg(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_product_categ'


class M2MCommissionConditionProductGroup(models.Model):
    commission_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_condition_product_group'


class M2MCommissionTargetProductGroup(models.Model):
    commission_target = models.ForeignKey(CommissionTarget, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_commission_target_product_group'


class M2MCompanyContact(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_company_contact'


class M2MCompanyPriceList(models.Model):
    price_list = models.ForeignKey('PriceList', models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_company_price_list'


class M2MCompanyPriceListItem(models.Model):
    price_list_item = models.ForeignKey('PriceListItem', models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_company_price_list_item'


class M2MCompanyProductCateg(models.Model):
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_company_product_categ'


class M2MContactCategRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    contact_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_categ_request_promotion'


class M2MContactCategSaleCouponMaster(models.Model):
    sale_coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    contact_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_categ_sale_coupon_master'


class M2MContactCategSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_categ_sale_promotion'


class M2MContactChild(models.Model):
    contact1 = models.ForeignKey(Contact, models.DO_NOTHING, db_column='contact1')
    contact2 = models.ForeignKey(Contact, models.DO_NOTHING, db_column='contact2')

    class Meta:
        managed = False
        db_table = 'm2m_contact_child'


class M2MContactContactGroup(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_contact_group'


class M2MContactDelivery(models.Model):
    customer = models.ForeignKey(Contact, models.DO_NOTHING)
    delivery = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_delivery'


class M2MContactExcludeProductGroups(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_exclude_product_groups'


class M2MContactGroupRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_group_request_promotion'


class M2MContactGroupRequestPromotionPeriod(models.Model):
    request_promotion_period = models.ForeignKey('RequestPromotionPeriod', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_group_request_promotion_period'


class M2MContactGroupSaleCouponMaster(models.Model):
    sale_coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_group_sale_coupon_master'


class M2MContactGroupSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_group_sale_promotion'


class M2MContactGroupWarranty(models.Model):
    warranty = models.ForeignKey('Warranty', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_group_warranty'


class M2MContactJobQuotPromotion(models.Model):
    job_quot_promotion = models.ForeignKey(JobQuotPromotion, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_job_quot_promotion'


class M2MContactJobTemplate(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_job_template'


class M2MContactRequestProductGroups(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_request_product_groups'


class M2MContactRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_request_promotion'


class M2MContactSalePromotion(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_sale_promotion'


class M2MContactShipMethod(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_ship_method'


class M2MContactWarranty(models.Model):
    warranty = models.ForeignKey('Warranty', models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_contact_warranty'


class M2MDepartmentUser(models.Model):
    department = models.ForeignKey(BaseUser, models.DO_NOTHING)
    user = models.ForeignKey(HrDepartment, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_department_user'


class M2MEcomCartSalePromotion(models.Model):
    ecom_cart = models.ForeignKey(EcomCart, models.DO_NOTHING)
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_ecom_cart_sale_promotion'


class M2MEventPromotions(models.Model):
    event = models.ForeignKey('SaleEvent', models.DO_NOTHING)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_event_promotions'


class M2MHiddenProfile(models.Model):
    hidden = models.ForeignKey(Hidden, models.DO_NOTHING)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_hidden_profile'


class M2MHrEmployeeHrLeaveType(models.Model):
    hr_employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    hr_leave_type = models.ForeignKey(HrLeaveType, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_hr_employee_hr_leave_type'


class M2MHrEmployeeReportCompareTarget(models.Model):
    report_compare_target = models.ForeignKey('ReportCompareTarget', models.DO_NOTHING)
    hr_employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_hr_employee_report_compare_target'


class M2MHrEmployeeRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    hr_employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_hr_employee_request_promotion'


class M2MHrPayitemHrPayitemProfile(models.Model):
    hr_payitem_profile = models.ForeignKey(HrPayitemProfile, models.DO_NOTHING)
    hr_payitem = models.ForeignKey(HrPayitem, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_hr_payitem_hr_payitem_profile'


class M2MJobQuotExcludeProduct(models.Model):
    job_quot_line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_job_quot_exclude_product'


class M2MJobQuotLineProduct(models.Model):
    job_quot_line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_job_quot_line_product'


class M2MJobQuotLineProductGroup(models.Model):
    job_quot_line = models.ForeignKey(JobQuotLine, models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_job_quot_line_product_group'


class M2MJobServiceItem(models.Model):
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING)
    job = models.ForeignKey(Job, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_job_service_item'


class M2MJobTemplateServiceItem(models.Model):
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_job_template_service_item'


class M2MLandedCostStockPicking(models.Model):
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)
    landed_cost = models.ForeignKey(LandedCost, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_landed_cost_stock_picking'


class M2MMessengerStockPicking(models.Model):
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)
    messenger = models.ForeignKey('Messenger', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_messenger_stock_picking'


class M2MMktCampaignMktTargetList(models.Model):
    mkt_campaign = models.ForeignKey('MktCampaign', models.DO_NOTHING)
    mkt_target_list = models.ForeignKey('MktTargetList', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_mkt_campaign_mkt_target_list'


class M2MModelProfileAddModel(models.Model):
    profile_add_model = models.ForeignKey('ProfileAddModel', models.DO_NOTHING)
    model = models.ForeignKey('Model', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_model_profile_add_model'


class M2MModelSettings(models.Model):
    settings = models.ForeignKey('Settings', models.DO_NOTHING)
    model = models.ForeignKey('Model', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_model_settings'


class M2MPaymentMethodProduct(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    payment_method = models.ForeignKey('PaymentMethod', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_payment_method_product'


class M2MPermissionProfile(models.Model):
    profile = models.ForeignKey('Profile', models.DO_NOTHING)
    permission = models.ForeignKey('Permission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_permission_profile'


class M2MPermissionProfile2(models.Model):
    profile_id = models.IntegerField(blank=True, null=True)
    permission_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'm2m_permission_profile2'


class M2MPettyCashWizardAddPettyCash(models.Model):
    wizard_add_petty_cash = models.ForeignKey('WizardAddPettyCash', models.DO_NOTHING)
    petty_cash = models.ForeignKey('PettyCash', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_petty_cash_wizard_add_petty_cash'


class M2MPricelistAddProductCateg(models.Model):
    pricelist_add = models.ForeignKey('PricelistAdd', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_pricelist_add_product_categ'


class M2MProductAttributeOptionProductVariantValues(models.Model):
    product_variant_values = models.ForeignKey('ProductVariantValues', models.DO_NOTHING)
    product_attribute_option = models.ForeignKey('ProductAttributeOption', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_attribute_option_product_variant_values'


class M2MProductBorrowStockPicking(models.Model):
    product_borrow = models.ForeignKey('ProductBorrow', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_borrow_stock_picking'


class M2MProductBrandProductBrandGroup(models.Model):
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)
    product_brand_group = models.ForeignKey('ProductBrandGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_brand_product_brand_group'


class M2MProductBrandReportAccountReceivable(models.Model):
    report_account_receivable = models.ForeignKey('ReportAccountReceivable', models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_brand_report_account_receivable'


class M2MProductBrandReportCompareTarget(models.Model):
    report_compare_target = models.ForeignKey('ReportCompareTarget', models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_brand_report_compare_target'


class M2MProductBrandReportSaleTarget(models.Model):
    report_sale_target = models.ForeignKey('ReportSaleTarget', models.DO_NOTHING)
    product_brand = models.ForeignKey('ProductBrand', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_brand_report_sale_target'


class M2MProductCategProjectResource(models.Model):
    project_resource = models.ForeignKey('ProjectResource', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_project_resource'


class M2MProductCategPurchaseOrderLine(models.Model):
    purchase_order_line = models.ForeignKey('PurchaseOrderLine', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_purchase_order_line'


class M2MProductCategPurchaseReturnLine(models.Model):
    purchase_return_line = models.ForeignKey('PurchaseReturnLine', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_purchase_return_line'


class M2MProductCategReportAccountReceivable(models.Model):
    report_account_receivable = models.ForeignKey('ReportAccountReceivable', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_report_account_receivable'


class M2MProductCategReportCompareTarget(models.Model):
    report_compare_target = models.ForeignKey('ReportCompareTarget', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_report_compare_target'


class M2MProductCategReportSaleTarget(models.Model):
    report_sale_target = models.ForeignKey('ReportSaleTarget', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_report_sale_target'


class M2MProductCategSaleOrderLine(models.Model):
    sale_order_line = models.ForeignKey('SaleOrderLine', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_sale_order_line'


class M2MProductCategSaleQuotLine(models.Model):
    sale_quot_line = models.ForeignKey('SaleQuotLine', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_sale_quot_line'


class M2MProductCategSaleReturnLine(models.Model):
    sale_return_line = models.ForeignKey('SaleReturnLine', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_sale_return_line'


class M2MProductCategServiceResource(models.Model):
    service_resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_categ_service_resource'


class M2MProductGroupReportAccountReceivable(models.Model):
    report_account_receivable = models.ForeignKey('ReportAccountReceivable', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_report_account_receivable'


class M2MProductGroupReportCompareTarget(models.Model):
    report_compare_target = models.ForeignKey('ReportCompareTarget', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_report_compare_target'


class M2MProductGroupRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_request_promotion'


class M2MProductGroupRequestPromotionLine(models.Model):
    request_promotion_line = models.ForeignKey('RequestPromotionLine', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_request_promotion_line'


class M2MProductGroupRequestPromotionPeriod(models.Model):
    request_promotion_period = models.ForeignKey('RequestPromotionPeriod', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_request_promotion_period'


class M2MProductGroupSaleComGroupEstLine(models.Model):
    sale_com_group_est_line = models.ForeignKey('SaleComGroupEstLine', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_sale_com_group_est_line'


class M2MProductGroupSaleComGroupLine(models.Model):
    sale_com_group_line = models.ForeignKey('SaleComGroupLine', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_sale_com_group_line'


class M2MProductGroupSaleComTargetLine(models.Model):
    sale_com_target_line = models.ForeignKey('SaleComTargetLine', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_sale_com_target_line'


class M2MProductGroupSaleQuotCarData(models.Model):
    sale_quot_car_data = models.ForeignKey('SaleQuotCarData', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_sale_quot_car_data'


class M2MProductGroupWarranty(models.Model):
    warranty = models.ForeignKey('Warranty', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_group_warranty'


class M2MProductProduct(models.Model):
    product1 = models.ForeignKey('Product', models.DO_NOTHING)
    product2 = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_product'


class M2MProductProductCateg(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    product_categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_product_categ'


class M2MProductProductCustomOption(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    product_custom_option = models.ForeignKey('ProductCustomOption', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_product_custom_option'


class M2MProductProductGroup(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    product_group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_product_group'


class M2MProductReplacement(models.Model):
    product1 = models.ForeignKey('Product', models.DO_NOTHING)
    product2 = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_replacement'


class M2MProductRequestPromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_request_promotion'


class M2MProductRequestPromotionLine(models.Model):
    request_promotion_line = models.ForeignKey('RequestPromotionLine', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_request_promotion_line'


class M2MProductRequestPromotionPeriod(models.Model):
    request_promotion_period = models.ForeignKey('RequestPromotionPeriod', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_request_promotion_period'


class M2MProductSaleChannel(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    sale_channel = models.ForeignKey('SaleChannel', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_sale_channel'


class M2MProductSaleEvent(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    sale_event = models.ForeignKey('SaleEvent', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_sale_event'


class M2MProductSalePromotion(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_sale_promotion'


class M2MProductSaleQuotCarData(models.Model):
    sale_quot_car_data = models.ForeignKey('SaleQuotCarData', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_sale_quot_car_data'


class M2MProductShipMethod(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_ship_method'


class M2MProductTag(models.Model):
    product = models.ForeignKey('Product', models.DO_NOTHING)
    tag = models.ForeignKey('Tag', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_tag'


class M2MProductWarranty(models.Model):
    warranty = models.ForeignKey('Warranty', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_product_warranty'


class M2MProductionOrderProductionPeriod(models.Model):
    production_period = models.ForeignKey('ProductionPeriod', models.DO_NOTHING)
    production_order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_production_order_production_period'


class M2MProductionOrderStockPicking(models.Model):
    production_order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_production_order_stock_picking'


class M2MProductionPlanPurchaseOrder(models.Model):
    production_plan = models.ForeignKey('ProductionPlan', models.DO_NOTHING)
    purchase_order = models.ForeignKey('PurchaseOrder', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_production_plan_purchase_order'


class M2MProductionRawMaterialInspectionPurchaseOrder(models.Model):
    purchase_order = models.ForeignKey('PurchaseOrder', models.DO_NOTHING)
    production_raw_material_inspection = models.ForeignKey('ProductionRawMaterialInspection', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_production_raw_material_inspection_purchase_order'


class M2MProjectProjectResource(models.Model):
    project = models.ForeignKey('Project', models.DO_NOTHING)
    project_resource = models.ForeignKey('ProjectResource', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_project_project_resource'


class M2MProjectResourceProjectTask(models.Model):
    project_task = models.ForeignKey('ProjectTask', models.DO_NOTHING)
    project_resource = models.ForeignKey('ProjectResource', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_project_resource_project_task'


class M2MProjectResourceRegion(models.Model):
    project_resource = models.ForeignKey('ProjectResource', models.DO_NOTHING)
    region = models.ForeignKey('Region', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_project_resource_region'


class M2MProjectServiceResource(models.Model):
    project = models.ForeignKey('Project', models.DO_NOTHING)
    service_resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_project_service_resource'


class M2MProjectTaskServiceResource(models.Model):
    project_task = models.ForeignKey('ProjectTask', models.DO_NOTHING)
    service_resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_project_task_service_resource'


class M2MPromotionBuyGroups(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_buy_groups'


class M2MPromotionBuyProducts(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_buy_products'


class M2MPromotionContact(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_contact'


class M2MPromotionContactShowroom(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_contact_showroom'


class M2MPromotionContactTns(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_contact_tns'


class M2MPromotionDiscountGroups(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_discount_groups'


class M2MPromotionDiscountProducts(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_discount_products'


class M2MPromotionExcludeProductGroups(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_exclude_product_groups'


class M2MPromotionProducts(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_products'


class M2MPromotionRelatedGroups(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    group = models.ForeignKey('ProductGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_related_groups'


class M2MPromotionRelatedProducts(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_related_products'


class M2MPromotionShopGroup(models.Model):
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    contact_group = models.ForeignKey(ContactGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_promotion_shop_group'


class M2MProvinceReportClearTrip(models.Model):
    report_clear_trip = models.ForeignKey('ReportClearTrip', models.DO_NOTHING)
    province = models.ForeignKey('Province', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_province_report_clear_trip'


class M2MPurchaseOrderStockPicking(models.Model):
    purchase_order = models.ForeignKey('PurchaseOrder', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_purchase_order_stock_picking'


class M2MPurchaseReturnStockPicking(models.Model):
    purchase_return = models.ForeignKey('PurchaseReturn', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_purchase_return_stock_picking'


class M2MRegionReportClearTrip(models.Model):
    report_clear_trip = models.ForeignKey('ReportClearTrip', models.DO_NOTHING)
    region = models.ForeignKey('Region', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_region_report_clear_trip'


class M2MRegionServiceResource(models.Model):
    service_resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)
    region = models.ForeignKey('Region', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_region_service_resource'


class M2MRequestPromotionSaleArea(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    sale_area = models.ForeignKey('SaleArea', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_request_promotion_sale_area'


class M2MRequestPromotionSalePromotion(models.Model):
    request_promotion = models.ForeignKey('RequestPromotion', models.DO_NOTHING)
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_request_promotion_sale_promotion'


class M2MSaleOrderStockPicking(models.Model):
    sale_order = models.ForeignKey('SaleOrder', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_sale_order_stock_picking'


class M2MSalePromotionTypeToUse(models.Model):
    sale_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    type_to_use = models.ForeignKey('TypeToUse', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_sale_promotion_type_to_use'


class M2MSaleQuotExcludeProduct(models.Model):
    sale_quot_car_data = models.ForeignKey('SaleQuotCarData', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_sale_quot_exclude_product'


class M2MSaleReturnStockPicking(models.Model):
    sale_return = models.ForeignKey('SaleReturn', models.DO_NOTHING)
    stock_picking = models.ForeignKey('StockPicking', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_sale_return_stock_picking'


class M2MServiceResourceTask(models.Model):
    task_id = models.IntegerField()
    service_resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_service_resource_task'


class M2MSettingsHideModel(models.Model):
    settings = models.ForeignKey('Settings', models.DO_NOTHING)
    model = models.ForeignKey('Model', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_settings_hide_model'


class M2MShareExclProfile(models.Model):
    share = models.ForeignKey('ShareAccess', models.DO_NOTHING)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_share_excl_profile'


class M2MShareProfile(models.Model):
    share = models.ForeignKey('ShareAccess', models.DO_NOTHING)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_share_profile'


class M2MShipMethodExclude(models.Model):
    method1 = models.ForeignKey('ShipMethod', models.DO_NOTHING)
    method2 = models.ForeignKey('ShipMethod', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_ship_method_exclude'


class M2MWizardAddCreditCreditCard(models.Model):
    wizard = models.ForeignKey(CreditMoveAddCredit, models.DO_NOTHING)
    credit_card = models.ForeignKey(AccountCreditCard, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'm2m_wizard_add_credit_credit_card'


class Maintenance(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_done = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'maintenance'


class MaintenanceContactLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    main = models.ForeignKey(Maintenance, models.DO_NOTHING)
    note = models.CharField(max_length=256, blank=True, null=True)
    st_contact = models.ForeignKey(ContactSettings, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    next_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'maintenance_contact_line'


class MaintenanceIntervalLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    interval = models.ForeignKey(IntervalSettings, models.DO_NOTHING, blank=True, null=True)
    main = models.ForeignKey(Maintenance, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'maintenance_interval_line'


class MatchField(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    file_import = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=256)
    next = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'match_field'


class MatchFieldLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer_field = models.CharField(max_length=256, blank=True, null=True)
    field = models.ForeignKey(ImportField, models.DO_NOTHING, blank=True, null=True)
    match = models.ForeignKey(MatchField, models.DO_NOTHING)
    simple_value = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'match_field_line'


class MatchFieldLog(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    match = models.ForeignKey(MatchField, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'match_field_log'


class MenuAccess(models.Model):
    access = models.CharField(max_length=64, blank=True, null=True)
    action = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    menu = models.CharField(max_length=256, blank=True, null=True)
    profile = models.ForeignKey('Profile', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_access'


class MenuAccess2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    access = models.CharField(max_length=64, blank=True, null=True)
    action = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    menu = models.CharField(max_length=256, blank=True, null=True)
    profile_id = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_access2'


class Message(models.Model):
    attach = models.CharField(max_length=256, blank=True, null=True)
    body = models.TextField()
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    from_field = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='from_id')  # Field renamed because it was a Python reserved word.
    ref_uuid = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    subject = models.CharField(max_length=256, blank=True, null=True)
    to = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    opened_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    opened_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'message'


class MessageTmpl(models.Model):
    body = models.TextField()
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    from_user = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    subject = models.CharField(max_length=256)
    to_user = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'message_tmpl'


class Messenger(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'messenger'


class MfgTeam(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mfg_team'


class MktCampaign(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    email_tmpl = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    limit_day = models.IntegerField(blank=True, null=True)
    limit_hour = models.IntegerField(blank=True, null=True)
    mailbox = models.ForeignKey(EmailMailbox, models.DO_NOTHING, blank=True, null=True)
    min_target_life = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mkt_campaign'


class MktTarget(models.Model):
    birthday = models.DateField(blank=True, null=True)
    city = models.CharField(max_length=256, blank=True, null=True)
    company = models.CharField(max_length=256, blank=True, null=True)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    email = models.CharField(max_length=256, blank=True, null=True)
    email_error = models.TextField(blank=True, null=True)
    email_status = models.CharField(max_length=64, blank=True, null=True)
    fax = models.CharField(max_length=256, blank=True, null=True)
    first_name = models.CharField(max_length=256, blank=True, null=True)
    last_name = models.CharField(max_length=256, blank=True, null=True)
    list = models.ForeignKey('MktTargetList', models.DO_NOTHING)
    mobile = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    street = models.CharField(max_length=256, blank=True, null=True)
    website = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    zip = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mkt_target'


class MktTargetList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mkt_target_list'


class Model(models.Model):
    code = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    module = models.ForeignKey('Module', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    offline = models.BooleanField(blank=True, null=True)
    order = models.CharField(max_length=256, blank=True, null=True)
    string = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'model'


class ModelDetail(models.Model):
    chassis = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'model_detail'


class Module(models.Model):
    author = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    version = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'module'


class MrpOperation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    hours = models.DecimalField(max_digits=16, decimal_places=2)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mrp_operation'


class NameTitle(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_individual = models.BooleanField(blank=True, null=True)
    is_organization = models.BooleanField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'name_title'


class NumChildLine(models.Model):
    child_identity_card_no = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    tax_profile = models.ForeignKey(HrTaxProfile, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'num_child_line'


class OnlineService(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'online_service'


class OpportCompet(models.Model):
    compet = models.ForeignKey(Competitor, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    opport = models.ForeignKey('SaleOpportunity', models.DO_NOTHING, blank=True, null=True)
    strengths = models.TextField(blank=True, null=True)
    weaknesses = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'opport_compet'


class OrderRawMaterial(models.Model):
    bom = models.ForeignKey(Bom, models.DO_NOTHING, blank=True, null=True)
    confirm_orders = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    production_plan = models.ForeignKey('ProductionPlan', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'order_raw_material'


class OrderRawMaterialLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    order = models.ForeignKey(OrderRawMaterial, models.DO_NOTHING)
    original_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'order_raw_material_line'


class OriginalInvoiceLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING)
    original_invoice_relate = models.ForeignKey(AccountInvoice, models.DO_NOTHING, db_column='original_invoice_relate', blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    original_invoice_keyin = models.CharField(max_length=256, blank=True, null=True)
    total_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    original_invoice_keyin_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'original_invoice_line'


class Package(models.Model):
    activate_code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    from_package = models.CharField(max_length=256, blank=True, null=True)
    host = models.CharField(max_length=64, blank=True, null=True)
    to_package = models.CharField(max_length=64, blank=True, null=True)
    trial = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'package'


class PackageLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    limit = models.CharField(max_length=256, blank=True, null=True)
    max = models.IntegerField(blank=True, null=True)
    package = models.ForeignKey(Package, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    used = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'package_line'


class PaymentAddBill(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'payment_add_bill'


class PaymentAddInvoice(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'payment_add_invoice'


class PaymentMethod(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    paypal_password = models.CharField(max_length=256, blank=True, null=True)
    paypal_signature = models.CharField(max_length=256, blank=True, null=True)
    paypal_url = models.CharField(max_length=64, blank=True, null=True)
    paypal_user = models.CharField(max_length=256, blank=True, null=True)
    paysbuy_id = models.CharField(max_length=256, blank=True, null=True)
    paysbuy_resp_back_url = models.CharField(max_length=256, blank=True, null=True)
    paysbuy_securecode = models.CharField(max_length=256, blank=True, null=True)
    paysbuy_url = models.CharField(max_length=64, blank=True, null=True)
    paysbuy_username = models.CharField(max_length=256, blank=True, null=True)
    scb_mid = models.CharField(max_length=256, blank=True, null=True)
    scb_terminal = models.CharField(max_length=256, blank=True, null=True)
    scb_url = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'payment_method'


class PaymentTerms(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    days = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'payment_terms'


class Permission(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'permission'


class PettyCash(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_bal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    analytic_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cash_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    fund = models.ForeignKey('PettyCashFund', models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    number_payment = models.ForeignKey('self', models.DO_NOTHING, db_column='number_payment', blank=True, null=True)
    number_receive = models.ForeignKey('self', models.DO_NOTHING, db_column='number_receive', blank=True, null=True)
    receive_type = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    cash_account_currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    account_type = models.CharField(max_length=256, blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    posted_date = models.DateTimeField(blank=True, null=True)
    posted = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    acc_approve_date = models.DateTimeField(blank=True, null=True)
    acc_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    department_ids = models.TextField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    diff_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    approve_relate = models.TextField(blank=True, null=True)
    wht_tax_no = models.CharField(max_length=256, blank=True, null=True)
    wht_tax_no_backup = models.TextField(blank=True, null=True)
    back_acc_approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    back_acc_approve_date = models.DateTimeField(blank=True, null=True)
    back_acc_review_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    back_acc_review_date = models.DateTimeField(blank=True, null=True)
    back_approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    back_approve_date = models.DateTimeField(blank=True, null=True)
    review_date = models.DateTimeField(blank=True, null=True)
    review = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    address_text = models.TextField(blank=True, null=True)
    employee_name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'petty_cash'


class PettyCashFund(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    code = models.CharField(max_length=256)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2)
    name = models.CharField(max_length=256)
    number_receive = models.ForeignKey(PettyCash, models.DO_NOTHING, db_column='number_receive', blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    paid_max = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'petty_cash_fund'


class PettyCashLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    base_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    petty_cash = models.ForeignKey(PettyCash, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_invoice = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_line = models.ForeignKey(AccountBudgetLine, models.DO_NOTHING, blank=True, null=True)
    budget_item_line = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'petty_cash_line'


class PettyCashStatement(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    petty_cash_fund = models.ForeignKey(PettyCashFund, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'petty_cash_statement'


class PettyCashTax(models.Model):
    base_amount = models.DecimalField(max_digits=16, decimal_places=2)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    petty_cash = models.ForeignKey(PettyCash, models.DO_NOTHING)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    petty_cash_line = models.ForeignKey(PettyCashLine, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'petty_cash_tax'


class PickValidate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    validation_date = models.DateTimeField(blank=True, null=True)
    date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'pick_validate'


class PickValidateLine(models.Model):
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    validate = models.ForeignKey(PickValidate, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pick_validate_line'


class PickingInvoiceLog(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    message = models.CharField(max_length=256, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'picking_invoice_log'


class PmQuotation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    min_counter = models.IntegerField(blank=True, null=True)
    visit = models.CharField(max_length=64, blank=True, null=True)
    min_est_counter = models.IntegerField(blank=True, null=True)
    visit_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pm_quotation'


class PmQuotationLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    est_counter = models.IntegerField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    last_counter = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    last_service_date = models.DateField(blank=True, null=True)
    pm_quot = models.ForeignKey(PmQuotation, models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create = models.BooleanField(blank=True, null=True)
    last_quotation_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pm_quotation_line'


class Portal(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'portal'


class PortalSettings(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'portal_settings'


class PosRegister(models.Model):
    ask_note = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    print_note_receipt = models.BooleanField(blank=True, null=True)
    print_receipt = models.BooleanField(blank=True, null=True)
    shop = models.ForeignKey('PosShop', models.DO_NOTHING)
    show_discount = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pos_register'


class PosSettings(models.Model):
    cash_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pos_theme = models.CharField(max_length=64, blank=True, null=True)
    sale_ref = models.CharField(max_length=50, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pos_settings'


class PosShop(models.Model):
    cash_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    categ = models.ForeignKey('ProductCateg', models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    disc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pos_shop'


class PostalCode(models.Model):
    code = models.CharField(max_length=256)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey('Province', models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'postal_code'


class PrToPo(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    po_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    po_supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    supplier_type = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    filter_seq = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pr_to_po'


class PrToPoLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    pr = models.ForeignKey('PurchaseRequest', models.DO_NOTHING)
    pr_line = models.ForeignKey('PurchaseRequestLine', models.DO_NOTHING)
    product = models.ForeignKey('Product', models.DO_NOTHING, blank=True, null=True)
    prpo = models.ForeignKey(PrToPo, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pr_to_po_line'


class PriceList(models.Model):
    base_price = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField(blank=True, null=True)
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    name = models.CharField(max_length=256)
    other_pricelist = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    rounding = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rounding_method = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'price_list'


class PriceListItem(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_text = models.CharField(max_length=256, blank=True, null=True)
    list = models.ForeignKey(PriceList, models.DO_NOTHING)
    max_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    product = models.ForeignKey('Product', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'price_list_item'
        unique_together = (('list', 'product', 'price'),)


class PriceType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    name = models.CharField(max_length=256)
    price_format = models.CharField(max_length=256, blank=True, null=True)
    price_format_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'price_type'


class PricelistAdd(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pricelist = models.ForeignKey(PriceList, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pricelist_add'


class PrintSelectTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    format = models.CharField(max_length=64)
    refer_id = models.IntegerField()
    report_action = models.CharField(max_length=256)
    template = models.ForeignKey('ReportTemplate', models.DO_NOTHING)
    template_type = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'print_select_template'


class PrintWizard(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    custom_template = models.ForeignKey('ReportTemplate', models.DO_NOTHING, blank=True, null=True)
    custom_template_type = models.CharField(max_length=256, blank=True, null=True)
    multi_page = models.BooleanField(blank=True, null=True)
    out_format = models.CharField(max_length=64)
    print_ids = models.TextField()
    print_model = models.CharField(max_length=256)
    template = models.CharField(max_length=256, blank=True, null=True)
    template_format = models.CharField(max_length=256, blank=True, null=True)
    template_method = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'print_wizard'


class ProdCreateVariants(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    related = models.ForeignKey('Product', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'prod_create_variants'


class Product(models.Model):
    active = models.BooleanField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    bin_location = models.CharField(max_length=256, blank=True, null=True)
    brand = models.ForeignKey('ProductBrand', models.DO_NOTHING, blank=True, null=True)
    can_purchase = models.BooleanField(blank=True, null=True)
    can_sell = models.BooleanField(blank=True, null=True)
    categ = models.ForeignKey('ProductCateg', models.DO_NOTHING)
    code = models.CharField(max_length=256)
    cogs_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    cost_method = models.CharField(max_length=64, blank=True, null=True)
    cost_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    details = models.TextField(blank=True, null=True)
    details2 = models.TextField(blank=True, null=True)
    details2_label = models.CharField(max_length=256, blank=True, null=True)
    details3 = models.TextField(blank=True, null=True)
    details3_label = models.CharField(max_length=256, blank=True, null=True)
    ecom_discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ecom_hide_qty = models.BooleanField(blank=True, null=True)
    ecom_hide_unavail = models.BooleanField(blank=True, null=True)
    ecom_lot_before_invoice = models.BooleanField(blank=True, null=True)
    ecom_no_order_unavail = models.BooleanField(blank=True, null=True)
    ecom_select_lot = models.BooleanField(blank=True, null=True)
    ecom_special_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    gross_profit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    height = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    is_published = models.BooleanField(blank=True, null=True)
    length = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot_select = models.CharField(max_length=64, blank=True, null=True)
    max_qty_loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    mfg_lead_time = models.DecimalField(max_digits=16, decimal_places=3, blank=True, null=True)
    mfg_min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    mfg_qty_multiple = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_sale_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    name = models.CharField(max_length=256)
    other_url = models.CharField(max_length=256, blank=True, null=True)
    packing_size = models.CharField(max_length=256, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    price_date = models.DateField(blank=True, null=True)
    price_notes = models.TextField(blank=True, null=True)
    procure_method = models.CharField(max_length=64, blank=True, null=True)
    product_origin = models.CharField(max_length=256, blank=True, null=True)
    purchase_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    purchase_currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    purchase_currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    purchase_duty_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_invoice_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    purchase_lead_time = models.IntegerField(blank=True, null=True)
    purchase_min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    purchase_qty_multiple = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_return_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    purchase_ship_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    purchase_to_invoice_uom_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    purchase_to_stock_uom_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    purchase_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    qty2_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    require_lot = models.BooleanField(blank=True, null=True)
    require_qty2 = models.BooleanField(blank=True, null=True)
    sale_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    sale_invoice_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    sale_promotion_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_promotion_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    sale_return_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    sale_to_invoice_uom_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    sale_to_stock_uom_factor = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    sale_unit_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    shelf_life = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    stock_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    stock_in_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    stock_out_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    stock_plan_horizon = models.IntegerField(blank=True, null=True)
    store_type = models.ForeignKey('StoreType', models.DO_NOTHING, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    supplier_product_code = models.CharField(max_length=256, blank=True, null=True)
    supply_method = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    update_balance = models.BooleanField(blank=True, null=True)
    volume = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    width = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lot_type = models.CharField(max_length=64, blank=True, null=True)
    unique_lot = models.BooleanField(blank=True, null=True)
    tests = models.CharField(max_length=64, blank=True, null=True)
    lot_typexxxx = models.CharField(max_length=64, blank=True, null=True)
    supply_method2 = models.CharField(max_length=64, blank=True, null=True)
    supply_methodxxx = models.CharField(max_length=64, blank=True, null=True)
    description_eng = models.TextField(blank=True, null=True)
    showroom_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    warranty_card = models.IntegerField(blank=True, null=True)
    warranty_type = models.CharField(max_length=64, blank=True, null=True)
    expense_avg_car = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    wage_avg_car = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_percent = models.DecimalField(max_digits=16, decimal_places=4, blank=True, null=True)
    qty_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_use_around = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_use_front = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    foc_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    film_type = models.CharField(max_length=64, blank=True, null=True)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand', blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    warranty_duration = models.IntegerField(blank=True, null=True)
    interval = models.ForeignKey(IntervalSettings, models.DO_NOTHING, blank=True, null=True)
    is_sp_warranty = models.BooleanField(blank=True, null=True)
    old_code = models.CharField(max_length=256, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    sale_price_0 = models.DecimalField(db_column='Sale Price', max_digits=16, decimal_places=6, blank=True, null=True)  # Field name made lowercase. Field renamed to remove unsuitable characters. Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'product'


class ProductAttribute(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_attribute'


class ProductAttributeOption(models.Model):
    attribute = models.ForeignKey(ProductAttribute, models.DO_NOTHING)
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    price = models.FloatField(blank=True, null=True)
    sequence = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_attribute_option'


class ProductAttributeValue(models.Model):
    attribute = models.ForeignKey(ProductAttribute, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    option = models.ForeignKey(ProductAttributeOption, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    value = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_attribute_value'


class ProductBorrow(models.Model):
    borrow_for = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    due_date = models.DateField()
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(unique=True, max_length=256)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    is_actual = models.CharField(max_length=64, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    ref = models.CharField(max_length=256, blank=True, null=True)
    to_delivery = models.BooleanField(blank=True, null=True)
    actual_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    return_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draf_date = models.DateTimeField(blank=True, null=True)
    draf = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason_reject = models.ForeignKey('ReasonCode', models.DO_NOTHING, blank=True, null=True)
    reason_reject_text = models.TextField(blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    department_ids = models.TextField(blank=True, null=True)
    journal_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_borrow'


class ProductBorrowAssetLine(models.Model):
    book_val = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    fixed_asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request = models.ForeignKey(ProductBorrow, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_borrow_asset_line'


class ProductBorrowLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    request = models.ForeignKey(ProductBorrow, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qty_forecast = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    detail = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    issued_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    returned_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    default_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    inv_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_borrow_line'


class ProductBrand(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_brand'


class ProductBrandGroup(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_brand_group'


class ProductCateg(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    cogs_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cost_method = models.CharField(max_length=64)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    gross_profit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    purchase_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    purchase_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    sale_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    stock_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_fix_warranty = models.BooleanField(blank=True, null=True)
    categ_type = models.CharField(max_length=64, blank=True, null=True)
    film_type = models.CharField(max_length=64, blank=True, null=True)
    com_percent = models.DecimalField(max_digits=16, decimal_places=4, blank=True, null=True)
    is_commission = models.BooleanField(blank=True, null=True)
    sale_payment_terms = models.ForeignKey(PaymentTerms, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_categ'


class ProductClaim(models.Model):
    action_token = models.CharField(max_length=64, blank=True, null=True)
    cause_damage = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_received = models.DateField()
    date_received_sup = models.DateField(blank=True, null=True)
    date_sent_sup = models.DateField(blank=True, null=True)
    defect = models.TextField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    repair_details = models.TextField(blank=True, null=True)
    repair_process = models.CharField(max_length=64, blank=True, null=True)
    repl_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    repl_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    serial_no = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    warranty = models.BooleanField(blank=True, null=True)
    warranty_end = models.DateField(blank=True, null=True)
    warranty_start = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    is_repl_product = models.CharField(max_length=64, blank=True, null=True)
    repl_type = models.CharField(max_length=64, blank=True, null=True)
    cod = models.ForeignKey(CauseOfDamage, models.DO_NOTHING, db_column='cod', blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    is_gr = models.BooleanField(blank=True, null=True)
    prod_list = models.TextField(blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    sale_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    inv_ids = models.TextField(blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    item_ids = models.TextField(blank=True, null=True)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    ins_date = models.DateField(blank=True, null=True)
    is_back = models.BooleanField(blank=True, null=True)
    is_double_front = models.BooleanField(blank=True, null=True)
    is_front = models.BooleanField(blank=True, null=True)
    is_other = models.BooleanField(blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    repl_note = models.TextField(blank=True, null=True)
    is_double_back = models.BooleanField(blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    write_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_claim'


class ProductClaimLine(models.Model):
    claim = models.ForeignKey(ProductClaim, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    prod_list = models.TextField(blank=True, null=True)
    lot_list = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    loss_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    loss_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_claim_line'


class ProductComponent(models.Model):
    component = models.ForeignKey(Product, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_component'


class ProductCustomOption(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    required = models.BooleanField(blank=True, null=True)
    seq = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_custom_option'


class ProductCustomOptionValue(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cust_opt = models.ForeignKey(ProductCustomOption, models.DO_NOTHING)
    description = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_custom_option_value'


class ProductGroup(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group'


class ProductGroupCostPrice(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING)
    type = models.ForeignKey(CarType, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_cost_price'


class ProductGroupCostPriceLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(ProductGroupCostPrice, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_cost_price_line'


class ProductGroupInstall(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING)
    type = models.ForeignKey(CarType, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_install'


class ProductGroupInstallLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(ProductGroupInstall, models.DO_NOTHING)
    position = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_install_line'


class ProductGroupStandard(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING)
    type = models.ForeignKey(CarType, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_standard'


class ProductGroupStandardLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(ProductGroupStandard, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_group_standard_line'


class ProductImage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    title = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_image'


class ProductLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_line'


class ProductLocation(models.Model):
    bin_location = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    sequence = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'product_location'


class ProductStockProject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    loss_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING)
    request_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    return_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    use_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lot_qty_0 = models.ForeignKey('StockLot', models.DO_NOTHING, db_column='lot_qty_id', blank=True, null=True)  # Field renamed because of name conflict.
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_stock_project'


class ProductSupplier(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    sequence = models.IntegerField()
    supplier = models.ForeignKey(Contact, models.DO_NOTHING)
    supplier_product_code = models.CharField(max_length=256, blank=True, null=True)
    supplier_product_name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_supplier'


class ProductVariantValues(models.Model):
    attribute = models.ForeignKey(ProductAttribute, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    popup = models.ForeignKey(ProdCreateVariants, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_variant_values'


class ProductionBarcodeReceiveMfg(models.Model):
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_barcode_receive_mfg'


class ProductionBarcodeReceiveMfgLine(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    production = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty2 = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    wizard = models.ForeignKey(ProductionBarcodeReceiveMfg, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_barcode_receive_mfg_line'


class ProductionComponent(models.Model):
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    issue_method = models.CharField(max_length=64)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty_backflush = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qty_planned = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    qty_issued = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qty_received = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    rm_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_component'


class ProductionComponentOrder(models.Model):
    confirm_orders = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_component_order'


class ProductionComponentOrderLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    order = models.ForeignKey(ProductionComponentOrder, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    supply_method = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_component_order_line'


class ProductionCost(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    fg = models.ForeignKey('ProductionFinishedGoods', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rate = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    is_distribute_cost = models.BooleanField(blank=True, null=True)
    period_date = models.DateField(blank=True, null=True)
    period = models.ForeignKey('ProductionPeriod', models.DO_NOTHING, blank=True, null=True)
    qty_issued = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom_name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_cost'


class ProductionCostLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    cost = models.ForeignKey(ProductionCost, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    fg = models.ForeignKey('ProductionFinishedGoods', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    rate = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_cost_line'


class ProductionFinishedGoodInspection(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING)
    location_scrap = models.ForeignKey('StockLocation', models.DO_NOTHING)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING)
    number = models.CharField(max_length=256)
    picking_state = models.CharField(max_length=64)
    production_order = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_finished_good_inspection'


class ProductionFinishedGoodInspectionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    inspection = models.ForeignKey(ProductionFinishedGoodInspection, models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    max_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production_fg = models.ForeignKey('ProductionFinishedGoods', models.DO_NOTHING, blank=True, null=True)
    production_order = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    production_qc = models.ForeignKey('ProductionQc', models.DO_NOTHING, blank=True, null=True)
    qty_failed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_passed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    reason_code = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_code', blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    sample_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    test = models.ForeignKey('QcTest', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    value = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_finished_good_inspection_line'


class ProductionFinishedGoods(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING, blank=True, null=True)
    pick = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qc_check = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_finished_goods'


class ProductionOperation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    planned_duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    time_start = models.DateTimeField(blank=True, null=True)
    time_stop = models.DateTimeField(blank=True, null=True)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    activity = models.ForeignKey('StateOperation', models.DO_NOTHING, db_column='activity', blank=True, null=True)
    actual_duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    move = models.ForeignKey('StockMove', models.DO_NOTHING, blank=True, null=True)
    progress = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_operation'


class ProductionOperationEmployee(models.Model):
    actual_duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    order = models.ForeignKey('ProductionOrder', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_operation_employee'


class ProductionOrder(models.Model):
    bom = models.ForeignKey(Bom, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    done_qc_approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_qty_loss_approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    order_date = models.DateField()
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    period = models.ForeignKey('ProductionPeriod', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    production_location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    qty_planned = models.DecimalField(max_digits=16, decimal_places=6)
    ref = models.CharField(max_length=256, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    routing = models.ForeignKey('Routing', models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    split_approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey(MfgTeam, models.DO_NOTHING, blank=True, null=True)
    time_start = models.DateTimeField(blank=True, null=True)
    time_stop = models.DateTimeField(blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    fg_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    pd_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    rm_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    production_plan = models.ForeignKey('ProductionPlan', models.DO_NOTHING, blank=True, null=True)
    qc_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    qty_received = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qty_sale = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_order'


class ProductionPeriod(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    number = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_period'


class ProductionPeriodCost(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    period = models.ForeignKey(ProductionPeriod, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    method = models.CharField(max_length=64, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_period_cost'


class ProductionPlan(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    number = models.CharField(max_length=256)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    progress = models.IntegerField(blank=True, null=True)
    sale_forecast = models.ForeignKey('SaleForecast', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_plan'


class ProductionQc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(ProductionOrder, models.DO_NOTHING)
    result = models.CharField(max_length=64)
    sample_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    test = models.ForeignKey('QcTest', models.DO_NOTHING)
    value = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty_failed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_passed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    reason_code = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_code', blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_qc'


class ProductionQcInspection(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration_type = models.CharField(max_length=64, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_repair = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey(ProductionOrder, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    week = models.DateField(blank=True, null=True)
    work_type = models.ForeignKey('WorkType', models.DO_NOTHING, blank=True, null=True)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    production_fg = models.ForeignKey(ProductionFinishedGoods, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_qc_inspection'


class ProductionQcInspectionLine(models.Model):
    actual_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    actual_time = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    failure_code = models.CharField(max_length=256, blank=True, null=True)
    fg = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    not_pass_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    pass_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qc_inspection = models.ForeignKey(ProductionQcInspection, models.DO_NOTHING, blank=True, null=True)
    time_start = models.CharField(max_length=64, blank=True, null=True)
    time_stop = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    production_fg = models.ForeignKey(ProductionFinishedGoods, models.DO_NOTHING, blank=True, null=True)
    production_qc = models.ForeignKey(ProductionQc, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_qc_inspection_line'


class ProductionRawMaterialInspection(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING)
    location_scrap = models.ForeignKey('StockLocation', models.DO_NOTHING)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING)
    number = models.CharField(max_length=256)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    picking_state = models.CharField(max_length=64)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_raw_material_inspection'


class ProductionRawMaterialInspectionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    inspection = models.ForeignKey(ProductionRawMaterialInspection, models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty_failed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_passed = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_received = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_raw_material_inspection_line'


class ProductionWorkTime(models.Model):
    actual_hours = models.DecimalField(max_digits=16, decimal_places=2)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey('Project', models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)
    resources = models.TextField(blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track_ids = models.TextField(blank=True, null=True)
    week = models.DateField(blank=True, null=True)
    work_type = models.ForeignKey('WorkType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    production_order = models.ForeignKey(ProductionOrder, models.DO_NOTHING, blank=True, null=True)
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'production_work_time'


class Profile(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default_menu_access = models.CharField(max_length=64, blank=True, null=True)
    default_model_perms = models.CharField(max_length=64, blank=True, null=True)
    home_action = models.CharField(max_length=256, blank=True, null=True)
    keep_ui_log = models.BooleanField(blank=True, null=True)
    login_company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    prevent_login = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profile'


class Profile2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default_menu_access = models.CharField(max_length=64, blank=True, null=True)
    default_model_perms = models.CharField(max_length=64, blank=True, null=True)
    home_action = models.CharField(max_length=256, blank=True, null=True)
    keep_ui_log = models.BooleanField(blank=True, null=True)
    login_company_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    prevent_login = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profile2'


class ProfileAccess(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    model = models.ForeignKey(Model, models.DO_NOTHING)
    modif_all = models.BooleanField(blank=True, null=True)
    perm_create = models.BooleanField(blank=True, null=True)
    perm_delete = models.BooleanField(blank=True, null=True)
    perm_read = models.BooleanField(blank=True, null=True)
    perm_write = models.BooleanField(blank=True, null=True)
    profile = models.ForeignKey(Profile, models.DO_NOTHING)
    view_all = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profile_access'


class ProfileAccess2(models.Model):
    id = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    model_id = models.IntegerField(blank=True, null=True)
    modif_all = models.BooleanField(blank=True, null=True)
    perm_create = models.BooleanField(blank=True, null=True)
    perm_delete = models.BooleanField(blank=True, null=True)
    perm_read = models.BooleanField(blank=True, null=True)
    perm_write = models.BooleanField(blank=True, null=True)
    profile_id = models.IntegerField(blank=True, null=True)
    view_all = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profile_access2'


class ProfileAddModel(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    profile = models.ForeignKey(Profile, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profile_add_model'


class Project(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    end_date = models.DateField()
    est_track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    start_date = models.DateField()
    state = models.CharField(max_length=64)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    progress = models.IntegerField(blank=True, null=True)
    project_template = models.ForeignKey('ProjectTemplate', models.DO_NOTHING, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    project_type = models.ForeignKey('ProjectType', models.DO_NOTHING)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    amount_aft_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_bfr_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_rate_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    pj_type = models.CharField(max_length=64)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    create_date = models.DateTimeField(blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    confirm_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    complete_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    complete_date = models.DateTimeField(blank=True, null=True)
    revise_number = models.CharField(max_length=64, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    inprogress_date = models.DateTimeField(blank=True, null=True)
    inprogress = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project'


class ProjectCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    description = models.TextField()
    landed_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    purchase_duty_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_ship_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    showroom_price = models.DecimalField(max_digits=16, decimal_places=2)

    class Meta:
        managed = False
        db_table = 'project_cost'


class ProjectCostTwo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    description = models.TextField()
    landed_cost = models.DecimalField(max_digits=16, decimal_places=2)
    list_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    purchase_duty_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_ship_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    expenses_type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'project_cost_two'


class ProjectCreateTaskList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    milestone = models.ForeignKey('ProjectMilestone', models.DO_NOTHING, blank=True, null=True)
    milestones = models.TextField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey('ProjectTaskListTemplate', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_create_task_list'


class ProjectItemLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    est_cost = models.DecimalField(max_digits=16, decimal_places=2)
    est_profit = models.DecimalField(max_digits=16, decimal_places=2)
    item_no = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    project_item = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_item_line'


class ProjectLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_cost_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_margin_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_margin_percent_input = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_profit_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    hide_sub = models.BooleanField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    retail_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    chassis_number = models.CharField(max_length=256, blank=True, null=True)
    customer_name = models.CharField(max_length=256, blank=True, null=True)
    film_setting = models.CharField(max_length=64, blank=True, null=True)
    qty_to_use_around = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_use_front = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    deliv_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_line'


class ProjectLineFilmSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project_line = models.ForeignKey(ProjectLine, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_line_film_setting'


class ProjectMilestone(models.Model):
    act_date_from = models.DateField(blank=True, null=True)
    act_date_to = models.DateField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    est_track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    plan_date_from = models.DateField(blank=True, null=True)
    plan_date_to = models.DateField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_milestone'


class ProjectPlanQty(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    remain_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    project_line = models.ForeignKey(ProjectLine, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_plan_qty'


class ProjectResource(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    skill_level = models.ForeignKey('SkillLevel', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_resource'


class ProjectResourceAlloc(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    progress = models.IntegerField(blank=True, null=True)
    resource = models.ForeignKey(ProjectResource, models.DO_NOTHING)
    time_start = models.DateTimeField()
    time_stop = models.DateTimeField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_resource_alloc'


class ProjectResourceAllocDepend(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delay = models.IntegerField(blank=True, null=True)
    prev_resource_alloc = models.ForeignKey(ProjectResourceAlloc, models.DO_NOTHING)
    resource_alloc = models.ForeignKey(ProjectResourceAlloc, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_resource_alloc_depend'


class ProjectReviseLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=64, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_revise_line'


class ProjectTask(models.Model):
    comments = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_created = models.DateTimeField()
    date_start = models.DateField()
    description = models.TextField(blank=True, null=True)
    done_date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    duration = models.IntegerField()
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    milestone = models.ForeignKey(ProjectMilestone, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    progress = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey(ProjectResource, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64)
    task_list = models.ForeignKey('ProjectTaskList', models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    actual_duration = models.IntegerField(blank=True, null=True)
    date_end = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_task'


class ProjectTaskDepend(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delay = models.IntegerField(blank=True, null=True)
    prev_task = models.ForeignKey(ProjectTask, models.DO_NOTHING)
    task = models.ForeignKey(ProjectTask, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_task_depend'


class ProjectTaskList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_created = models.DateField()
    milestone = models.ForeignKey(ProjectMilestone, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_task_list'


class ProjectTaskListTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_task_list_template'


class ProjectTaskTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.IntegerField()
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    start_after = models.IntegerField(blank=True, null=True)
    task_list_template = models.ForeignKey(ProjectTaskListTemplate, models.DO_NOTHING)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_task_template'


class ProjectTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'project_template'


class ProjectTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item_no = models.IntegerField(blank=True, null=True)
    project_item = models.CharField(max_length=256, blank=True, null=True)
    template = models.ForeignKey(ProjectTemplate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    product = models.ForeignKey(Product, models.DO_NOTHING)
    landed_cost = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    expenses_type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'project_template_line'


class ProjectType(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    quot = models.ForeignKey('SaleQuot', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    pj_type = models.CharField(max_length=64)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_type'


class ProjectWorkTime(models.Model):
    actual_hours = models.DecimalField(max_digits=16, decimal_places=2)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey(ProjectResource, models.DO_NOTHING)
    resources = models.TextField(blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING)
    track_ids = models.TextField(blank=True, null=True)
    work_type = models.ForeignKey('WorkType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    week = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project_work_time'


class Province(models.Model):
    code = models.CharField(max_length=256)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'province'


class PurchaseApproval(models.Model):
    appr_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    purchase_req = models.ForeignKey('PurchaseRequest', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_approval'


class PurchaseApprovalLine(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_approval = models.ForeignKey(PurchaseApproval, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    max_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    level = models.IntegerField()
    sequence = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'purchase_approval_line'


class PurchaseApproveLine(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    level = models.CharField(max_length=256, blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request = models.ForeignKey('PurchaseRequest', models.DO_NOTHING)
    state = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    max_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey('PurchaseOrder', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'purchase_approve_line'


class PurchaseOrder(models.Model):
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    customer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField()
    date_required = models.DateField(blank=True, null=True)
    delivery_date = models.DateField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    other_info = models.TextField(blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    price_list = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    purchase_type = models.ForeignKey('PurchaseType', models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_term = models.ForeignKey('ShipTerm', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    make_pr_to_po_id = models.CharField(max_length=256, blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING)
    amount_bfr_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_sum = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_aft_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_disc_rate_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    po_type = models.CharField(max_length=64)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    confirm_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    amt_approve = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_appr = models.ForeignKey(PurchaseApproval, models.DO_NOTHING)
    payment_terms_0 = models.ForeignKey(PaymentTerms, models.DO_NOTHING, db_column='payment_terms_id', blank=True, null=True)  # Field renamed because of name conflict.
    approvals = models.TextField(blank=True, null=True)
    approvers = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact_type_check = models.TextField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_order'
        unique_together = (('company', 'number'),)


class PurchaseOrderApproveLine(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    level = models.CharField(max_length=256, blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    max_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_order_approve_line'


class PurchaseOrderLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    request = models.ForeignKey('PurchaseRequest', models.DO_NOTHING, blank=True, null=True)
    original_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request_line = models.ForeignKey('PurchaseRequestLine', models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier_product_code = models.CharField(max_length=256, blank=True, null=True)
    supplier_product_name = models.CharField(max_length=256, blank=True, null=True)
    budget_bal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget = models.ForeignKey(AccountBudget, models.DO_NOTHING, blank=True, null=True)
    description_eng = models.TextField(blank=True, null=True)
    budget_detial = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    budget_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_reserve_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    level = models.CharField(max_length=256, blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=256, blank=True, null=True)
    alloc_discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_detail = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING)
    packing_size = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_order_line'


class PurchaseRequest(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_required = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    number = models.CharField(max_length=256)
    other_info = models.TextField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING)
    pr_type = models.CharField(max_length=64)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING)
    amt_approve = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    check_button = models.CharField(max_length=64, blank=True, null=True)
    purchase_appr = models.ForeignKey(PurchaseApproval, models.DO_NOTHING)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    approval = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approvals = models.TextField(blank=True, null=True)
    approvers = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason_request = models.TextField()
    count = models.IntegerField(blank=True, null=True)
    display_approved_by = models.TextField(blank=True, null=True)
    approve_counter = models.IntegerField(blank=True, null=True)
    user_ids = models.TextField(blank=True, null=True)
    department_ids = models.TextField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey('ReasonCode', models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    reopen_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reopen_date = models.DateTimeField(blank=True, null=True)
    next_approve_ids = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request'


class PurchaseRequestApproveLine(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    level = models.IntegerField(blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    max_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_bud = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approve_email = models.BooleanField(blank=True, null=True)
    send_email = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request_approve_line'


class PurchaseRequestFilms(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_required = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    other_info = models.TextField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request_films'


class PurchaseRequestFilmsLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    purchase_order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    budget = models.ForeignKey(AccountBudget, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request_films_line'


class PurchaseRequestLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    purchase_order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    name = models.TextField(blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget = models.ForeignKey(AccountBudget, models.DO_NOTHING, blank=True, null=True)
    description_eng = models.TextField(blank=True, null=True)
    budget_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_detial = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING, blank=True, null=True)
    budget_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_reserve_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    level = models.CharField(max_length=256, blank=True, null=True)
    max_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget_detail = models.ForeignKey(AccountBudgetItemLine, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'purchase_request_line'


class PurchaseRequestNoTrade(models.Model):
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_required = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    other_info = models.TextField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request_no_trade'


class PurchaseRequestNoTradeLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    purchase_order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    budget = models.ForeignKey(AccountBudget, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_request_no_trade_line'


class PurchaseReturn(models.Model):
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    number = models.CharField(max_length=256)
    orig_purchase = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    price_list = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_term = models.ForeignKey('ShipTerm', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_return'


class PurchaseReturnLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(PurchaseReturn, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_return_line'


class PurchaseSendWizard(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    custom_template = models.ForeignKey('ReportTemplate', models.DO_NOTHING, blank=True, null=True)
    custom_template_type = models.CharField(max_length=256, blank=True, null=True)
    email_contact_field = models.CharField(max_length=256, blank=True, null=True)
    email_template = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    out_format = models.CharField(max_length=64)
    print_id = models.IntegerField()
    print_model = models.CharField(max_length=256)
    template = models.CharField(max_length=256, blank=True, null=True)
    template_format = models.CharField(max_length=256, blank=True, null=True)
    template_method = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_send_wizard'


class PurchaseType(models.Model):
    commission_po = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'purchase_type'


class QcItem(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    max_val = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_val = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    test_name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qc_item'


class QcLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.ForeignKey(QcItem, models.DO_NOTHING, blank=True, null=True)
    qc = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    qc_remark = models.CharField(max_length=256, blank=True, null=True)
    qc_state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    add = models.ForeignKey('WizardAddLot', models.DO_NOTHING, blank=True, null=True)
    barcode = models.ForeignKey(LmBarcodeTransfer, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qc_line'


class QcTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    temp_name = models.CharField(max_length=256)
    types = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qc_template'


class QcTemplateLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    item = models.ForeignKey(QcItem, models.DO_NOTHING, blank=True, null=True)
    qc = models.ForeignKey(QcTemplate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qc_template_line'


class QcTest(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    max_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qc_test'


class QtyCouponSetting(models.Model):
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    disc_amt_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_amt_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    max_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    product_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    is_fixed = models.BooleanField(blank=True, null=True)
    film_voucher = models.ForeignKey(FilmVoucherLine, models.DO_NOTHING, blank=True, null=True)
    voucher = models.ForeignKey('VoucherLine', models.DO_NOTHING, blank=True, null=True)
    voucher_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'qty_coupon_setting'


class QuotCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    description = models.TextField()
    landed_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    purchase_duty_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_ship_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    quot = models.ForeignKey('SaleQuot', models.DO_NOTHING)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'quot_cost'


class QuotLineFilmSetting(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    quot_line = models.ForeignKey('SaleQuotLine', models.DO_NOTHING)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'quot_line_film_setting'


class QuotSetting(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'quot_setting'


class ReasonCode(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_code'


class ReasonIssue(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'reason_issue'


class ReasonIssueLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    reason = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_issue_line'


class ReasonReject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    wizard_reject = models.ForeignKey('WizardReasonReject', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_reject'


class ReasonRejectLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    reason_reject = models.ForeignKey(ReasonReject, models.DO_NOTHING, blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_reject_line'


class ReasonRejectLinePo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING)
    reason_reject = models.ForeignKey(ReasonReject, models.DO_NOTHING, blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_reject_line_po'


class ReasonRejectLineProject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING)
    reason_reject = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reason_reject_line_project'


class ReconcileAdjust(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    line = models.ForeignKey(AccountStatementLine, models.DO_NOTHING)
    warning = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    memo = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reconcile_adjust'


class RecurInv(models.Model):
    active = models.BooleanField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    interval = models.CharField(max_length=64, blank=True, null=True)
    interval_month = models.IntegerField(blank=True, null=True)
    interval_week = models.CharField(max_length=64, blank=True, null=True)
    invoice_day = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    next_invoice_date = models.DateTimeField(blank=True, null=True)
    sale_copy = models.BooleanField(blank=True, null=True)
    start_date = models.DateField()
    state = models.CharField(max_length=64, blank=True, null=True)
    template = models.ForeignKey('RecurTemplate', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recur_inv'


class RecurInvLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    recur_inv = models.ForeignKey(RecurInv, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recur_inv_line'


class RecurTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    pay_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recur_template'


class RecurTemplateLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    template = models.ForeignKey(RecurTemplate, models.DO_NOTHING)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recur_template_line'


class Region(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region'


class Reminder(models.Model):
    body = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc = models.ForeignKey(Document, models.DO_NOTHING)
    scheduled_date = models.DateField()
    state = models.CharField(max_length=64)
    subject = models.CharField(max_length=256)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reminder'


class ReminderTemplate(models.Model):
    body = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_categ = models.ForeignKey(DocumentCateg, models.DO_NOTHING)
    scheduled_date = models.CharField(max_length=256)
    subject = models.CharField(max_length=256)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reminder_template'


class RentalItem(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    number = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    rental_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    resource_helper = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    resource_operator = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    state = models.ForeignKey('RentalItemState', models.DO_NOTHING, blank=True, null=True)
    wh_location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_item'


class RentalItemState(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_item_state'


class RentalOrder(models.Model):
    bill_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    job_location = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    payment_terms = models.CharField(max_length=256, blank=True, null=True)
    plan_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    profit_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    remarks = models.TextField(blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track_balance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    validity = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    invoice_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    current_year = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_order'


class RentalOrderLine(models.Model):
    bill_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    issue_date = models.DateField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    plan_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    plan_hours = models.DecimalField(max_digits=16, decimal_places=2)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    remarks = models.TextField(blank=True, null=True)
    rent_location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    rental = models.ForeignKey(RentalOrder, models.DO_NOTHING)
    rental_item = models.ForeignKey(RentalItem, models.DO_NOTHING)
    return_date = models.DateField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    track_balance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    current_year = models.BooleanField(blank=True, null=True)
    pick_in = models.BooleanField(blank=True, null=True)
    pick_out = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_order_line'


class RentalQuarantine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    number = models.CharField(max_length=256)
    quarantine_location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    rental_item = models.ForeignKey(RentalItem, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_quarantine'


class RentalTime(models.Model):
    actual_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    last_counter = models.IntegerField(blank=True, null=True)
    operator2 = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    operator = models.ForeignKey('ServiceResource', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(RentalOrder, models.DO_NOTHING)
    remarks = models.TextField(blank=True, null=True)
    rental_item = models.ForeignKey(RentalItem, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_time'


class RentalWorkTime(models.Model):
    actual_hours = models.DecimalField(max_digits=16, decimal_places=2)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey('ServiceResource', models.DO_NOTHING)
    resources = models.TextField(blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING)
    track_ids = models.TextField(blank=True, null=True)
    work_type = models.ForeignKey('WorkType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    week = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'rental_work_time'


class ReplacementLine(models.Model):
    claim = models.ForeignKey(ProductClaim, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'replacement_line'


class ReportAccountCheque(models.Model):
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    che = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    che_type = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    lm_bank = models.ForeignKey(LmBank, models.DO_NOTHING, blank=True, null=True)
    date_post_from = models.DateField(blank=True, null=True)
    date_post_to = models.DateField(blank=True, null=True)
    cheque_number = models.CharField(max_length=256, blank=True, null=True)
    voucher_number = models.CharField(max_length=256, blank=True, null=True)
    cheque_move_number = models.CharField(max_length=256, blank=True, null=True)
    payin_date_from = models.DateField(blank=True, null=True)
    payin_date_to = models.DateField(blank=True, null=True)
    bounce_date_from = models.DateField(blank=True, null=True)
    bounce_date_to = models.DateField(blank=True, null=True)
    cancel_date_from = models.DateField(blank=True, null=True)
    cancel_date_to = models.DateField(blank=True, null=True)
    expire_date_from = models.DateField(blank=True, null=True)
    expire_date_to = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_cheque'


class ReportAccountEstimate(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    due_date_from = models.DateField(blank=True, null=True)
    due_date_to = models.DateField(blank=True, null=True)
    purchase_order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_estimate'


class ReportAccountPayable(models.Model):
    categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    count_document = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    docu_type = models.CharField(max_length=64, blank=True, null=True)
    show_doc_type = models.BooleanField(blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    show_ref = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    due_from = models.DateField(blank=True, null=True)
    due_to = models.DateField(blank=True, null=True)
    memo = models.CharField(max_length=256, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    show_note = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_payable'


class ReportAccountPurchase(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_purchase'


class ReportAccountReceivable(models.Model):
    categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    count_document = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    docu_type = models.CharField(max_length=64, blank=True, null=True)
    show_doc_type = models.BooleanField(blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    show_ref = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    due_from = models.DateField(blank=True, null=True)
    due_to = models.DateField(blank=True, null=True)
    memo = models.CharField(max_length=256, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    bill = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    show_detail = models.BooleanField(blank=True, null=True)
    hide_zero = models.BooleanField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_receivable'


class ReportAccountReceivableFoc(models.Model):
    categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    count_document = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    docu_type = models.CharField(max_length=64, blank=True, null=True)
    show_doc_type = models.BooleanField(blank=True, null=True)
    show_memo = models.BooleanField(blank=True, null=True)
    show_ref = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    due_from = models.DateField(blank=True, null=True)
    due_to = models.DateField(blank=True, null=True)
    memo = models.CharField(max_length=256, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    bill = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_receivable_foc'


class ReportAccountSale(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_sale'


class ReportAccountSum(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    accounts = models.TextField(blank=True, null=True)
    code = models.ForeignKey(AccountAccount, models.DO_NOTHING, db_column='code', blank=True, null=True)
    select_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_sum'


class ReportAccountTrans(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    cash_basis = models.BooleanField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_account_trans'


class ReportAdvanceSummary(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    reason = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_advance_summary'


class ReportAgedPayables(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_aged_payables'


class ReportAgedReceivables(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_aged_receivables'


class ReportApDetails(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_ap_details'


class ReportArDetails(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_ar_details'


class ReportAttendanceSummary(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_attendance_summary'


class ReportAudit(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    message = models.CharField(max_length=256, blank=True, null=True)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_audit'


class ReportBalanceSheet(models.Model):
    compare_periods = models.CharField(max_length=64, blank=True, null=True)
    compare_with = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    convert_currency = models.BooleanField(blank=True, null=True)
    group_account_name = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_balance_sheet'


class ReportBankRec(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_bank_rec'


class ReportBillCollector(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    place = models.CharField(max_length=64, blank=True, null=True)
    salesman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    region = models.ForeignKey(Region, models.DO_NOTHING, db_column='region', blank=True, null=True)
    bill_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    region_0 = models.ForeignKey(Region, models.DO_NOTHING, db_column='region_id', blank=True, null=True)  # Field renamed because of name conflict.
    date_from_paid = models.DateField(blank=True, null=True)
    date_to_paid = models.DateField(blank=True, null=True)
    show_rv = models.BooleanField(blank=True, null=True)
    group_contact = models.BooleanField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    reason = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_bill_collector'


class ReportCashFlow(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    bal_date = models.DateField()
    convert_currency = models.BooleanField(blank=True, null=True)
    custom_template = models.BooleanField(blank=True, null=True)
    method = models.CharField(max_length=64)
    template = models.ForeignKey('TemplateReportCashFlow', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_cash_flow'


class ReportCashSum(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_cash_sum'


class ReportClearTrip(models.Model):
    bill_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    group_contact = models.BooleanField(blank=True, null=True)
    salesman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_begin = models.DateField(blank=True, null=True)
    date_clear_trip = models.DateField(blank=True, null=True)
    assist_manager_account = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    assist_manager_sale = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    maker = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    salesman_area = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_clear_trip'


class ReportCommissionBuilding(models.Model):
    contact_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_commission_building'


class ReportCommissionPo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_commission_po'


class ReportCommissionSaleThulle(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    type_com = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_commission_sale_thulle'


class ReportCompareTarget(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_compare_target'


class ReportCostSummary(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField()
    date_to = models.DateTimeField()
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_cost_summary'


class ReportCreditCard(models.Model):
    book_bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_number = models.CharField(max_length=256, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    honor_amount_net = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    honor_date_from = models.DateField(blank=True, null=True)
    honor_date_to = models.DateField(blank=True, null=True)
    honor_memo = models.CharField(max_length=256, blank=True, null=True)
    honor_number = models.CharField(max_length=256, blank=True, null=True)
    honor_state = models.CharField(max_length=64, blank=True, null=True)
    payment_date_from = models.DateField(blank=True, null=True)
    payment_date_to = models.DateField(blank=True, null=True)
    payment_number = models.CharField(max_length=256, blank=True, null=True)
    sort_by = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_credit_card'


class ReportCreditControlDetail(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_credit_control_detail'


class ReportCurrency(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_currency'


class ReportCustInv(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_cust_inv'


class ReportCustInvoice(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    show_details = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    count_document = models.BooleanField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    docu_type = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_cust_invoice'


class ReportDepSchedule(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    purchase_date_from = models.DateField(blank=True, null=True)
    purchase_date_to = models.DateField(blank=True, null=True)
    type = models.ForeignKey(AccountFixedAssetType, models.DO_NOTHING, blank=True, null=True)
    dispose_date_from = models.DateField(blank=True, null=True)
    dispose_date_to = models.DateField(blank=True, null=True)
    sale_date_from = models.DateField(blank=True, null=True)
    sale_date_to = models.DateField(blank=True, null=True)
    parent = models.ForeignKey(AccountFixedAssetParentType, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_dep_schedule'


class ReportDepreAllocationCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField()
    date_to = models.DateTimeField()
    fixed_asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_depre_allocation_cost'


class ReportDiffBudget(models.Model):
    budget_detail = models.ForeignKey(BudgetSelection, models.DO_NOTHING, blank=True, null=True)
    budget_detail_ids = models.TextField(blank=True, null=True)
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    budget_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_diff_budget'


class ReportExpenseClaim(models.Model):
    budget = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_expense_claim'


class ReportGl(models.Model):
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    accounts = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    select_type = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_gl'


class ReportGlDetails(models.Model):
    account_from = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_to = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    accounts = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    hide_zero = models.BooleanField(blank=True, null=True)
    select_type = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_amount_cur = models.BooleanField(blank=True, null=True)
    contact_char = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_gl_details'


class ReportJournal(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    filter_by = models.CharField(max_length=64, blank=True, null=True)
    hide_zero = models.BooleanField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    order_by = models.CharField(max_length=64, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    narration = models.TextField(blank=True, null=True)
    post_date_from = models.DateField(blank=True, null=True)
    post_date_to = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_journal'


class ReportLandedCost(models.Model):
    cost_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    landed = models.ForeignKey(LandedCost, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_landed_cost'


class ReportLeaveSummary(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    leave_period = models.ForeignKey(HrLeavePeriod, models.DO_NOTHING, blank=True, null=True)
    leave_type = models.ForeignKey(HrLeaveType, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_leave_summary'


class ReportMachineryWorkingTime(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_machinery_working_time'


class ReportMtbfMttr(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_mtbf_mttr'


class ReportNewPettyCash(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_payment_from = models.DateField(blank=True, null=True)
    date_payment_to = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    petty_cash_fund = models.ForeignKey(PettyCashFund, models.DO_NOTHING, blank=True, null=True)
    show_details = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    number_text = models.CharField(max_length=256, blank=True, null=True)
    payment_text = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_new_petty_cash'


class ReportPayrollSummary(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    emp_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_payroll_summary'


class ReportPnd1(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    month = models.DateField(blank=True, null=True)
    name_pay = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_pnd1'


class ReportPnd1Kor(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name_pay = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_pnd1_kor'


class ReportPnd91(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_pnd91'


class ReportPortal(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_portal'


class ReportPrepaidExpenseDetail(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    prepaid = models.ForeignKey(AllocatePrepaidExpense, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_prepaid_expense_detail'


class ReportPrepaidExpenseSummary(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    prepaid_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    prepaid = models.ForeignKey(AllocatePrepaidExpense, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_prepaid_expense_summary'


class ReportPreventiveMaintenance(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    service_contract = models.ForeignKey('ServiceContract', models.DO_NOTHING, blank=True, null=True)
    service_contract_template = models.ForeignKey('ServiceContractTemplate', models.DO_NOTHING, blank=True, null=True)
    service_order = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_preventive_maintenance'


class ReportProductionComponent(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    show_empty = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_production_component'


class ReportProductionOrder(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    production_order = models.ForeignKey(ProductionOrder, models.DO_NOTHING, db_column='production_order', blank=True, null=True)
    sale_order = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_production_order'


class ReportProductionQc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    result = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_production_qc'


class ReportProfitLoss(models.Model):
    compare_periods = models.CharField(max_length=64, blank=True, null=True)
    compare_with = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    show_ytd = models.BooleanField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    convert_currency = models.BooleanField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_profit_loss'


class ReportProjectCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_project_cost'


class ReportProjectProfit(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_project_profit'


class ReportProvident(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    month = models.DateField(blank=True, null=True)
    report_type = models.CharField(max_length=64)
    show_doc_date = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_provident'


class ReportPurchaseOrder(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    po = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    prod_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, db_column='prod_categ', blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    show_categ = models.BooleanField(blank=True, null=True)
    show_currency = models.BooleanField(blank=True, null=True)
    show_location = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_purchase_order'


class ReportPurchaseReceived(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    delivery_date_from = models.DateField(blank=True, null=True)
    delivery_date_to = models.DateField(blank=True, null=True)
    picking_state = models.CharField(max_length=64, blank=True, null=True)
    po_state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_purchase_received'


class ReportQuotationPreMain(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    est_counter = models.IntegerField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_quotation_pre_main'


class ReportReconcile(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_reconcile'


class ReportRentalAvail(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    num_days = models.IntegerField()
    start_date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_rental_avail'


class ReportRentalBooking(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    num_days = models.IntegerField()
    product = models.ForeignKey(Product, models.DO_NOTHING)
    start_date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_rental_booking'


class ReportRentalCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_rental_cost'


class ReportRentalItemHist(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    rental_item = models.ForeignKey(RentalItem, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_rental_item_hist'


class ReportRentalUsage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_rental_usage'


class ReportSafeIn(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField(blank=True, null=True)
    date_to = models.DateTimeField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_safe_in'


class ReportSafeOut(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField(blank=True, null=True)
    date_to = models.DateTimeField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_safe_out'


class ReportSaleOrder(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    prod_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, db_column='prod_categ', blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    show_categ = models.BooleanField(blank=True, null=True)
    show_currency = models.BooleanField(blank=True, null=True)
    show_location = models.BooleanField(blank=True, null=True)
    so = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_order'


class ReportSalePayment(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice_date_from = models.DateField(blank=True, null=True)
    invoice_date_to = models.DateField(blank=True, null=True)
    order_date_from = models.DateField(blank=True, null=True)
    order_date_to = models.DateField(blank=True, null=True)
    pay_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_payment'


class ReportSaleProduct(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_product'


class ReportSaleProfit(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_profit'


class ReportSaleReceived(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    due_date_from = models.DateField(blank=True, null=True)
    due_date_to = models.DateField(blank=True, null=True)
    picking_state = models.CharField(max_length=64, blank=True, null=True)
    so_state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_received'


class ReportSaleRsvFilm(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    event = models.ForeignKey('SaleEvent', models.DO_NOTHING, blank=True, null=True)
    pay = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_rsv_film'


class ReportSaleTarget(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_detail = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sale_target'


class ReportScheduleShipment(models.Model):
    arrival_date_from = models.DateField(blank=True, null=True)
    arrival_date_to = models.DateField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    eta_date_from = models.DateField(blank=True, null=True)
    eta_date_to = models.DateField(blank=True, null=True)
    etd_date_from = models.DateField(blank=True, null=True)
    etd_date_to = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    purchase_order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    invoice_relate = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_schedule_shipment'


class ReportServiceContract(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField(blank=True, null=True)
    date_to = models.DateTimeField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    service_contract = models.ForeignKey('ServiceContract', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_service_contract'


class ReportServiceHistory(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    service_type = models.ForeignKey('ServiceType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_service_history'


class ReportServiceJobCosting(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField(blank=True, null=True)
    date_to = models.DateTimeField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    service_job = models.ForeignKey(Job, models.DO_NOTHING, db_column='service_job', blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_service_job_costing'


class ReportShipCost(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_pay_by = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_ship_cost'


class ReportSso(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    month = models.DateField(blank=True, null=True)
    name_pay = models.CharField(max_length=256, blank=True, null=True)
    option = models.CharField(max_length=64, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_sso'


class ReportStockAging(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    show_cost = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_aging'


class ReportStockCard(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    hide_zero = models.BooleanField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    show_pending = models.BooleanField(blank=True, null=True)
    show_qty2 = models.BooleanField(blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_archived = models.BooleanField(blank=True, null=True)
    is_negative = models.BooleanField(blank=True, null=True)
    is_non_lot = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_card'


class ReportStockForecast(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    num_periods = models.IntegerField()
    period_days = models.IntegerField()
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    show_location = models.BooleanField(blank=True, null=True)
    show_lot = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_forecast'


class ReportStockMove(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    pick_type = models.CharField(max_length=64)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    show_loss_only = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    product_code = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_move'


class ReportStockMovement(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_type = models.CharField(max_length=64, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    sort_by = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    move_state = models.CharField(max_length=64, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    pick_state = models.CharField(max_length=64, blank=True, null=True)
    picking_number = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_movement'


class ReportStockPlan(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    plan_horizon = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_plan'


class ReportStockPlanForecast(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    plan_horizon = models.IntegerField(blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_plan_forecast'


class ReportStockSummary(models.Model):
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    only_closing = models.BooleanField(blank=True, null=True)
    prod_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    prod_code = models.CharField(max_length=256, blank=True, null=True)
    prod_company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    show_container = models.BooleanField(blank=True, null=True)
    show_lot = models.BooleanField(blank=True, null=True)
    show_qty2 = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    show_archived = models.BooleanField(blank=True, null=True)
    is_negative = models.BooleanField(blank=True, null=True)
    is_zero = models.BooleanField(blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_stock_summary'


class ReportSuppInvoice(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    show_details = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    count_document = models.BooleanField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    docu_type = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_supp_invoice'


class ReportTaxAudit(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    trans_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact_type = models.CharField(max_length=64, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    vat_rate = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    ref_id = models.CharField(max_length=256, blank=True, null=True)
    tax_id = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_tax_audit'


class ReportTaxSum(models.Model):
    by_comp = models.BooleanField(blank=True, null=True)
    by_rate = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_tax_sum'


class ReportTb(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    show_period_totals = models.BooleanField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_tb'


class ReportTbDetails(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    group_account = models.BooleanField(blank=True, null=True)
    hide_period = models.BooleanField(blank=True, null=True)
    hide_ytd = models.BooleanField(blank=True, null=True)
    track_categ = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_tb_details'


class ReportTemplate(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    format = models.CharField(max_length=64)
    method = models.CharField(max_length=256, blank=True, null=True)
    model = models.ForeignKey(Model, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    default = models.BooleanField(blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_template'


class ReportThaiPnd3(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    report_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    amount_addon = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_addon = models.BooleanField(blank=True, null=True)
    time = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_thai_pnd3'


class ReportThaiPnd53(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    report_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    amount_addon = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_addon = models.BooleanField(blank=True, null=True)
    time = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_thai_pnd53'


class ReportThaiPp30(models.Model):
    balance_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    report_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    show_number_10 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    show_number_13 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    show_number_14 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_thai_pp30'


class ReportThaiPt40(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    report_type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_thai_pt40'


class ReportThaiWhtCertif(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    advance_clearing = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    petty_cash = models.ForeignKey(PettyCash, models.DO_NOTHING, blank=True, null=True)
    report_size = models.CharField(max_length=64, blank=True, null=True)
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING, blank=True, null=True)
    signature = models.CharField(max_length=256, blank=True, null=True)
    test = models.CharField(max_length=256, blank=True, null=True)
    receipt = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    credit_card_move = models.ForeignKey(AccountCreditCardMove, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_thai_wht_certif'


class ReportUnpaidSale(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    pay_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_unpaid_sale'


class ReportUser(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    sample = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_user'


class ReportWht50(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_wht50'


class ReportWorkSheet(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    is_period = models.BooleanField(blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_work_sheet'


class RequestPromotion(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    break_avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    promotion_title = models.CharField(max_length=256, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    manager_approve_date = models.DateTimeField(blank=True, null=True)
    manager_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    to = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    year = models.CharField(max_length=64, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    to_user = models.CharField(max_length=256, blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING, blank=True, null=True)
    next_approver = models.CharField(max_length=1024, blank=True, null=True)
    showroom_ids = models.TextField(blank=True, null=True)
    subtype = models.CharField(max_length=64, blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    specific_related = models.ForeignKey('self', models.DO_NOTHING, db_column='specific_related', blank=True, null=True)
    exclude_product_groups_ah = models.TextField(blank=True, null=True)
    product_ah = models.TextField(blank=True, null=True)
    product_groups_ah = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion'


class RequestPromotionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    new_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    old_promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    avg_field = models.DecimalField(db_column='avg_', max_digits=16, decimal_places=2, blank=True, null=True)  # Field renamed because it ended with '_'.
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)
    sub_title = models.CharField(max_length=256, blank=True, null=True)
    year = models.CharField(max_length=256, blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    include_vat = models.BooleanField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_line'


class RequestPromotionPeriod(models.Model):
    break_avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    number = models.CharField(max_length=256)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_period'


class RequestPromotionPeriodLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    new_avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    old_avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sale_area = models.ForeignKey('SaleArea', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_period_line'


class RequestPromotionSpecificLine(models.Model):
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    line = models.ForeignKey(RequestPromotionLine, models.DO_NOTHING)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    avg_vat = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    include_vat = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_specific_line'


class RequestPromotionSpecificSecret(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)
    request = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    text = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_specific_secret'


class RequestPromotionSpecificSecretLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(RequestPromotionSpecificSecret, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'request_promotion_specific_secret_line'


class RequireCouponLine(models.Model):
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_get = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    coupon_no = models.IntegerField(blank=True, null=True)
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'require_coupon_line'


class ReturnBorrow(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    request = models.ForeignKey(ProductBorrow, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'return_borrow'


class ReturnBorrowLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    issued_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    return_field = models.ForeignKey(ReturnBorrow, models.DO_NOTHING, db_column='return_id')  # Field renamed because it was a Python reserved word.
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    act_qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    borrow_line = models.ForeignKey(ProductBorrowLine, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'return_borrow_line'


class ReturnEarn(models.Model):
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirmed_date = models.DateTimeField(blank=True, null=True)
    confirmed = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    coupon_master_ids = models.TextField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cus_con_date = models.DateTimeField(blank=True, null=True)
    cus_con = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    number = models.CharField(max_length=256)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_return = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    waiting_approve_date = models.DateTimeField(blank=True, null=True)
    waiting_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'return_earn'


class ReturnEarnLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon = models.ForeignKey('SaleCoupon', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    return_field = models.ForeignKey(ReturnEarn, models.DO_NOTHING, db_column='return_id')  # Field renamed because it was a Python reserved word.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'return_earn_line'


class ReturnEarnReturnLine(models.Model):
    act_point_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    act_stamp_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    return_field = models.ForeignKey(ReturnEarn, models.DO_NOTHING, db_column='return_id')  # Field renamed because it was a Python reserved word.
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    act_amount_incentive = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_return = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'return_earn_return_line'


class Role(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'role'


class Room(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'room'


class RoomReserve(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    details = models.TextField(blank=True, null=True)
    from_time = models.CharField(max_length=256)
    request_date = models.DateField()
    room = models.ForeignKey(Room, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    to_time = models.CharField(max_length=256)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'room_reserve'


class Route(models.Model):
    carrier = models.ForeignKey(DeliveryCarrier, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date = models.DateField()
    delivery_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    delivery_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    departure_time = models.CharField(max_length=64, blank=True, null=True)
    ext_number = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    transport = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    depart_time = models.DateTimeField(blank=True, null=True)
    return_time = models.DateTimeField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'route'


class Routing(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'routing'


class RoutingLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    routing = models.ForeignKey(Routing, models.DO_NOTHING)
    sequence = models.IntegerField()
    workcenter = models.ForeignKey('Workcenter', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'routing_line'


class SaleArea(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    no = models.CharField(max_length=256)

    class Meta:
        managed = False
        db_table = 'sale_area'


class SaleChannel(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    pricelist = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_channel'


class SaleCom(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    pay_method = models.CharField(max_length=64, blank=True, null=True)
    sale_com_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    salesman = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    wht_tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    type_com = models.CharField(max_length=64, blank=True, null=True)
    actual_com = models.ForeignKey(ActualSumCom, models.DO_NOTHING, blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com'


class SaleComDataEstLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_est = models.ForeignKey('SaleComEst', models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_data_est_line'


class SaleComDataLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    invoice_date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    com_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    profit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    counter_salesman = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    before_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    reservation_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_data_line'


class SaleComEst(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    pay_method = models.CharField(max_length=64, blank=True, null=True)
    sale_com_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    confirmed_date = models.DateTimeField(blank=True, null=True)
    confirmed = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    created = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    posted_date = models.DateTimeField(blank=True, null=True)
    posted = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    voided_date = models.DateTimeField(blank=True, null=True)
    voided = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_est'


class SaleComGroupEstLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_est = models.ForeignKey(SaleComEst, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_group_est_line'


class SaleComGroupLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    period = models.CharField(max_length=256, blank=True, null=True)
    period_from = models.DateField(blank=True, null=True)
    period_to = models.DateField(blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_group_line'


class SaleComLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    base_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    inv_line_ids = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    pc_com = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    wht = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    com_est = models.ForeignKey(SaleComEst, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_line'


class SaleComOutLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    invoice_date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_out_line'


class SaleComReport(models.Model):
    company_name = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateTimeField()
    date_to = models.DateTimeField()
    salesman = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_report'


class SaleComSumEstLine(models.Model):
    com_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    com_est = models.ForeignKey(SaleComEst, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_sale = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_sum_est_line'


class SaleComSumLine(models.Model):
    com_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_condition = models.ForeignKey(CommissionCondition, models.DO_NOTHING, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_sale = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey(SaleCom, models.DO_NOTHING, blank=True, null=True)
    parent_line = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    period = models.CharField(max_length=256, blank=True, null=True)
    sale_thule = models.BooleanField(blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    salethule = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=256, blank=True, null=True)
    com_amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    count_saleman = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_sum_line'


class SaleComTargetLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    period = models.CharField(max_length=256, blank=True, null=True)
    product_brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    product_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('SaleTeamTerritory', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_target_line'


class SaleComWht(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    base_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_com_wht'


class SaleCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    description = models.TextField()
    landed_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    purchase_duty_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purchase_ship_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_cost'


class SaleCoupon(models.Model):
    active = models.BooleanField()
    code = models.CharField(max_length=256)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    expiry_date = models.DateTimeField(blank=True, null=True)
    hide_date = models.DateTimeField(blank=True, null=True)
    master = models.ForeignKey('SaleCouponMaster', models.DO_NOTHING)
    state = models.CharField(max_length=64)
    use_date = models.DateTimeField(blank=True, null=True)
    use_duration = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    invoice_relate = models.CharField(max_length=64, blank=True, null=True)
    order_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order_total_cache = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tns_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    number = models.CharField(max_length=256)
    qty_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    burn_related = models.CharField(max_length=64, blank=True, null=True)
    adjust_create_related = models.CharField(max_length=64, blank=True, null=True)
    adjust_related = models.CharField(max_length=64, blank=True, null=True)
    create_from_adjust = models.BooleanField(blank=True, null=True)
    store_incentive = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_from_transfer = models.BooleanField(blank=True, null=True)
    transfer_related = models.CharField(max_length=64, blank=True, null=True)
    related_burn = models.CharField(max_length=64, blank=True, null=True)
    create_void_related = models.CharField(max_length=64, blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    incentive_dealer = models.ForeignKey(IncentiveDealerContacts, models.DO_NOTHING, blank=True, null=True)
    contact_person = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    over_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_credit_relate = models.CharField(max_length=64, blank=True, null=True)
    credit_relate = models.CharField(max_length=64, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    over_related = models.CharField(max_length=64, blank=True, null=True)
    clear_related = models.ForeignKey(ReturnEarn, models.DO_NOTHING, db_column='clear_related', blank=True, null=True)
    clear_use_related = models.ForeignKey(ReturnEarn, models.DO_NOTHING, db_column='clear_use_related', blank=True, null=True)
    inc = models.ForeignKey(IncentiveDealerContacts, models.DO_NOTHING, blank=True, null=True)
    inc_point = models.ForeignKey(IncentiveDealerContactsPoint, models.DO_NOTHING, blank=True, null=True)
    create_from_return = models.CharField(max_length=64, blank=True, null=True)
    inc_giveaway = models.ForeignKey(IncentiveDealerContactsGive, models.DO_NOTHING, blank=True, null=True)
    is_refund = models.BooleanField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_coupon'


class SaleCouponMaster(models.Model):
    active = models.BooleanField()
    banner_image = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expiry_date = models.DateTimeField(blank=True, null=True)
    hide_date = models.DateTimeField(blank=True, null=True)
    image = models.CharField(max_length=256, blank=True, null=True)
    instructions = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    notes = models.TextField(blank=True, null=True)
    use_duration = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)
    state = models.CharField(max_length=64)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_type = models.CharField(max_length=64, blank=True, null=True)
    condition_type = models.CharField(max_length=64, blank=True, null=True)
    qty_warranty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    base_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_secret_statement = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    is_outstand = models.BooleanField(blank=True, null=True)
    active_date = models.DateTimeField(blank=True, null=True)
    active_0 = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='active_id', blank=True, null=True)  # Field renamed because of name conflict.
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    deactive_date = models.DateTimeField(blank=True, null=True)
    deactive = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    condition_show = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_coupon_master'


class SaleCouponMasterDateCon(models.Model):
    amount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_coupon_master_date_con'


class SaleCreditControl(models.Model):
    account_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_term = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    total_amt = models.FloatField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_credit_control'


class SaleEvent(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    max_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    active_id = models.TextField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    borrow = models.ForeignKey(ProductBorrow, models.DO_NOTHING, blank=True, null=True)
    pick = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_event'


class SaleFocSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cus_inv_seq = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    gi_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    sale_seq = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_foc_setting'


class SaleForecast(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Contact, models.DO_NOTHING)
    date_from = models.DateField()
    date_to = models.DateField()
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    close_date = models.DateTimeField(blank=True, null=True)
    close = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_forecast'


class SaleForecastLine(models.Model):
    actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    balance = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delivery_date = models.DateField()
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    plan_out_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2)
    plan_remain_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    production_plan = models.ForeignKey(ProductionPlan, models.DO_NOTHING, blank=True, null=True)
    sale_forecast = models.ForeignKey(SaleForecast, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    physical_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    virtual_in = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_forecast_line'


class SaleFreeGift(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    event = models.ForeignKey(SaleEvent, models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    pmt = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    prod_or_item = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reserve = models.ForeignKey('SaleReserve', models.DO_NOTHING, blank=True, null=True)
    qty_to_free = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_free_gift'


class SaleIncentiveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    promotion_name = models.CharField(max_length=256, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    total_count_qty = models.IntegerField(blank=True, null=True)
    total_qty = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    uom_name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    pending_count_qty = models.IntegerField(blank=True, null=True)
    pending_qty = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_incentive_line'


class SaleIncentiveWarrantyLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)
    promotion_name = models.CharField(max_length=256, blank=True, null=True)
    sale = models.ForeignKey('SaleOrder', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    total_count_qty = models.IntegerField(blank=True, null=True)
    total_qty = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    uom_name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_incentive_warranty_line'


class SaleLead(models.Model):
    assigned = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    city = models.CharField(max_length=256, blank=True, null=True)
    company = models.CharField(max_length=256, blank=True, null=True)
    company_0 = models.ForeignKey(Company, models.DO_NOTHING, db_column='company_id', blank=True, null=True)  # Field renamed because of name conflict.
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    employees = models.CharField(max_length=256, blank=True, null=True)
    first_name = models.CharField(max_length=256, blank=True, null=True)
    industry = models.CharField(max_length=256, blank=True, null=True)
    last_name = models.CharField(max_length=256)
    lead_source = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    province = models.CharField(max_length=256, blank=True, null=True)
    rating = models.CharField(max_length=64, blank=True, null=True)
    revenue = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    street = models.CharField(max_length=256, blank=True, null=True)
    title = models.CharField(max_length=256, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    website = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    zip = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_lead'


class SaleOpportunity(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    campaign = models.ForeignKey(MktCampaign, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_close = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    industry = models.ForeignKey(Industry, models.DO_NOTHING, blank=True, null=True)
    lead_source = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    next_step = models.CharField(max_length=256, blank=True, null=True)
    probability = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    region = models.ForeignKey(Region, models.DO_NOTHING, blank=True, null=True)
    stage = models.ForeignKey('SaleStage', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_opportunity'


class SaleOrder(models.Model):
    act_cost_amount = models.FloatField(blank=True, null=True)
    act_cost_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    act_margin_percent = models.FloatField(blank=True, null=True)
    act_profit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    act_profit_amount = models.FloatField(blank=True, null=True)
    act_profit_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    bill_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    coupon = models.ForeignKey(SaleCoupon, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    delivery_date = models.DateField(blank=True, null=True)
    delivery_slot = models.ForeignKey(DeliverySlot, models.DO_NOTHING, blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    ecom_tax_branch_no = models.CharField(max_length=256, blank=True, null=True)
    ecom_tax_no = models.CharField(max_length=256, blank=True, null=True)
    est_cost_amount = models.FloatField(blank=True, null=True)
    est_cost_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_margin_percent = models.FloatField(blank=True, null=True)
    est_profit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_profit_amount = models.FloatField(blank=True, null=True)
    est_profit_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    other_info = models.TextField(blank=True, null=True)
    pay_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    price_list = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    quot = models.ForeignKey('SaleQuot', models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sale_channel = models.ForeignKey(SaleChannel, models.DO_NOTHING, blank=True, null=True)
    seller = models.ForeignKey('Seller', models.DO_NOTHING, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_term = models.ForeignKey('ShipTerm', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64)
    team = models.ForeignKey(MfgTeam, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_subtotal_after_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    recur_inv = models.ForeignKey(RecurInv, models.DO_NOTHING, blank=True, null=True)
    est_cost_amount_conv = models.FloatField(blank=True, null=True)
    est_margin_percent_conv = models.FloatField(blank=True, null=True)
    est_profit_amount_conv = models.FloatField(blank=True, null=True)
    qty_pending_qty = models.CharField(max_length=256, blank=True, null=True)
    sale_type = models.CharField(max_length=64, blank=True, null=True)
    ship_method_list = models.TextField(blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    stamp_total_stamp = models.CharField(max_length=256, blank=True, null=True)
    qty_total_qty = models.CharField(max_length=256, blank=True, null=True)
    disc_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_percent_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sub_total_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sub_total_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    express = models.BooleanField(blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    proj_track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    project_type = models.ForeignKey(ProjectType, models.DO_NOTHING, blank=True, null=True)
    chassis = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey('ShowroomRecord', models.DO_NOTHING, blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    delivery_note = models.TextField(blank=True, null=True)
    film_type = models.CharField(max_length=64, blank=True, null=True)
    private_trans = models.ForeignKey(Contact, models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    approved2_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    address_ids = models.TextField(blank=True, null=True)
    private_ids = models.TextField(blank=True, null=True)
    point_pending_point = models.CharField(max_length=256, blank=True, null=True)
    point_total_point = models.CharField(max_length=256, blank=True, null=True)
    stamp_pending_stamp = models.CharField(max_length=256, blank=True, null=True)
    available_promotions = models.TextField(blank=True, null=True)
    approve2_date = models.DateTimeField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    credit_control_note_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    disc_total_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    due_date_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    is_qty_burn_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    over_limit_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    is_bounce = models.BooleanField(blank=True, null=True)
    is_bounce_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    job_related = models.ForeignKey(Job, models.DO_NOTHING, db_column='job_related', blank=True, null=True)
    payment_term = models.ForeignKey(PaymentTerms, models.DO_NOTHING, blank=True, null=True)
    is_adjust = models.BooleanField(blank=True, null=True)
    is_dpromotion = models.BooleanField(blank=True, null=True)
    is_over_free = models.BooleanField(blank=True, null=True)
    is_over_free_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    film_size = models.TextField(blank=True, null=True)
    search_is_gi = models.BooleanField(blank=True, null=True)
    diff_free_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact_wrt = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    foc_setting = models.ForeignKey(SaleFocSetting, models.DO_NOTHING, blank=True, null=True)
    employee_request = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    amount_free = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    point_order_point = models.CharField(max_length=256, blank=True, null=True)
    point_total_point_warranty = models.CharField(max_length=256, blank=True, null=True)
    stamp_order_stamp = models.CharField(max_length=256, blank=True, null=True)
    disc_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    done = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    search_invoice_status = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    disc_amount_from_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_percent_from_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_use_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order'


class SaleOrderCreditLine(models.Model):
    account_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit_term = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    sale_order = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    total_amt = models.FloatField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_credit_line'


class SaleOrderLine(models.Model):
    act_profit_amount = models.FloatField(blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey(ProductionOrder, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    alloc_discount_amount = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    production_plan = models.ForeignKey(ProductionPlan, models.DO_NOTHING, blank=True, null=True)
    description_eng = models.TextField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    free_qty_product = models.TextField(blank=True, null=True)
    remain_qty_product = models.TextField(blank=True, null=True)
    warranty = models.CharField(max_length=256, blank=True, null=True)
    film_setting = models.CharField(max_length=64, blank=True, null=True)
    lot_ids = models.TextField(blank=True, null=True)
    position_ids = models.TextField(blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    auto_sum = models.BooleanField(blank=True, null=True)
    is_burn = models.BooleanField(blank=True, null=True)
    unit_price_ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_diff = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount_from_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_from_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_line'


class SaleOrderLineFilmSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_line = models.ForeignKey(SaleOrderLine, models.DO_NOTHING)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_line_film_setting'


class SaleOrderLineReport(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_line_report'


class SaleOrderPromotion(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey('SalePromotion', models.DO_NOTHING)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    free_gift = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    showroom_promotion = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_promotion'


class SaleOrderVoucher(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_credit = models.BooleanField(blank=True, null=True)
    order = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    voucher_item = models.ForeignKey(FilmVoucherItem, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_order_voucher'


class SalePromotion(models.Model):
    apply_multi = models.BooleanField(blank=True, null=True)
    auto_apply = models.BooleanField(blank=True, null=True)
    buy_min_amount = models.IntegerField(blank=True, null=True)
    buy_min_qty = models.IntegerField(blank=True, null=True)
    cart_confirm_message = models.TextField(blank=True, null=True)
    cart_offer_message = models.TextField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    discount_amount_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_max_qty = models.IntegerField(blank=True, null=True)
    discount_percent_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    max_total_uses = models.IntegerField(blank=True, null=True)
    max_uses_per_customer = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64)
    max_value = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateField(blank=True, null=True)
    date = models.DateField()
    number = models.CharField(max_length=256)
    ref = models.CharField(max_length=256, blank=True, null=True)
    request_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    request_date = models.DateField(blank=True, null=True)
    total_avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    car_type = models.CharField(max_length=64, blank=True, null=True)
    is_create = models.BooleanField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateField(blank=True, null=True)
    is_sp_price = models.CharField(max_length=64, blank=True, null=True)
    so_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    shop = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    dealer_deposit_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    dealer_deposit_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    deposit_description = models.TextField(blank=True, null=True)
    tns_deposit_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tns_deposit_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tns_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    is_secret = models.BooleanField(blank=True, null=True)
    manager_approve_date = models.DateField(blank=True, null=True)
    manager_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    year = models.CharField(max_length=64, blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    discount_free = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promo_code = models.CharField(max_length=256, blank=True, null=True)
    condition_file = models.CharField(max_length=256, blank=True, null=True)
    qty_free_ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_fix = models.BooleanField(blank=True, null=True)
    is_showroom = models.BooleanField(blank=True, null=True)
    is_discount_per_line = models.BooleanField(blank=True, null=True)
    is_discount_per_line_amount = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion'


class SalePromotionApproveSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    ceo = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    file = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_approve_setting'


class SalePromotionApproveSettingLine(models.Model):
    ceo = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    setting = models.ForeignKey(SalePromotionApproveSetting, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_approve_setting_line'


class SalePromotionApproveSettingLineManager(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    line = models.ForeignKey(SalePromotionApproveSettingLine, models.DO_NOTHING)
    max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_approve_setting_line_manager'


class SalePromotionApproveSettingLineWork(models.Model):
    assist_manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    assist_max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    assist_min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lead_max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lead_min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    line = models.ForeignKey(SalePromotionApproveSettingLine, models.DO_NOTHING)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager_max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    manager_min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sale_max_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_min_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    assist_director = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    director = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    product_group_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_approve_setting_line_work'


class SalePromotionCar(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    setting_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_car'


class SalePromotionCarLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    data_select = models.CharField(max_length=64, blank=True, null=True)
    model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='type_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SalePromotionCar, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'sale_promotion_car_line'


class SalePromotionCarLinePosition(models.Model):
    car_promotion = models.ForeignKey(SalePromotionCarLine, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_car_line_position'


class SalePromotionCarPosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SalePromotionCar, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_car_position'


class SalePromotionCondition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    disc_amt_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_amt_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    position_lines = models.ForeignKey('SalePromotionConditionPosition', models.DO_NOTHING, db_column='position_lines', blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_condition'


class SalePromotionConditionPosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SalePromotionCondition, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_condition_position'


class SalePromotionSecret(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    req = models.ForeignKey(RequestPromotion, models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_promotion_secret'


class SaleQtyLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    total_qty = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    promotion_name = models.CharField(max_length=256, blank=True, null=True)
    total_count_qty = models.IntegerField(blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    uom_name = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    total_qty_convert = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_qty_line'


class SaleQuot(models.Model):
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    exp_date = models.DateTimeField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    lost_sale_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    opport = models.ForeignKey(SaleOpportunity, models.DO_NOTHING, blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    price_list = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_term = models.ForeignKey('ShipTerm', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    tax_type = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_subtotal_after_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_percent_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_cost_amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_profit_amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    retail_amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    project_type = models.ForeignKey(ProjectType, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    quot_type = models.CharField(max_length=64, blank=True, null=True)
    quot_setting = models.ForeignKey(QuotSetting, models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    subtotal_disc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    effect_date = models.DateTimeField(blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    subtitle = models.TextField(blank=True, null=True)
    title = models.TextField(blank=True, null=True)
    to = models.TextField(blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot'


class SaleQuotCarCondition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    quot = models.ForeignKey(SaleQuot, models.DO_NOTHING)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_condition'


class SaleQuotCarConditionLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarCondition, models.DO_NOTHING)
    min = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_condition_line'


class SaleQuotCarConditionLineProduct(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarCondition, models.DO_NOTHING)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_condition_line_product'


class SaleQuotCarData(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256, blank=True, null=True)
    quot = models.ForeignKey(SaleQuot, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    setting_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_data'


class SaleQuotCarDataLineCar(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarData, models.DO_NOTHING)
    model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='type_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_data_line_car'


class SaleQuotCarDataLinePosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarData, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_data_line_position'


class SaleQuotCarPromotion(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    quot = models.ForeignKey(SaleQuot, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_promotion'


class SaleQuotCarPromotionLine(models.Model):
    avg = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarPromotion, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_get = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_promotion_line'


class SaleQuotCarPromotionPosition(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleQuotCarPromotion, models.DO_NOTHING)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_car_promotion_position'


class SaleQuotCreditLine(models.Model):
    account_invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    payment_term = models.TextField(blank=True, null=True)
    sale_quot = models.ForeignKey(SaleQuot, models.DO_NOTHING, blank=True, null=True)
    total_amt = models.FloatField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_credit_line'


class SaleQuotLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    est_margin_percent_input = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    hide_sub = models.BooleanField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    quot = models.ForeignKey(SaleQuot, models.DO_NOTHING)
    retail_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    alloc_discount_amount = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    chassis_number = models.CharField(max_length=256, blank=True, null=True)
    customer_name = models.CharField(max_length=256, blank=True, null=True)
    film_setting = models.CharField(max_length=64, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    qty_to_use_around = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_use_front = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_quot_line'


class SaleReserve(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    event = models.ForeignKey(SaleEvent, models.DO_NOTHING)
    event_ids = models.TextField(blank=True, null=True)
    event_product_list = models.TextField(blank=True, null=True)
    free_product_list = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    phone = models.CharField(max_length=256, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    car_regis = models.CharField(max_length=256, blank=True, null=True)
    disc_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    disc_per_amt = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    old_film = models.CharField(max_length=64, blank=True, null=True)
    payment_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    sub_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sub_total_after = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tel = models.CharField(max_length=256, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand', blank=True, null=True)
    car_gen = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_gen', blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    address2 = models.TextField(blank=True, null=True)
    install_date = models.DateTimeField(blank=True, null=True)
    deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    showroom_type = models.CharField(max_length=64, blank=True, null=True)
    type_ids = models.TextField(blank=True, null=True)
    showroom_ids = models.TextField(blank=True, null=True)
    deposit_detail = models.CharField(max_length=256, blank=True, null=True)
    is_paid = models.BooleanField(blank=True, null=True)
    act_depost = models.BooleanField(blank=True, null=True)
    act_deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)
    deposit_related = models.ForeignKey(AccountPayment, models.DO_NOTHING, db_column='deposit_related', blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    credit_ref = models.TextField(blank=True, null=True)
    is_credit = models.BooleanField(blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    is_choose_disc = models.BooleanField(blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    outstanding = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    notify_text = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    discount_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    free_over_approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    is_choose_free = models.BooleanField(blank=True, null=True)
    is_other = models.BooleanField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    deposit_ids = models.TextField(blank=True, null=True)
    contact_invoice = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    deposit_search = models.BooleanField(blank=True, null=True)
    invoice_search = models.BooleanField(blank=True, null=True)
    paid_search = models.BooleanField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    approved = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirmed_date = models.DateTimeField(blank=True, null=True)
    confirmed = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    disapproved_date = models.DateTimeField(blank=True, null=True)
    disapproved = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    done = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    planned_date = models.DateTimeField(blank=True, null=True)
    planned = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    field_id = models.IntegerField(db_column='\ufeffid', blank=True, null=True)  # Field renamed to remove unsuitable characters. Field renamed because it started with '_'.
    contact_address = models.TextField(blank=True, null=True)
    mobile = models.CharField(max_length=256, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    customer_bank = models.TextField(blank=True, null=True)
    is_not_cash = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_reserve'


class SaleReserveDeposit(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rsv = models.ForeignKey(SaleReserve, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    payment_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING)
    deposit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_reserve_deposit'


class SaleReserveLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(SaleReserve, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    product_rel = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    product_rel_ids = models.TextField(blank=True, null=True)
    field_id = models.IntegerField(db_column='\ufeffid', blank=True, null=True)  # Field renamed to remove unsuitable characters. Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'sale_reserve_line'


class SaleReservePromotion(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    sale_reserve = models.ForeignKey(SaleReserve, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_reserve_promotion'


class SaleReturn(models.Model):
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total_discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    bill_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    coupon = models.ForeignKey(SaleCoupon, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    date = models.DateField()
    delivery_date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    orig_sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)
    pay_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    payment_terms = models.TextField(blank=True, null=True)
    price_list = models.ForeignKey(PriceList, models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.ForeignKey('Sequence', models.DO_NOTHING, blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    ship_term = models.ForeignKey('ShipTerm', models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    tax_type = models.CharField(max_length=64)
    team = models.ForeignKey(MfgTeam, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_return'


class SaleReturnLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField()
    discount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(SaleReturn, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    return_type = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    ship_method = models.ForeignKey('ShipMethod', models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_return_line'


class SaleStage(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_stage'


class SaleTarget(models.Model):
    amount_target = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    prod_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    qty_target = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    prev_date_from = models.DateField(blank=True, null=True)
    prev_date_to = models.DateField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target'


class SaleTargetAllArea(models.Model):
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    sale_area = models.ForeignKey(SaleArea, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    update_date = models.DateTimeField(blank=True, null=True)
    update = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_all_area'


class SaleTargetAllAreaLine(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    leader = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    manager = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetAllArea, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    target_shop = models.ForeignKey('SaleTargetArea', models.DO_NOTHING, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    target_area = models.ForeignKey('SaleTargetArea', models.DO_NOTHING, blank=True, null=True)
    sale_area = models.ForeignKey(SaleArea, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_all_area_line'


class SaleTargetAllAreaLineLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleTargetAllAreaLine, models.DO_NOTHING, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_all_area_line_line'


class SaleTargetAllAreaLineTotal(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetAllArea, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_all_area_line_total'


class SaleTargetArea(models.Model):
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    update_date = models.DateTimeField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    update = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    sale_area = models.ForeignKey(SaleArea, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    dealer_ids = models.TextField(blank=True, null=True)
    selected_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_area'


class SaleTargetAreaLine(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetArea, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    target_shop = models.ForeignKey('SaleTargetShop', models.DO_NOTHING, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_area_line'


class SaleTargetAreaLineLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleTargetAreaLine, models.DO_NOTHING, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_area_line_line'


class SaleTargetAreaLineTotal(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetArea, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_area_line_total'


class SaleTargetLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    target = models.ForeignKey(SaleTarget, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_line'


class SaleTargetLineTarget(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleTargetLine, models.DO_NOTHING)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sales = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_line_target'


class SaleTargetLineTargetCustomer(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    group = models.ForeignKey(SaleTargetLineTarget, models.DO_NOTHING)
    ratio = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sales = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_line_target_customer'


class SaleTargetNewLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    new_target = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    sales = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    target = models.ForeignKey(SaleTarget, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_new_line'


class SaleTargetShop(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    update_date = models.DateTimeField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    update = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    sale_area = models.ForeignKey(SaleArea, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_shop'


class SaleTargetShopLine(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetShop, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_shop_line'


class SaleTargetShopLineTotal(models.Model):
    bray_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lamina_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_ppf_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    llumar_prime_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale_target = models.ForeignKey(SaleTargetShop, models.DO_NOTHING)
    sonic_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sum_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    thule_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    tribos_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    xtra_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_target_shop_line_total'


class SaleTeamTerritory(models.Model):
    create_date = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approved_date = models.DateTimeField(blank=True, null=True)
    count = models.TextField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    default_approve_level = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING)
    display_approved_by = models.TextField(blank=True, null=True)
    reason = models.CharField(max_length=256, blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    team = models.ForeignKey('Team', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_team_territory'


class SaleTeamTerritoryLeaderLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    rate = models.DecimalField(max_digits=16, decimal_places=2)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    sequence = models.IntegerField(blank=True, null=True)
    territory = models.ForeignKey(SaleTeamTerritory, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_team_territory_leader_line'


class SaleTeamTerritoryLine(models.Model):
    bill_collect = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    leader = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    manager = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    territory = models.ForeignKey(SaleTeamTerritory, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    seq = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_team_territory_line'


class Script(models.Model):
    code = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    language = models.CharField(max_length=64)
    module = models.ForeignKey(Module, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'script'


class SelectMmprplRplProductGroupIdRpslPromotionId(models.Model):
    request_promotion_line_id = models.IntegerField()
    product_id = models.IntegerField()
    product_group_id = models.IntegerField(blank=True, null=True)
    promotion_id = models.IntegerField(blank=True, null=True)
    promotionname = models.CharField(max_length=256, blank=True, null=True)
    productgroup = models.CharField(max_length=256, blank=True, null=True)
    productname = models.CharField(max_length=256, blank=True, null=True)
    contact_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'select \r\n\tmmprpl.*,\r\n\trpl.product_group_id,\r\n\trpsl.promotion_id'


class SelectComInvoice(models.Model):
    categ = models.ForeignKey(ProductCateg, models.DO_NOTHING)
    com = models.ForeignKey(SaleCom, models.DO_NOTHING)
    company_name = models.CharField(max_length=64)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    salesman = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'select_com_invoice'


class SelectComInvoiceLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    com = models.ForeignKey(SelectComInvoice, models.DO_NOTHING)
    com_pc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    inv_line_ids = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'select_com_invoice_line'


class SelectCompany(models.Model):
    company = models.CharField(max_length=64)
    company_0 = models.ForeignKey(Company, models.DO_NOTHING, db_column='company_id', blank=True, null=True)  # Field renamed because of name conflict.
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'select_company'


class SelectReconcileSuspentVat(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    not_reconcile_suspent_vat = models.BooleanField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'select_reconcile_suspent_vat'


class Seller(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'seller'


class SendWizard(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    custom_template = models.ForeignKey(ReportTemplate, models.DO_NOTHING, blank=True, null=True)
    custom_template_type = models.CharField(max_length=256, blank=True, null=True)
    email_contact_field = models.CharField(max_length=256, blank=True, null=True)
    email_template = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    out_format = models.CharField(max_length=64)
    print_id = models.IntegerField()
    print_model = models.CharField(max_length=256)
    template = models.CharField(max_length=256, blank=True, null=True)
    template_format = models.CharField(max_length=256, blank=True, null=True)
    template_method = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'send_wizard'


class Sequence(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    padding = models.IntegerField(blank=True, null=True)
    prefix = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    desciption = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sequence'


class SequenceRunning(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    next = models.IntegerField()
    prefix = models.CharField(max_length=256, blank=True, null=True)
    sequence = models.ForeignKey(Sequence, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sequence_running'


class ServerInfo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'server_info'


class ServiceAddInfomation(models.Model):
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    update_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    update_date = models.DateTimeField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_created = models.BooleanField(blank=True, null=True)
    address = models.CharField(max_length=256, blank=True, null=True)
    age = models.CharField(max_length=256, blank=True, null=True)
    area_film = models.CharField(max_length=64, blank=True, null=True)
    area_film_0 = models.ForeignKey(AreaFilm, models.DO_NOTHING, db_column='area_film_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, blank=True, null=True)
    cont_ids = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    film_code = models.CharField(max_length=256, blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    license_plate_bk = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    phone2 = models.CharField(max_length=256, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    prod_ids = models.TextField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    receive_date = models.DateField(blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    sex = models.ForeignKey('Sex', models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    vin = models.CharField(max_length=256, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_add_infomation'


class ServiceAddInfomationLine(models.Model):
    address = models.CharField(max_length=256, blank=True, null=True)
    age = models.CharField(max_length=256, blank=True, null=True)
    area_film = models.CharField(max_length=64, blank=True, null=True)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, blank=True, null=True)
    cont_ids = models.TextField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    film_code = models.CharField(max_length=256, blank=True, null=True)
    item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    order = models.ForeignKey(ServiceAddInfomation, models.DO_NOTHING)
    phone = models.CharField(max_length=256, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    prod_ids = models.TextField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    remark = models.CharField(max_length=256, blank=True, null=True)
    sex = models.CharField(max_length=64, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    vin = models.CharField(max_length=256, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sex_0 = models.ForeignKey('Sex', models.DO_NOTHING, db_column='sex_id', blank=True, null=True)  # Field renamed because of name conflict.
    area_film_0 = models.ForeignKey(AreaFilm, models.DO_NOTHING, db_column='area_film_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'service_add_infomation_line'


class ServiceApplication(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    industry = models.ForeignKey(Industry, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_application'


class ServiceContract(models.Model):
    amount_period = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    incl_labor = models.BooleanField(blank=True, null=True)
    incl_other = models.BooleanField(blank=True, null=True)
    incl_part = models.BooleanField(blank=True, null=True)
    invoice_period = models.CharField(max_length=64, blank=True, null=True)
    next_invoice_date = models.DateField(blank=True, null=True)
    num_periods = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    number = models.CharField(max_length=256)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    start_date = models.DateField()
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    first_visit_date = models.DateField(blank=True, null=True)
    first_service_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract'


class ServiceContractCreateQuot(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract_create_quot'


class ServiceContractCreateQuotLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contract_quot = models.ForeignKey(ServiceContractCreateQuot, models.DO_NOTHING)
    create_quot = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    est_counter = models.IntegerField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    last_counter = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    last_service_date = models.DateField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract_create_quot_line'


class ServiceContractLine(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    amount_labor = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_other = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_part = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contract = models.ForeignKey(ServiceContract, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    service_item = models.ForeignKey('ServiceItem', models.DO_NOTHING, blank=True, null=True)
    template = models.ForeignKey('ServiceContractTemplate', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract_line'


class ServiceContractTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract_template'


class ServiceContractTemplateJob(models.Model):
    counter = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    template = models.ForeignKey(ServiceContractTemplate, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_contract_template_job'


class ServiceCreateQuot(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_create_quot'


class ServiceItem(models.Model):
    application = models.ForeignKey(ServiceApplication, models.DO_NOTHING, blank=True, null=True)
    arrival_date = models.DateField(blank=True, null=True)
    arrival_inspection_date = models.DateField(blank=True, null=True)
    commission_date = models.DateField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    cost_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    est_counter_per_year = models.IntegerField(blank=True, null=True)
    industry = models.ForeignKey(Industry, models.DO_NOTHING, blank=True, null=True)
    last_counter = models.IntegerField(blank=True, null=True)
    last_counter_date = models.DateField(blank=True, null=True)
    location = models.CharField(max_length=256, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    sale_date = models.DateField(blank=True, null=True)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    serial_no = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    production_order = models.ForeignKey(ProductionOrder, models.DO_NOTHING, blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    area_film = models.CharField(max_length=64, blank=True, null=True)
    cust_address = models.CharField(max_length=256, blank=True, null=True)
    cust_age = models.CharField(max_length=256, blank=True, null=True)
    cust_brand = models.CharField(max_length=256, blank=True, null=True)
    cust_car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='cust_car_type', blank=True, null=True)
    cust_date = models.DateField(blank=True, null=True)
    cust_license_plate = models.CharField(max_length=256, blank=True, null=True)
    cust_name = models.CharField(max_length=256, blank=True, null=True)
    cust_phone = models.CharField(max_length=256, blank=True, null=True)
    cust_sex = models.CharField(max_length=64, blank=True, null=True)
    cust_showroom = models.CharField(max_length=256, blank=True, null=True)
    cust_vin = models.CharField(max_length=256, blank=True, null=True)
    film_code = models.CharField(max_length=256, blank=True, null=True)
    front_brand = models.CharField(max_length=256, blank=True, null=True)
    front_date = models.DateField(blank=True, null=True)
    front_license_plate = models.CharField(max_length=256, blank=True, null=True)
    front_name = models.CharField(max_length=256, blank=True, null=True)
    front_showroom = models.CharField(max_length=256, blank=True, null=True)
    front_vin = models.CharField(max_length=256, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    barcode_image = models.CharField(max_length=256, blank=True, null=True)
    barcode_path = models.CharField(max_length=256, blank=True, null=True)
    is_barcode = models.CharField(max_length=64, blank=True, null=True)
    cust_showroom_0 = models.ForeignKey(Contact, models.DO_NOTHING, db_column='cust_showroom_id', blank=True, null=True)  # Field renamed because of name conflict.
    related2_id = models.CharField(max_length=64, blank=True, null=True)
    cust_car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='cust_car_brand', blank=True, null=True)
    cust_car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='cust_car_model', blank=True, null=True)
    front_car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='front_car_brand', blank=True, null=True)
    front_car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='front_car_model', blank=True, null=True)
    cust_car_brand_0 = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='cust_car_brand_id', blank=True, null=True)  # Field renamed because of name conflict.
    cust_car_model_0 = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='cust_car_model_id', blank=True, null=True)  # Field renamed because of name conflict.
    cust_car_type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='cust_car_type_id', blank=True, null=True)  # Field renamed because of name conflict.
    cust_country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    cust_district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    cust_postal_code = models.CharField(max_length=256, blank=True, null=True)
    cust_province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    cust_subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    front_car_brand_0 = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='front_car_brand_id', blank=True, null=True)  # Field renamed because of name conflict.
    front_car_model_0 = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='front_car_model_id', blank=True, null=True)  # Field renamed because of name conflict.
    cust_sex_0 = models.ForeignKey('Sex', models.DO_NOTHING, db_column='cust_sex_id', blank=True, null=True)  # Field renamed because of name conflict.
    area_film_0 = models.ForeignKey(AreaFilm, models.DO_NOTHING, db_column='area_film_id', blank=True, null=True)  # Field renamed because of name conflict.
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    regis_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    regis_date = models.DateTimeField(blank=True, null=True)
    update_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    update_date = models.DateTimeField(blank=True, null=True)
    contact_user = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    warranty_type = models.CharField(max_length=64)
    reason = models.TextField(blank=True, null=True)
    cust_license_plate_bk = models.CharField(max_length=256, blank=True, null=True)
    cust_phone2 = models.CharField(max_length=256, blank=True, null=True)
    receive_date = models.DateField(blank=True, null=True)
    alert_date_from = models.DateField(blank=True, null=True)
    alert_date_to = models.DateField(blank=True, null=True)
    contact_alert = models.CharField(max_length=64, blank=True, null=True)
    is_done = models.BooleanField(blank=True, null=True)
    act_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    state_contact_alert = models.CharField(max_length=256, blank=True, null=True)
    inv_note = models.CharField(max_length=256, blank=True, null=True)
    sale_note = models.CharField(max_length=256, blank=True, null=True)
    gen_date = models.DateTimeField(blank=True, null=True)
    claim_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    claim_date = models.DateTimeField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    active_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    active_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_item'


class ServiceRegister(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    number = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    regis_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    regis_date = models.DateTimeField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_register'


class ServiceRegisterLine(models.Model):
    address = models.CharField(max_length=256, blank=True, null=True)
    age = models.CharField(max_length=256, blank=True, null=True)
    brand = models.CharField(max_length=256, blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    is_condition = models.CharField(max_length=64, blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    reg = models.ForeignKey(ServiceRegister, models.DO_NOTHING)
    select_approve = models.CharField(max_length=64, blank=True, null=True)
    sex = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand', blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_brand_0 = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_model_0 = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type_id', blank=True, null=True)  # Field renamed because of name conflict.
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey('Subdistrict', models.DO_NOTHING, blank=True, null=True)
    sex_0 = models.ForeignKey('Sex', models.DO_NOTHING, db_column='sex_id', blank=True, null=True)  # Field renamed because of name conflict.
    receive_date = models.DateField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_register_line'


class ServiceResource(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    skill_level = models.ForeignKey('SkillLevel', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    technician_type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'service_resource'


class ServiceResourceAlloc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING)
    time_start = models.DateTimeField()
    time_stop = models.DateTimeField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    progress = models.IntegerField(blank=True, null=True)
    showroom = models.ForeignKey('ShowroomRecord', models.DO_NOTHING, blank=True, null=True)
    duration_hr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_resource_alloc'


class ServiceResourceAllocDepend(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delay = models.IntegerField(blank=True, null=True)
    prev_resource_alloc = models.ForeignKey(ServiceResourceAlloc, models.DO_NOTHING)
    resource_alloc = models.ForeignKey(ServiceResourceAlloc, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_resource_alloc_depend'


class ServiceTeam(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_team'


class ServiceTeamLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    per_incentive = models.DecimalField(max_digits=16, decimal_places=2)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING)
    team = models.ForeignKey(ServiceTeam, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_team_line'


class ServiceType(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_showroom_record = models.BooleanField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    showroom_type = models.CharField(max_length=64)
    is_claim = models.BooleanField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_return = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_rsv = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    is_done = models.BooleanField(blank=True, null=True)
    request_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    return_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_type'


class Settings(models.Model):
    account_payable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_receivable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    act_duty_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    act_ship_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    advance_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    anon_profile = models.ForeignKey(Profile, models.DO_NOTHING, blank=True, null=True)
    ar_revenue = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    bank_charge = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    branch_no = models.CharField(max_length=256, blank=True, null=True)
    check_pkg = models.BooleanField(blank=True, null=True)
    cipher_text = models.CharField(max_length=256, blank=True, null=True)
    company_type = models.ForeignKey(CompanyType, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency_gain = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    currency_loss = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    date_format = models.CharField(max_length=256, blank=True, null=True)
    est_duty_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    est_ship_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    fax = models.CharField(max_length=256, blank=True, null=True)
    general_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    input_report = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    is_block = models.BooleanField(blank=True, null=True)
    landed_cost_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    landed_cost_variance_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    legal_name = models.CharField(max_length=256, blank=True, null=True)
    lock_date = models.DateField(blank=True, null=True)
    logo = models.CharField(max_length=256, blank=True, null=True)
    lot_expiry_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    menu_icon = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    nf_email = models.CharField(max_length=256, blank=True, null=True)
    notif_end = models.DateField(blank=True, null=True)
    notif_msg = models.CharField(max_length=256, blank=True, null=True)
    notif_start = models.DateField(blank=True, null=True)
    output_report = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    package = models.CharField(max_length=256, blank=True, null=True)
    pay_in_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    pay_out_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    pick_in_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    pick_internal_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    pick_out_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    prevent_validate_neg_stock = models.BooleanField(blank=True, null=True)
    product_borrow_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    production_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    production_waiting_suborder = models.BooleanField(blank=True, null=True)
    purchase_copy_invoice = models.BooleanField(blank=True, null=True)
    purchase_copy_picking = models.BooleanField(blank=True, null=True)
    purchase_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    retained_earnings_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    root_url = models.CharField(max_length=256, blank=True, null=True)
    rounding_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_copy_invoice = models.BooleanField(blank=True, null=True)
    sale_copy_picking = models.BooleanField(blank=True, null=True)
    sale_copy_production = models.BooleanField(blank=True, null=True)
    sale_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    stock_cost_auto_compute = models.BooleanField(blank=True, null=True)
    stock_cost_mode = models.CharField(max_length=64, blank=True, null=True)
    stock_count_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    tax_payable = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_receivable = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    transform_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    unpaid_claim = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    use_buddhist_date = models.BooleanField(blank=True, null=True)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    version = models.CharField(max_length=256, blank=True, null=True)
    website = models.CharField(max_length=256, blank=True, null=True)
    wht3_report = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    wht53_report = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    work_day_sat = models.BooleanField(blank=True, null=True)
    work_day_sun = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year_end_day = models.CharField(max_length=64, blank=True, null=True)
    year_end_month = models.CharField(max_length=64, blank=True, null=True)
    fg_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    issue_policy = models.CharField(max_length=64, blank=True, null=True)
    pd_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    receive_policy = models.CharField(max_length=64, blank=True, null=True)
    rm_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    addons = models.TextField(blank=True, null=True)
    cust_type = models.CharField(max_length=256, blank=True, null=True)
    error_message = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    coa_header = models.TextField(blank=True, null=True)
    limit_company = models.IntegerField(blank=True, null=True)
    limit_product = models.IntegerField(blank=True, null=True)
    limit_user = models.IntegerField(blank=True, null=True)
    allow_excess_invoice_amount = models.BooleanField(blank=True, null=True)
    allow_excess_invoice_qty = models.BooleanField(blank=True, null=True)
    suspend_reconcile_vat = models.BooleanField(blank=True, null=True)
    rent_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    auto_combine_po = models.BooleanField(blank=True, null=True)
    auto_create_lot = models.BooleanField(blank=True, null=True)
    leadtime_formular = models.BooleanField(blank=True, null=True)
    qc_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    qc_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    qc_repair_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    qc_scrap_location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    require_semi_fg_qc = models.BooleanField(blank=True, null=True)
    rent_daily_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    petty_cash = models.ForeignKey(AccountAccount, models.DO_NOTHING, db_column='petty_cash', blank=True, null=True)
    petty_cash_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    sale_order_auto_complete = models.BooleanField(blank=True, null=True)
    require_fg_qc = models.BooleanField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    showroom_record = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    job_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    cus_foc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    expense_foc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cheque_on_hand_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cheque_pay_in_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    claim_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    cash_com_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    cash_inc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    pooling_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    retain_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    retain_inc_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    sale_inc_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    salesman_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    claim_copy_cn = models.BooleanField(blank=True, null=True)
    claim_copy_gr = models.BooleanField(blank=True, null=True)
    gain_loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    loss_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    fixes_asset_sell_tax_rate = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    adjust_transfer_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    product_borrow_showroom_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    account_burn_credit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_burn_debit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_burn_over_credit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    account_burn_over_debit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    over_coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, db_column='over_coupon_master', blank=True, null=True)
    charge_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    min_credit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_credit_message = models.TextField(blank=True, null=True)
    over_credit_message = models.TextField(blank=True, null=True)
    landed_cost_variance_return = models.ForeignKey(AccountAccount, models.DO_NOTHING, db_column='landed_cost_variance_return', blank=True, null=True)
    pick_return_in_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    pick_return_internal_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    pick_return_out_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    adjust_shipping_cost = models.ForeignKey(LmAdjustment, models.DO_NOTHING, blank=True, null=True)
    promotion_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    burn_payment_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    burn_payment_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    over_burn_acc = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    over_burn_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    adjust_wht_amount = models.ForeignKey(LmAdjustment, models.DO_NOTHING, blank=True, null=True)
    claim_dealer_copy_gi = models.BooleanField(blank=True, null=True)
    claim_dealer_copy_inv_foc = models.BooleanField(blank=True, null=True)
    claim_dealer_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    sale_rsv_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_rsv_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    sale_rsv_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    sale_rsv_memo = models.TextField(blank=True, null=True)
    tax_claim_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    tax_claim_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    dealer_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    tns_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    tns_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    email_temp_po_local = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    email_temp_po_over = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    email_temp_pr_non_trade = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    email_temp_pr_trade = models.ForeignKey(EmailTemplate, models.DO_NOTHING, blank=True, null=True)
    inv_note = models.CharField(max_length=256, blank=True, null=True)
    event_borrow_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    event_budget_item = models.ForeignKey(AccountBudgetItem, models.DO_NOTHING, blank=True, null=True)
    gi_event_journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    sale_deposit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    pay_cheque_on_hand_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    tax_unclaim_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    voucher_account_credit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    voucher_account_debit = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    voucher_credit_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    voucher_reason_credit_note = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)
    inc_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    log_lock_date = models.DateTimeField(blank=True, null=True)
    log_lock_date_0 = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='log_lock_date_id', blank=True, null=True)  # Field renamed because of name conflict.
    log_unlock_date = models.DateTimeField(blank=True, null=True)
    log_unlock_date_0 = models.ForeignKey(BaseUser, models.DO_NOTHING, db_column='log_unlock_date_id', blank=True, null=True)  # Field renamed because of name conflict.
    sale_rsv_uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    time_create_stock = models.TimeField(blank=True, null=True)
    sale_com_credit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_debit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_est_credit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_est_debit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    advance_clear_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    advance_clear_refund_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    advance_payment_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    expense_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    petty_cash_payment_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    sale_com_actual_credit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_com_actual_debit_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    petty_cash_payment_diff_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    conv_cheque_pay_in_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    bounced_cheque_sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    cancel_cheque_sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    expired_cheque_sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    pay_in_cheque_sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    credit_card_journal = models.ForeignKey(AccountJournal, models.DO_NOTHING, blank=True, null=True)
    sale_rsv_building_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, db_column='sale_rsv_building_account', blank=True, null=True)
    sale_rsv_car_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, db_column='sale_rsv_car_account', blank=True, null=True)
    sale_rsv_invoice_description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'settings'


class Sex(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sex'


class ShareAccess(models.Model):
    active = models.BooleanField(blank=True, null=True)
    condition = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    default_access = models.CharField(max_length=64)
    description = models.TextField(blank=True, null=True)
    filter_type = models.CharField(max_length=64, blank=True, null=True)
    grant_parent = models.BooleanField(blank=True, null=True)
    model = models.ForeignKey(Model, models.DO_NOTHING)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, blank=True, null=True)
    select_profile = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'share_access'


class ShareRecord(models.Model):
    access = models.CharField(max_length=64)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'share_record'


class ShipMethod(models.Model):
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    ship_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    carrier = models.ForeignKey(DeliveryCarrier, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    ship_paid = models.CharField(max_length=64, blank=True, null=True)
    express = models.BooleanField(blank=True, null=True)
    shipping_oversea = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ship_method'


class ShipMethodLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    max_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ship = models.ForeignKey(ShipMethod, models.DO_NOTHING)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ship_method_line'


class ShipRate(models.Model):
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    method = models.ForeignKey(ShipMethod, models.DO_NOTHING)
    min_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    sequence = models.CharField(max_length=256)
    ship_price = models.DecimalField(max_digits=16, decimal_places=2)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ship_rate'


class ShipTerm(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ship_term'


class ShowroomRecord(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Contact, models.DO_NOTHING)
    date = models.DateField()
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    stock_type = models.CharField(max_length=64, blank=True, null=True)
    project_type = models.ForeignKey(ProjectType, models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    is_created = models.BooleanField(blank=True, null=True)
    type = models.CharField(max_length=64)
    ref_order = models.CharField(max_length=256, blank=True, null=True)
    showroom_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    job_stock_type = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reserve = models.ForeignKey(SaleReserve, models.DO_NOTHING, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'showroom_record'


class ShowroomRecordLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    chassis_number = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer_name = models.CharField(max_length=256, blank=True, null=True)
    install_date = models.DateField(blank=True, null=True)
    item = models.CharField(max_length=256, blank=True, null=True)
    lines = models.ForeignKey(ShowroomRecord, models.DO_NOTHING, db_column='lines', blank=True, null=True)
    lstate = models.CharField(max_length=64, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    product_id_around = models.ForeignKey(Product, models.DO_NOTHING, db_column='product_id_around', blank=True, null=True)
    product_id_front = models.ForeignKey(Product, models.DO_NOTHING, db_column='product_id_front', blank=True, null=True)
    qty_around = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_front = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    technician = models.ForeignKey(ServiceResource, models.DO_NOTHING, blank=True, null=True)
    film_setting = models.CharField(max_length=64, blank=True, null=True)
    is_tns = models.BooleanField(blank=True, null=True)
    qty_to_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    allocs_ids = models.TextField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    technician_0 = models.CharField(db_column='technician', max_length=64, blank=True, null=True)  # Field renamed because of name conflict.
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    qty_to_use_around = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_to_use_front = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    record = models.ForeignKey(ShowroomRecord, models.DO_NOTHING, blank=True, null=True)
    lot_ids = models.TextField(blank=True, null=True)
    model_ids = models.TextField(blank=True, null=True)
    position_ids = models.TextField(blank=True, null=True)
    product_quot_ids = models.TextField(blank=True, null=True)
    job_line = models.ForeignKey(JobLine, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    record_state = models.CharField(max_length=64, blank=True, null=True)
    install_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'showroom_record_line'


class ShowroomRecordLineFilmSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    showroom_line = models.ForeignKey(ShowroomRecordLine, models.DO_NOTHING)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.ForeignKey('TypeToUse', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    loss = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'showroom_record_line_film_setting'


class ShowroomRecordLineTechnician(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    showroom_line = models.ForeignKey(ShowroomRecordLine, models.DO_NOTHING)
    technician = models.ForeignKey(ServiceResource, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'showroom_record_line_technician'


class SkillLevel(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    level = models.IntegerField()
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'skill_level'


class SmsAccount(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    password = models.CharField(max_length=256)
    sender = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    username = models.CharField(max_length=256)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sms_account'


class SmsMessage(models.Model):
    account = models.ForeignKey(SmsAccount, models.DO_NOTHING, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    phone = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sms_message'


class SplitProduction(models.Model):
    actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING)
    order = models.ForeignKey(ProductionOrder, models.DO_NOTHING)
    order_to = models.ForeignKey(ProductionOrder, models.DO_NOTHING)
    order_to_list = models.TextField(blank=True, null=True)
    planned_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    product_list = models.TextField(blank=True, null=True)
    ratio_method = models.CharField(max_length=64)
    remark = models.CharField(max_length=256, blank=True, null=True)
    split_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    split_qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    team = models.ForeignKey(MfgTeam, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    split_order_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'split_production'


class SplitProductionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ratio_method = models.CharField(max_length=256, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    team = models.ForeignKey(MfgTeam, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(SplitProduction, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'split_production_line'


class SsoQuits(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    month = models.DateField(blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sso_quits'


class SsoQuitsLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    id_no = models.CharField(max_length=256, blank=True, null=True)
    reason = models.CharField(max_length=64, blank=True, null=True)
    resign_date = models.DateField(blank=True, null=True)
    sso_quits = models.ForeignKey(SsoQuits, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sso_quits_line'


class SsoRegist(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)
    month = models.DateField(blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sso_regist'


class SsoRegistLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    hire_date = models.DateField(blank=True, null=True)
    id_no = models.CharField(max_length=256, blank=True, null=True)
    old_company = models.CharField(max_length=256, blank=True, null=True)
    other_old_company = models.CharField(max_length=256, blank=True, null=True)
    sso_regist = models.ForeignKey(SsoRegist, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sso_regist_line'


class StateOperation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    sub_name = models.ForeignKey('self', models.DO_NOTHING, db_column='sub_name', blank=True, null=True)
    time_end = models.CharField(max_length=5, blank=True, null=True)
    time_start = models.CharField(max_length=5, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'state_operation'


class StockBalance(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    below_min = models.BooleanField(blank=True, null=True)
    container = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    last_change = models.DateTimeField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    min_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_phys = models.DecimalField(max_digits=16, decimal_places=2)
    qty_virt = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING)
    qty_virt_only = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_virt_in = models.DecimalField(max_digits=16, decimal_places=2)
    qty_virt_out = models.DecimalField(max_digits=16, decimal_places=2)

    class Meta:
        managed = False
        db_table = 'stock_balance'
        unique_together = (('product', 'location', 'lot', 'container'),)


class StockBarcode(models.Model):
    container_from = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey('StockContainer', models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    gross_weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    station = models.ForeignKey(BarcodeStation, models.DO_NOTHING)
    type = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_barcode'


class StockComputeCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_compute_cost'


class StockConsign(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    order_type = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_consign'


class StockConsignPeriod(models.Model):
    consign = models.ForeignKey(StockConsign, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    purchase = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_consign_period'


class StockContainer(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_container'


class StockCount(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    description = models.CharField(max_length=256, blank=True, null=True)
    journal = models.ForeignKey('StockJournal', models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey('StockLocation', models.DO_NOTHING)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_report = models.BooleanField(blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    validate_date = models.DateTimeField(blank=True, null=True)
    validate = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_count'


class StockCountLine(models.Model):
    bin_location = models.CharField(max_length=256, blank=True, null=True)
    count = models.ForeignKey(StockCount, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey('StockLot', models.DO_NOTHING, blank=True, null=True)
    new_qty = models.DecimalField(max_digits=16, decimal_places=2)
    prev_cost_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    prev_qty = models.DecimalField(max_digits=16, decimal_places=2)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_count_line'


class StockJournal(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_from = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    qc_temp = models.ForeignKey(QcTemplate, models.DO_NOTHING, blank=True, null=True)
    location_return = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_rsv = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    check_job = models.CharField(max_length=64, blank=True, null=True)
    is_job = models.BooleanField(blank=True, null=True)
    location_claim = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_transfer = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)
    location_cn = models.ForeignKey('StockLocation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_journal'


class StockLocation(models.Model):
    account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    code = models.CharField(max_length=256)
    company2 = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    allow_lot = models.BooleanField(blank=True, null=True)
    account_after_inv = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    unique_lot = models.BooleanField(blank=True, null=True)
    is_box = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_location'


class StockLot(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    expiry_date = models.DateField(blank=True, null=True)
    length = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    number = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    received_date = models.DateTimeField(blank=True, null=True)
    service_item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    width = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    active = models.BooleanField(blank=True, null=True)
    barcode_image = models.CharField(max_length=256, blank=True, null=True)
    barcode_path = models.CharField(max_length=256, blank=True, null=True)
    is_barcode = models.CharField(max_length=64, blank=True, null=True)
    is_gen = models.BooleanField(blank=True, null=True)
    is_gen_use = models.BooleanField(blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    is_import = models.BooleanField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    hide_lot = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_lot'


class StockMove(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    container_from = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    container_to = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    cost_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    cost_fixed = models.BooleanField(blank=True, null=True)
    cost_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    cost_price_cur = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    journal = models.ForeignKey(StockJournal, models.DO_NOTHING, blank=True, null=True)
    location_from = models.ForeignKey(StockLocation, models.DO_NOTHING)
    location_to = models.ForeignKey(StockLocation, models.DO_NOTHING)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    num_packages = models.IntegerField(blank=True, null=True)
    number = models.CharField(max_length=256)
    packaging = models.ForeignKey('StockPackaging', models.DO_NOTHING, blank=True, null=True)
    period = models.ForeignKey('StockPeriod', models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey('StockPicking', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    serial_no = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    stock_count = models.ForeignKey(StockCount, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    track2 = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    cost_amount_cur = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    purch_line = models.ForeignKey(PurchaseOrderLine, models.DO_NOTHING, blank=True, null=True)
    sale_line = models.ForeignKey(SaleOrderLine, models.DO_NOTHING, blank=True, null=True)
    qty_do = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    note = models.CharField(max_length=256, blank=True, null=True)
    qty_pj = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    so_free_line = models.ForeignKey(FreeGiftLine, models.DO_NOTHING, blank=True, null=True)
    job_line = models.ForeignKey(JobLine, models.DO_NOTHING, blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    borrow_line = models.ForeignKey(ProductBorrowLine, models.DO_NOTHING, blank=True, null=True)
    warranty = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_move'


class StockOrder(models.Model):
    confirm_orders = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_order'


class StockOrderLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    order = models.ForeignKey(StockOrder, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_order_line'


class StockOrderProduction(models.Model):
    confirm_orders = models.BooleanField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_order_production'


class StockOrderProductionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    fg_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    fg_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey(StockOrderProduction, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=2)
    rm_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    sale_forecast_date = models.DateField(blank=True, null=True)
    supplier = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_order_production_line'


class StockOrderpoint(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING)
    max_qty = models.DecimalField(max_digits=16, decimal_places=2)
    max_qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    min_qty = models.DecimalField(max_digits=16, decimal_places=2)
    min_qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_orderpoint'


class StockPackaging(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    height = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    length = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    name = models.CharField(max_length=256)
    weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    width = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_packaging'


class StockPeriod(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    post_date = models.DateTimeField(blank=True, null=True)
    post = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_period'


class StockPicking(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    container = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    currency_rate = models.DecimalField(max_digits=16, decimal_places=8, blank=True, null=True)
    date = models.DateTimeField()
    delivery_slot = models.ForeignKey(DeliverySlot, models.DO_NOTHING, blank=True, null=True)
    done_approved_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    gross_weight = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    journal = models.ForeignKey(StockJournal, models.DO_NOTHING)
    messenger = models.ForeignKey(Messenger, models.DO_NOTHING, blank=True, null=True)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    pending_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    ref = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_cost = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    ship_method = models.ForeignKey(ShipMethod, models.DO_NOTHING, blank=True, null=True)
    ship_pay_by = models.CharField(max_length=64, blank=True, null=True)
    ship_tracking = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    production_finished_good_inspection = models.ForeignKey(ProductionFinishedGoodInspection, models.DO_NOTHING, blank=True, null=True)
    production_raw_material_inspection = models.ForeignKey(ProductionRawMaterialInspection, models.DO_NOTHING, blank=True, null=True)
    validation_date = models.DateTimeField(blank=True, null=True)
    doc_date = models.DateTimeField(blank=True, null=True)
    production_check_return = models.BooleanField(blank=True, null=True)
    temp = models.ForeignKey(QcTemplate, models.DO_NOTHING, blank=True, null=True)
    state_route = models.CharField(max_length=64, blank=True, null=True)
    contact_wrt = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    express = models.BooleanField(blank=True, null=True)
    project_related = models.CharField(max_length=64, blank=True, null=True)
    showroom_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    to_delivery = models.BooleanField(blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    private_trans = models.ForeignKey(Contact, models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    address_ids = models.TextField(blank=True, null=True)
    private_ids = models.TextField(blank=True, null=True)
    is_return = models.BooleanField(blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    delivery_note = models.TextField(blank=True, null=True)
    film_size = models.TextField(blank=True, null=True)
    back_order_picking = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    other_info = models.TextField(blank=True, null=True)
    diff_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    process_copy_warranty = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_picking'
        unique_together = (('company', 'type', 'number'),)


class StockTransform(models.Model):
    container = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    journal = models.ForeignKey(StockJournal, models.DO_NOTHING, blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    auto_gen_lot = models.BooleanField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    create_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    reject_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    req_approve_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    req_approve_date = models.DateTimeField(blank=True, null=True)
    void_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    done_by = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    done_date = models.DateTimeField(blank=True, null=True)
    reason_reject = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    reason_reject_text = models.TextField(blank=True, null=True)
    type_return = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_transform'


class StockTransformSource(models.Model):
    container = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    transform = models.ForeignKey(StockTransform, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING)
    move = models.ForeignKey(StockMove, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_transform_source'


class StockTransformTarget(models.Model):
    container = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    qty2 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    transform = models.ForeignKey(StockTransform, models.DO_NOTHING, blank=True, null=True)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING)
    move = models.ForeignKey(StockMove, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stock_transform_target'


class StoreType(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'store_type'


class Subdistrict(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'subdistrict'


class Tag(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.ForeignKey('TagType', models.DO_NOTHING, blank=True, null=True)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tag'


class TagType(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64)
    uuid = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tag_type'


class Task(models.Model):
    comments = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_created = models.DateTimeField()
    date_start = models.DateField()
    description = models.TextField(blank=True, null=True)
    done_date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    duration = models.IntegerField()
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256)
    progress = models.IntegerField(blank=True, null=True)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    milestone = models.ForeignKey(ProjectMilestone, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    task_list = models.ForeignKey('TaskList', models.DO_NOTHING, blank=True, null=True)
    actual_duration = models.IntegerField(blank=True, null=True)
    date_end = models.DateField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    duration_type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'task'


class TaskDepend(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delay = models.IntegerField(blank=True, null=True)
    prev_task = models.ForeignKey(Task, models.DO_NOTHING)
    task = models.ForeignKey(Task, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'task_depend'


class TaskList(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_created = models.DateField()
    milestone = models.ForeignKey(ProjectMilestone, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'task_list'


class TaskListTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'task_list_template'


class TaskTemplate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.IntegerField()
    job_template = models.ForeignKey(JobTemplate, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    start_after = models.IntegerField(blank=True, null=True)
    task_list_template = models.ForeignKey(TaskListTemplate, models.DO_NOTHING)
    title = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'task_template'


class TaxFiling(models.Model):
    additional = models.BooleanField(blank=True, null=True)
    additional_time = models.CharField(max_length=64, blank=True, null=True)
    amount_addon = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approvers = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    balance_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date_from = models.DateField()
    date_to = models.DateField()
    doc_date = models.DateField(blank=True, null=True)
    filed_date = models.DateTimeField(blank=True, null=True)
    filer = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    filing_date = models.DateField(blank=True, null=True)
    month = models.CharField(max_length=64)
    name = models.CharField(max_length=256, blank=True, null=True)
    number = models.CharField(max_length=256)
    owner = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    position = models.CharField(max_length=256, blank=True, null=True)
    show_doc_date = models.BooleanField(blank=True, null=True)
    show_name = models.BooleanField(blank=True, null=True)
    show_number_10 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    show_number_13 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    show_number_14 = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    state = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    year = models.CharField(max_length=64, blank=True, null=True)
    draft_date = models.DateTimeField(blank=True, null=True)
    draft = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tax_filing'


class TaxFilingLine(models.Model):
    amount_base = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    debit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    detail = models.TextField(blank=True, null=True)
    filing = models.ForeignKey(TaxFiling, models.DO_NOTHING)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING, blank=True, null=True)
    move_line = models.ForeignKey(AccountMoveLine, models.DO_NOTHING, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=256, blank=True, null=True)
    tax_comp = models.ForeignKey(AccountTaxComponent, models.DO_NOTHING, blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=64)
    wht_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    doc_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tax_filing_line'


class Team(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'team'


class Template(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    module = models.ForeignKey(Module, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    template = models.TextField(blank=True, null=True)
    theme = models.ForeignKey('Theme', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'template'


class TemplateReportCashFlow(models.Model):
    company = models.ForeignKey(Company, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    method = models.CharField(max_length=64)
    name = models.CharField(max_length=256, blank=True, null=True)
    show_net_income = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'template_report_cash_flow'


class TemplateReportCashFlowLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sequence = models.CharField(max_length=256, blank=True, null=True)
    sub_type = models.CharField(max_length=64)
    template = models.ForeignKey(TemplateReportCashFlow, models.DO_NOTHING)
    template_name = models.ForeignKey(AccountReportTemplate, models.DO_NOTHING)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'template_report_cash_flow_line'


class Theme(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'theme'


class TimeSheet(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING)
    state = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'time_sheet'


class ToBeImport(models.Model):
    categ_id = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dbname = models.CharField(max_length=256, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=256, blank=True, null=True)
    step = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    coa_header = models.TextField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    year_end_day = models.CharField(max_length=64, blank=True, null=True)
    year_end_month = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import'


class ToBeImportBusiness(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    name = models.CharField(max_length=256)
    select = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    type_id = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_business'


class ToBeImportCateg(models.Model):
    categ_id = models.IntegerField()
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_categ'


class ToBeImportCoa(models.Model):
    bank_name = models.CharField(max_length=256, blank=True, null=True)
    bank_no = models.CharField(max_length=256, blank=True, null=True)
    bank_type = models.CharField(max_length=64, blank=True, null=True)
    code = models.CharField(max_length=256)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    creditcard_no = models.CharField(max_length=256, blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING)
    description = models.TextField(blank=True, null=True)
    enable_payment = models.BooleanField(blank=True, null=True)
    fixed_asset_type = models.ForeignKey(AccountFixedAssetType, models.DO_NOTHING, blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    name = models.CharField(max_length=256)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    require_contact = models.BooleanField(blank=True, null=True)
    require_tax_no = models.BooleanField(blank=True, null=True)
    require_track = models.BooleanField(blank=True, null=True)
    require_track2 = models.BooleanField(blank=True, null=True)
    tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_coa'


class ToBeImportDemo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    field_account = models.CharField(max_length=256, blank=True, null=True)
    file = models.CharField(max_length=256)
    force_import = models.BooleanField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    model_name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    to_import = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    auto_create_je = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_demo'


class ToBeImportGen(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    field_account = models.CharField(max_length=256, blank=True, null=True)
    file = models.CharField(max_length=256)
    force_import = models.BooleanField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    model_name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    to_import = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_gen'


class ToBeImportLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    file = models.CharField(max_length=256)
    force_import = models.BooleanField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    model_name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    to_import = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_line'


class ToBeImportPkg(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    field_account = models.CharField(max_length=256, blank=True, null=True)
    file = models.CharField(max_length=256)
    force_import = models.BooleanField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    model_name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    to_import = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_pkg'


class ToBeImportTrans(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    field_account = models.CharField(max_length=256, blank=True, null=True)
    file = models.CharField(max_length=256)
    force_import = models.BooleanField(blank=True, null=True)
    import_field = models.ForeignKey(ToBeImport, models.DO_NOTHING, db_column='import_id')  # Field renamed because it was a Python reserved word.
    model_name = models.CharField(max_length=256)
    note = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    to_import = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    auto_create_je = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'to_be_import_trans'


class TransferCoupon(models.Model):
    approve_date = models.DateTimeField(blank=True, null=True)
    approve = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    contact_from = models.ForeignKey(Contact, models.DO_NOTHING)
    contact_to = models.ForeignKey(Contact, models.DO_NOTHING)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cus_con_date = models.DateTimeField(blank=True, null=True)
    cus_con = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    number = models.CharField(max_length=256)
    promotion_ids = models.TextField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    submit_date = models.DateTimeField(blank=True, null=True)
    submit = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    void_date = models.DateTimeField(blank=True, null=True)
    void = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    trans_reason = models.TextField(blank=True, null=True)
    trans_reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='trans_reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transfer_coupon'


class TransferCouponLine(models.Model):
    coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    coupon_master_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive_actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    incentive_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING, blank=True, null=True)
    stamp_actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    transfer = models.ForeignKey(TransferCoupon, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    incentive_qty_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    stamp_qty_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transfer_coupon_line'


class TransformValidate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    transform = models.ForeignKey(StockTransform, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transform_validate'


class TransformValidateLine(models.Model):
    container_to = models.ForeignKey(StockContainer, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    transform = models.ForeignKey(TransformValidate, models.DO_NOTHING)
    transform_type = models.CharField(max_length=64)
    uom = models.ForeignKey('Uom', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transform_validate_line'


class Translation(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lang = models.ForeignKey(Language, models.DO_NOTHING)
    original = models.CharField(max_length=256)
    translation = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    action = models.CharField(max_length=256, blank=True, null=True)
    main_menu = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'translation'


class TranslationField(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    field = models.CharField(max_length=256)
    lang = models.CharField(max_length=64)
    model = models.CharField(max_length=256)
    rec_id = models.IntegerField()
    translation = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'translation_field'


class TrialLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    day_limit = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    package = models.ForeignKey(Package, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'trial_line'


class TypeToUse(models.Model):
    code = models.CharField(max_length=256)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'type_to_use'


class UiLog(models.Model):
    action = models.CharField(max_length=256, blank=True, null=True)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    details = models.TextField(blank=True, null=True)
    ip_addr = models.CharField(max_length=256, blank=True, null=True)
    menu = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ui_log'


class Uom(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    ratio = models.DecimalField(max_digits=16, decimal_places=9)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_box = models.BooleanField(blank=True, null=True)
    eng_name = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'uom'


class UpdateDb(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'update_db'


class UpdateModel(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'update_model'


class UpdateUi(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'update_ui'


class UserGroup(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_group'


class UserPref(models.Model):
    confirm_new_password = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    email = models.CharField(max_length=256, blank=True, null=True)
    is_change_password = models.BooleanField(blank=True, null=True)
    mobile = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    new_password = models.CharField(max_length=256, blank=True, null=True)
    old_password = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_pref'


class Version(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'version'


class View(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    layout = models.TextField()
    model = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'view'


class ViewLayout(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    inherit = models.CharField(max_length=256, blank=True, null=True)
    layout = models.TextField(blank=True, null=True)
    model = models.ForeignKey(Model, models.DO_NOTHING, blank=True, null=True)
    module = models.ForeignKey(Module, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'view_layout'


class VoidCouponLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_master = models.ForeignKey(SaleCouponMaster, models.DO_NOTHING, blank=True, null=True)
    coupon_type = models.CharField(max_length=64, blank=True, null=True)
    create = models.ForeignKey(CreateVoidCoupon, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    act_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    act_qty_p = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    coupon_ids = models.TextField(blank=True, null=True)
    inv_ids = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    sale_ids = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'void_coupon_line'


class Voucher(models.Model):
    confirm_date = models.DateTimeField(blank=True, null=True)
    confirm = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    number = models.CharField(max_length=256)
    state = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'voucher'


class VoucherItem(models.Model):
    burn_related = models.CharField(max_length=64, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    voucher = models.ForeignKey(Voucher, models.DO_NOTHING)
    voucher_item = models.ForeignKey('VoucherLine', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    coupon_used = models.TextField(blank=True, null=True)
    qty_coupon = models.ForeignKey(SaleCoupon, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'voucher_item'


class VoucherLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=256)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)
    voucher = models.ForeignKey(Voucher, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty_per_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'voucher_line'


class Warranty(models.Model):
    add_warranty = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    inv_list = models.TextField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    lot_list = models.TextField(blank=True, null=True)
    number = models.CharField(max_length=256)
    prod_list = models.TextField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    reason = models.CharField(max_length=256)
    reason_reject = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    approve_date = models.DateTimeField(blank=True, null=True)
    approve_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    create_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    reject_date = models.DateTimeField(blank=True, null=True)
    reject_user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'warranty'


class WarrantyLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    reason = models.TextField()
    warranty = models.ForeignKey(Warranty, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    wrt = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'warranty_line'


class Website(models.Model):
    account_receivable = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    auto_create_account = models.BooleanField(blank=True, null=True)
    bank_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    contact_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ga_script = models.TextField(blank=True, null=True)
    invoice_flag = models.BooleanField(blank=True, null=True)
    invoice_template = models.ForeignKey(ReportTemplate, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    news_categ = models.ForeignKey(ContactCateg, models.DO_NOTHING, blank=True, null=True)
    parent_categ = models.ForeignKey(ProductCateg, models.DO_NOTHING, blank=True, null=True)
    parent_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    payment_slip_template = models.ForeignKey(ReportTemplate, models.DO_NOTHING, blank=True, null=True)
    paypal_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    paysbuy_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    preview_doc_categ = models.ForeignKey(DocumentCateg, models.DO_NOTHING, blank=True, null=True)
    sale_account = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    sale_channel = models.ForeignKey(SaleChannel, models.DO_NOTHING, blank=True, null=True)
    sale_tax = models.ForeignKey(AccountTaxRate, models.DO_NOTHING, blank=True, null=True)
    scb_method = models.ForeignKey(PaymentMethod, models.DO_NOTHING, blank=True, null=True)
    ship_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    target_list = models.ForeignKey(MktTargetList, models.DO_NOTHING, blank=True, null=True)
    theme = models.ForeignKey(Theme, models.DO_NOTHING, blank=True, null=True)
    url = models.CharField(max_length=256, blank=True, null=True)
    user_profile = models.ForeignKey(Profile, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'website'


class WebsiteSetting(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256)
    value = models.TextField(blank=True, null=True)
    website = models.ForeignKey(Website, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'website_setting'


class WizardAccountAdjustTax(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_account_adjust_tax'


class WizardAddAccount(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    company = models.ForeignKey(Company, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey(Currency, models.DO_NOTHING, blank=True, null=True)
    except_name = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    parent = models.ForeignKey(AccountAccount, models.DO_NOTHING, blank=True, null=True)
    template = models.ForeignKey(AccountReportTemplate, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_account'


class WizardAddFilmVoucher(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    film_voucher_ids = models.TextField(blank=True, null=True)
    film_voucher_item = models.ForeignKey(FilmVoucherItem, models.DO_NOTHING)
    order = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_film_voucher'


class WizardAddIncentive(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING)
    dealer_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    tns_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    total_pay = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_charge = models.BooleanField(blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    promotion_ids = models.TextField(blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    dealer_ids = models.TextField(blank=True, null=True)
    is_paid = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive'


class WizardAddIncentiveCar(models.Model):
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive = models.ForeignKey(WizardAddIncentive, models.DO_NOTHING, blank=True, null=True)
    incentive_point = models.ForeignKey('WizardAddIncentivePoint', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    incentive_give = models.ForeignKey('WizardAddIncentiveGive', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_car'


class WizardAddIncentiveGive(models.Model):
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING)
    dealer_ids = models.TextField(blank=True, null=True)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    promotion_ids = models.TextField(blank=True, null=True)
    sum_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_give'


class WizardAddIncentiveGivePersons(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(WizardAddIncentiveGive, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_give_persons'


class WizardAddIncentiveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    wizard_give = models.ForeignKey(WizardAddIncentiveGive, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardAddIncentive, models.DO_NOTHING, blank=True, null=True)
    wizard_point = models.ForeignKey('WizardAddIncentivePoint', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_line'


class WizardAddIncentivePersons(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(WizardAddIncentive, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    percent = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    remark_person = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_persons'


class WizardAddIncentivePoint(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dealer = models.ForeignKey(Contact, models.DO_NOTHING)
    order = models.ForeignKey(Incentive, models.DO_NOTHING)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    promotion_ids = models.TextField(blank=True, null=True)
    sum_point = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    dealer_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_point'


class WizardAddIncentivePointPersons(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(WizardAddIncentivePoint, models.DO_NOTHING)
    point = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_incentive_point_persons'


class WizardAddInfomation(models.Model):
    address = models.CharField(max_length=256, blank=True, null=True)
    age = models.CharField(max_length=256, blank=True, null=True)
    area_film = models.CharField(max_length=64, blank=True, null=True)
    brand = models.CharField(max_length=256, blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    film_code = models.CharField(max_length=256, blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    list_item = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    reg = models.ForeignKey(ServiceRegister, models.DO_NOTHING)
    remark = models.TextField(blank=True, null=True)
    sex = models.CharField(max_length=64, blank=True, null=True)
    showroom = models.CharField(max_length=256, blank=True, null=True)
    vin = models.CharField(max_length=256, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    showroom_0 = models.ForeignKey(Contact, models.DO_NOTHING, db_column='showroom_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand', blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_brand_0 = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_model_0 = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type_id', blank=True, null=True)  # Field renamed because of name conflict.
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey(Subdistrict, models.DO_NOTHING, blank=True, null=True)
    sex_0 = models.ForeignKey(Sex, models.DO_NOTHING, db_column='sex_id', blank=True, null=True)  # Field renamed because of name conflict.
    area_film_0 = models.ForeignKey(AreaFilm, models.DO_NOTHING, db_column='area_film_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wizard_add_infomation'


class WizardAddInfomationLine(models.Model):
    address = models.CharField(max_length=256, blank=True, null=True)
    age = models.CharField(max_length=256, blank=True, null=True)
    area_film = models.CharField(max_length=64, blank=True, null=True)
    brand = models.CharField(max_length=256, blank=True, null=True)
    car_type = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    film_code = models.CharField(max_length=256, blank=True, null=True)
    is_pass = models.CharField(max_length=64, blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    license_plate = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    order = models.ForeignKey(WizardAddInfomation, models.DO_NOTHING)
    phone = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)
    sex = models.CharField(max_length=64, blank=True, null=True)
    showroom = models.CharField(max_length=256, blank=True, null=True)
    vin = models.CharField(max_length=256, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    showroom_0 = models.ForeignKey(Contact, models.DO_NOTHING, db_column='showroom_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_brand = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand', blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model', blank=True, null=True)
    car_brand_0 = models.ForeignKey(CarBrand, models.DO_NOTHING, db_column='car_brand_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_model_0 = models.ForeignKey(CarModel, models.DO_NOTHING, db_column='car_model_id', blank=True, null=True)  # Field renamed because of name conflict.
    car_type_0 = models.ForeignKey(CarType, models.DO_NOTHING, db_column='car_type_id', blank=True, null=True)  # Field renamed because of name conflict.
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey(Subdistrict, models.DO_NOTHING, blank=True, null=True)
    sex_0 = models.ForeignKey(Sex, models.DO_NOTHING, db_column='sex_id', blank=True, null=True)  # Field renamed because of name conflict.
    area_film_0 = models.ForeignKey(AreaFilm, models.DO_NOTHING, db_column='area_film_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wizard_add_infomation_line'


class WizardAddLot(models.Model):
    barcode = models.TextField(blank=True, null=True)
    barcode_0 = models.ForeignKey(LmBarcodeTransfer, models.DO_NOTHING, db_column='barcode_id')  # Field renamed because of name conflict.
    barcode_product = models.CharField(max_length=256, blank=True, null=True)
    count = models.IntegerField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    temp = models.ForeignKey(QcTemplate, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    check_gen = models.CharField(max_length=64, blank=True, null=True)
    is_gen = models.BooleanField(blank=True, null=True)
    qty_stock = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    qty_gen = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_lot'


class WizardAddPettyCash(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    petty_cash = models.ForeignKey(PettyCash, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_petty_cash'


class WizardAddProduct(models.Model):
    brand = models.ForeignKey(ProductBrand, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    sale_type = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_product'


class WizardAddRequestPromotion(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    contacts = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive = models.ForeignKey(Incentive, models.DO_NOTHING)
    request = models.ForeignKey(RequestPromotion, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_request_promotion'


class WizardAddSpecific(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    request = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_specific'


class WizardAddSpecificLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardAddSpecific, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_add_specific_line'


class WizardAdjustCheque(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    state_dummy = models.CharField(max_length=64, blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    state = models.CharField(max_length=256, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wizard_adjust_cheque'


class WizardAdjustChequeContact(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contact_id_new = models.ForeignKey(Contact, models.DO_NOTHING, db_column='contact_id_new', blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    wizard = models.ForeignKey(WizardAdjustCheque, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_cheque_contact'


class WizardAdjustChequeLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bank = models.ForeignKey(Bank, models.DO_NOTHING, blank=True, null=True)
    branch = models.CharField(max_length=256, blank=True, null=True)
    cheque_book_ids = models.TextField(blank=True, null=True)
    cheque_book_line = models.ForeignKey(LmChequeBookLine, models.DO_NOTHING, blank=True, null=True)
    cheque_date = models.DateField(blank=True, null=True)
    cheque_number = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line_pay_cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardAdjustCheque, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_cheque_line'


class WizardAdjustChequeReason(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_issue = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_cheque_reason'


class WizardAdjustPromotion(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_fix = models.BooleanField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_promotion'


class WizardAdjustRejectReason(models.Model):
    adjust = models.ForeignKey(AdjustCoupon, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason = models.TextField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id')  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wizard_adjust_reject_reason'


class WizardAdjustTaxNo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pay_type = models.CharField(max_length=64, blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_tax_no'


class WizardAdjustTaxNoLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    pay_line = models.ForeignKey(AccountPaymentLine, models.DO_NOTHING, blank=True, null=True)
    tax_date = models.DateField(blank=True, null=True)
    tax_no = models.CharField(max_length=256, blank=True, null=True)
    wizard = models.ForeignKey(WizardAdjustTaxNo, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_tax_no_line'


class WizardAdjustTaxRate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    tax_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_adjust_tax_rate'


class WizardBurnQty(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cumu_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    product_ids = models.TextField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING, blank=True, null=True)
    promotion_ids = models.TextField(blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    qty_to_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    refund = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amt_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_amt_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_per_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_per_order = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    film_voucher_ids = models.TextField(blank=True, null=True)
    voucher_ids = models.TextField(blank=True, null=True)
    is_disc_order = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty'


class WizardBurnQtyDiscount(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line = models.ForeignKey(SaleOrderLine, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    select = models.BooleanField(blank=True, null=True)
    wizard = models.ForeignKey(WizardBurnQty, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    discount_amt_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    discount_per_item = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    so_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty_discount'


class WizardBurnQtyLine(models.Model):
    coupon = models.ForeignKey(SaleCoupon, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    wizard = models.ForeignKey(WizardBurnQty, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    qty_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    qty_use = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty_line'


class WizardBurnQtyProduct(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    to_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardBurnQty, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty_product'


class WizardBurnQtyVoucher(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    to_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    voucher = models.ForeignKey(VoucherLine, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardBurnQty, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty_voucher'


class WizardBurnQtyVoucherFilm(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    film_voucher = models.ForeignKey(FilmVoucherLine, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    to_burn = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    wizard = models.ForeignKey(WizardBurnQty, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_qty_voucher_film'


class WizardBurnReject(models.Model):
    burn = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_reject'


class WizardBurnRequestType(models.Model):
    burn_req = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    over_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_burn_request_type'


class WizardCheckPinVoid(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    pincode = models.CharField(max_length=256, blank=True, null=True)
    related_id = models.CharField(max_length=64)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    method = models.CharField(max_length=256, blank=True, null=True)
    type = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_check_pin_void'


class WizardChequeDate(models.Model):
    cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    method = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_cheque_date'


class WizardCopySpecific(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group_ids = models.TextField(blank=True, null=True)
    request = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_specific'


class WizardCopySpecificLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    product_group = models.ForeignKey(ProductGroup, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardCopySpecific, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_specific_line'


class WizardCopyToBorrow(models.Model):
    borrow_type = models.CharField(max_length=64)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    employee = models.ForeignKey(HrEmployee, models.DO_NOTHING)
    event = models.ForeignKey(SaleEvent, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_borrow'


class WizardCopyToJob(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING)
    service_type = models.ForeignKey(ServiceType, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    service_type_list = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_job'


class WizardCopyToProductionPlan(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    number = models.CharField(max_length=256, blank=True, null=True)
    sale_forecast = models.ForeignKey(SaleForecast, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_production_plan'


class WizardCopyToProductionPlanLine(models.Model):
    actual_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    delivery_date = models.DateField()
    description = models.TextField(blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING)
    plan_out_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    plan_qty = models.DecimalField(max_digits=16, decimal_places=2)
    plan_remain_qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    priority = models.CharField(max_length=64, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    sale_forecast_line = models.ForeignKey(SaleForecastLine, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    wizard_copy_to_pp = models.ForeignKey(WizardCopyToProductionPlan, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_production_plan_line'


class WizardCopyToServiceItem(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contact_wrt = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    picking = models.ForeignKey(StockPicking, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_contact = models.CharField(max_length=64, blank=True, null=True)
    warranty_type = models.CharField(max_length=64, blank=True, null=True)
    showroom_contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    is_end_user = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_service_item'


class WizardCopyToServiceItemLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(WizardCopyToServiceItem, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    move = models.ForeignKey(StockMove, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_copy_to_service_item_line'


class WizardCreateContact(models.Model):
    address = models.CharField(max_length=256, blank=True, null=True)
    address_type = models.CharField(max_length=64, blank=True, null=True)
    contact_type = models.CharField(max_length=64)
    country = models.ForeignKey(Country, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    customer = models.BooleanField(blank=True, null=True)
    district = models.ForeignKey(District, models.DO_NOTHING, blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING)
    name = models.CharField(max_length=256, blank=True, null=True)
    phone = models.CharField(max_length=256, blank=True, null=True)
    postal_code = models.CharField(max_length=256, blank=True, null=True)
    province = models.ForeignKey(Province, models.DO_NOTHING, blank=True, null=True)
    subdistrict = models.ForeignKey(Subdistrict, models.DO_NOTHING, blank=True, null=True)
    supplier = models.BooleanField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_create_contact'


class WizardCreateVoidRejectReason(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    cv = models.ForeignKey(CreateVoidCoupon, models.DO_NOTHING)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_create_void_reject_reason'


class WizardDeleteCheckPinVoid(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    method = models.CharField(max_length=256, blank=True, null=True)
    method_ids = models.TextField(blank=True, null=True)
    model = models.CharField(max_length=256, blank=True, null=True)
    pincode = models.CharField(max_length=256, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_delete_check_pin_void'


class WizardDepositLine(models.Model):
    alloc = models.ForeignKey(AccountDepositAlloc, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_deposit_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    deposit = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_deposit_line'


class WizardDistributeTrackCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_distribute_track_cost'


class WizardDistributeTrackCostLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    track_from = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track_to = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    wizard_distribute_track_cost = models.ForeignKey(WizardDistributeTrackCost, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_distribute_track_cost_line'


class WizardDoneProject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    text = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_done_project'


class WizardEditChequeNumber(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_edit_cheque_number'


class WizardEditChequeNumberLine(models.Model):
    cheque_number = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    edit_number = models.CharField(max_length=256, blank=True, null=True)
    line = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardEditChequeNumber, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    cheque_date = models.DateField(blank=True, null=True)
    edit_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_edit_cheque_number_line'


class WizardExpenseAlloc(models.Model):
    amount_alloc = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_remain = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_expense_alloc'


class WizardExpenseAllocLine(models.Model):
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING)
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    wiz = models.ForeignKey(WizardExpenseAlloc, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_expense_alloc_line'


class WizardGenBill(models.Model):
    bill_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contact_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    due_date = models.DateField(blank=True, null=True)
    place = models.CharField(max_length=64)
    salesman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    type_collector = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    json_total = models.TextField(blank=True, null=True)
    text_total = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_bill'


class WizardGenBillLine(models.Model):
    amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_due = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    due_date = models.DateField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardGenBill, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    bill_user = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sale_man = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_bill_line'


class WizardGenCommission(models.Model):
    com_setting = models.ForeignKey(CommissionSettings, models.DO_NOTHING)
    com_type = models.CharField(max_length=64, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_commission'


class WizardGenCommissionLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey(SaleTeamTerritory, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardGenCommission, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_commission_line'


class WizardGenKpi(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    date_from = models.DateField()
    date_to = models.DateField()
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_kpi'


class WizardGenKpiLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    department = models.ForeignKey(HrDepartment, models.DO_NOTHING, blank=True, null=True)
    saleman = models.ForeignKey(HrEmployee, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey(SaleTeamTerritory, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardGenKpi, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_gen_kpi_line'


class WizardGetUser(models.Model):
    burn_req = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contact_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_get_user'


class WizardIncentiveCopyToInvoice(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive = models.ForeignKey(IncentiveWarranty, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'wizard_incentive_copy_to_invoice'


class WizardIncentiveCopyToInvoiceLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    incentive_line = models.TextField()
    order = models.ForeignKey(WizardIncentiveCopyToInvoice, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_incentive_copy_to_invoice_line'


class WizardManualUseFilmVoucher(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason = models.TextField()
    sale = models.ForeignKey(SaleOrder, models.DO_NOTHING, blank=True, null=True)
    voucher_item = models.ForeignKey(FilmVoucherItem, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_manual_use_film_voucher'


class WizardOweUser(models.Model):
    burn_req = models.ForeignKey(BurnRequest, models.DO_NOTHING)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    contact_ids = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_owe_user'


class WizardPaymentSequence(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    payment = models.ForeignKey(AccountPayment, models.DO_NOTHING)
    sequence = models.ForeignKey(Sequence, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_payment_sequence'


class WizardPickingAdjustInvoice(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey(StockPicking, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_picking_adjust_invoice'


class WizardProductionPrint(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    custom_template = models.ForeignKey(ReportTemplate, models.DO_NOTHING, blank=True, null=True)
    custom_template_type = models.CharField(max_length=256, blank=True, null=True)
    multi_page = models.BooleanField(blank=True, null=True)
    out_format = models.CharField(max_length=64)
    print_ids = models.TextField()
    print_model = models.CharField(max_length=256)
    template = models.CharField(max_length=256, blank=True, null=True)
    template_format = models.CharField(max_length=256, blank=True, null=True)
    template_method = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_production_print'


class WizardProductionReceive(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey(ProductionOrder, models.DO_NOTHING)
    qty_due = models.DecimalField(max_digits=16, decimal_places=6)
    qty_planned = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    qty_received = models.DecimalField(max_digits=16, decimal_places=6, blank=True, null=True)
    required_lot = models.BooleanField(blank=True, null=True)
    state = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_production_receive'


class WizardProductionReceiveLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty_received = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    wizard = models.ForeignKey(WizardProductionReceive, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_production_receive_line'


class WizardPromotionReject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    reason = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reason_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_promotion_reject'


class WizardReadIdCard(models.Model):
    address = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    reserve = models.ForeignKey(SaleReserve, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_read_id_card'


class WizardReason(models.Model):
    cheque = models.ForeignKey(AccountCheque, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason = models.ForeignKey(ReasonIssue, models.DO_NOTHING, blank=True, null=True)
    reason_text = models.TextField(blank=True, null=True)
    receive_new_type = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    send_type = models.CharField(max_length=256, blank=True, null=True)
    advance_clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING, blank=True, null=True)
    expense = models.ForeignKey(HrExpense, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    borrow = models.ForeignKey(ProductBorrow, models.DO_NOTHING, blank=True, null=True)
    is_borrow = models.BooleanField(blank=True, null=True)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    transform = models.ForeignKey(StockTransform, models.DO_NOTHING, blank=True, null=True)
    wiz_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reason'


class WizardReasonReject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason_reject = models.ForeignKey(ReasonReject, models.DO_NOTHING)
    request = models.ForeignKey(PurchaseRequest, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    advance = models.ForeignKey(AccountAdvance, models.DO_NOTHING, blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    advance_clear = models.ForeignKey(AccountAdvanceClear, models.DO_NOTHING, blank=True, null=True)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    type_reason = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reason_reject'


class WizardReasonRejectPo(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    order = models.ForeignKey(PurchaseOrder, models.DO_NOTHING, blank=True, null=True)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    reason_reject = models.ForeignKey(ReasonReject, models.DO_NOTHING)
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reason_reject_po'


class WizardReasonRejectProject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    reason_reject = models.ForeignKey(ReasonCode, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reason_reject_project'


class WizardRegister(models.Model):
    barcode = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    reg = models.ForeignKey(ServiceRegister, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_manual = models.CharField(max_length=64, blank=True, null=True)
    list_item = models.TextField(blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    receive_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_register'


class WizardRegisterLine(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    is_pass = models.CharField(max_length=64, blank=True, null=True)
    item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(WizardRegister, models.DO_NOTHING)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    warranty_exp_date = models.DateField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    showroom = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    car_model = models.ForeignKey(CarModel, models.DO_NOTHING, blank=True, null=True)
    receive_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_register_line'


class WizardRejectReasonAll(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    method = models.CharField(max_length=256, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    related_id = models.CharField(max_length=64)
    type = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reject_reason_all'


class WizardRentalDistributeTrackCost(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_rental_distribute_track_cost'


class WizardRentalDistributeTrackCostLine(models.Model):
    amount_subtotal = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    track_from = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track_to = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    wizard_rental_distribute_track_cost = models.ForeignKey(WizardRentalDistributeTrackCost, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_rental_distribute_track_cost_line'


class WizardRepeatInvoice(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    interval = models.CharField(max_length=64, blank=True, null=True)
    interval_month = models.IntegerField(blank=True, null=True)
    interval_week = models.CharField(max_length=64, blank=True, null=True)
    invoice_day = models.IntegerField(blank=True, null=True)
    invoice_id = models.CharField(max_length=256, blank=True, null=True)
    start_date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_repeat_invoice'


class WizardRequestPromotionContact(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    req = models.ForeignKey(RequestPromotion, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_request_promotion_contact'


class WizardReverse(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    lc = models.ForeignKey(LandedCost, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reverse'


class WizardReverseJv(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    journal = models.ForeignKey(AccountJournal, models.DO_NOTHING)
    move = models.ForeignKey(AccountMove, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_reverse_jv'


class WizardRsvPickDate(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    ids = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_rsv_pick_date'


class WizardSalePromotionReject(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    promotion = models.ForeignKey(SalePromotion, models.DO_NOTHING)
    reason = models.TextField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id', blank=True, null=True)  # Field renamed because of name conflict.
    reason_ids = models.TextField(blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_sale_promotion_reject'


class WizardServiceResourceAlloc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING, blank=True, null=True)
    time_start = models.DateTimeField()
    time_stop = models.DateTimeField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey(ServiceTeam, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64)
    is_overlap = models.BooleanField(blank=True, null=True)
    duration_hr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_service_resource_alloc'


class WizardShowroomInvoice(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_all = models.BooleanField(blank=True, null=True)
    is_car = models.BooleanField(blank=True, null=True)
    is_manual = models.BooleanField(blank=True, null=True)
    showroom = models.ForeignKey(ShowroomRecord, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_showroom_invoice'


class WizardShowroomInvoiceLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    line_id = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qty = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)
    wizard = models.ForeignKey(WizardShowroomInvoice, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_inv = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_showroom_invoice_line'


class WizardShowroomRecordResourceAlloc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    duration_hr = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    is_overlap = models.BooleanField(blank=True, null=True)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING, blank=True, null=True)
    showroom_record = models.ForeignKey(ShowroomRecord, models.DO_NOTHING)
    team = models.ForeignKey(ServiceTeam, models.DO_NOTHING, blank=True, null=True)
    time_start = models.DateTimeField()
    time_stop = models.DateTimeField()
    type = models.CharField(max_length=64)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_showroom_record_resource_alloc'


class WizardTfAddLot(models.Model):
    barcode = models.TextField(blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location_source = models.ForeignKey(StockLocation, models.DO_NOTHING)
    location_target = models.ForeignKey(StockLocation, models.DO_NOTHING)
    transform = models.ForeignKey(StockTransform, models.DO_NOTHING)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    is_split = models.BooleanField(blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    source_product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_tf_add_lot'


class WizardTfAddLotLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(WizardTfAddLot, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_tf_add_lot_line'


class WizardTransferRejectReason(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    reason = models.TextField()
    transfer = models.ForeignKey(TransferCoupon, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    reason_0 = models.ForeignKey(ReasonCode, models.DO_NOTHING, db_column='reason_id')  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wizard_transfer_reject_reason'


class WizardUpdateQc(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dom_failure_code = models.CharField(max_length=256, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    qc_inspection = models.ForeignKey(ProductionQcInspection, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_update_qc'


class WizardUpdateQcLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    failure_code = models.ForeignKey(ReasonCode, models.DO_NOTHING)
    not_pass_qty = models.DecimalField(max_digits=16, decimal_places=2)
    parrent = models.ForeignKey(WizardUpdateQc, models.DO_NOTHING, blank=True, null=True)
    qc_inspection = models.ForeignKey(ProductionQcInspection, models.DO_NOTHING, blank=True, null=True)
    qc_inspection_line = models.ForeignKey(ProductionQcInspectionLine, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_update_qc_line'


class WizardUpdateShipping(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    dv_route = models.ForeignKey(DeliveryRoute, models.DO_NOTHING, blank=True, null=True)
    picking = models.ForeignKey(StockPicking, models.DO_NOTHING, blank=True, null=True)
    private_trans = models.ForeignKey(Contact, models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    route_list = models.TextField(blank=True, null=True)
    ship_method = models.ForeignKey(ShipMethod, models.DO_NOTHING, blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_update_shipping'


class WizardUpdateShippingLine(models.Model):
    check_state = models.CharField(max_length=256, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    picking = models.ForeignKey(StockPicking, models.DO_NOTHING, blank=True, null=True)
    private_trans = models.ForeignKey(Contact, models.DO_NOTHING, db_column='private_trans', blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    reason_code = models.ForeignKey(ReasonCode, models.DO_NOTHING, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    ship_address = models.ForeignKey(Address, models.DO_NOTHING, blank=True, null=True)
    ship_method = models.ForeignKey(ShipMethod, models.DO_NOTHING, blank=True, null=True)
    ship_paid_by = models.CharField(max_length=64, blank=True, null=True)
    state_line = models.CharField(max_length=64, blank=True, null=True)
    uom = models.ForeignKey(Uom, models.DO_NOTHING, blank=True, null=True)
    update = models.ForeignKey(WizardUpdateShipping, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_update_shipping_line'


class WizardValidatePicking(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    is_received = models.CharField(max_length=256, blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    production = models.ForeignKey(ProductionOrder, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    deliver_to_production = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_validate_picking'


class WizardValidatePickingLine(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    location = models.ForeignKey(StockLocation, models.DO_NOTHING, blank=True, null=True)
    lot = models.ForeignKey(StockLot, models.DO_NOTHING, blank=True, null=True)
    planned_qty = models.DecimalField(max_digits=16, decimal_places=6)
    product = models.ForeignKey(Product, models.DO_NOTHING)
    qty = models.DecimalField(max_digits=16, decimal_places=6)
    uom = models.ForeignKey(Uom, models.DO_NOTHING)
    wizard = models.ForeignKey(WizardValidatePicking, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    bin_location = models.CharField(max_length=256, blank=True, null=True)
    location_from = models.ForeignKey(StockLocation, models.DO_NOTHING, blank=True, null=True)
    location_to = models.ForeignKey(StockLocation, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_validate_picking_line'


class WizardWorkTime(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField()
    type = models.CharField(max_length=64)
    work = models.ForeignKey('WorkTime', models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wizard_work_time'


class WkfRule(models.Model):
    action_args = models.TextField(blank=True, null=True)
    action_method = models.CharField(max_length=256)
    action_model = models.ForeignKey(Model, models.DO_NOTHING)
    condition_args = models.TextField(blank=True, null=True)
    condition_method = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    error = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=64)
    trigger_event = models.CharField(max_length=256)
    trigger_model = models.ForeignKey(Model, models.DO_NOTHING)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_rule'


class WorkTime(models.Model):
    actual_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    bill_hours = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    description = models.TextField(blank=True, null=True)
    job = models.ForeignKey(Job, models.DO_NOTHING, blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    related_id = models.CharField(max_length=64, blank=True, null=True)
    resource = models.ForeignKey(ServiceResource, models.DO_NOTHING)
    sale_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    service_item = models.ForeignKey(ServiceItem, models.DO_NOTHING, blank=True, null=True)
    state = models.CharField(max_length=64)
    week = models.DateField(blank=True, null=True)
    work_type = models.ForeignKey('WorkType', models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    resources = models.TextField(blank=True, null=True)
    sale_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    track = models.ForeignKey(AccountTrackCateg, models.DO_NOTHING, blank=True, null=True)
    track_ids = models.TextField(blank=True, null=True)
    cost_rate = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    job_line = models.ForeignKey(JobLine, models.DO_NOTHING, blank=True, null=True)
    is_pause = models.CharField(max_length=64, blank=True, null=True)
    pause_time = models.TextField(blank=True, null=True)
    start_date = models.DateTimeField()
    stop_date = models.DateTimeField()
    work_time = models.TextField(blank=True, null=True)
    install_amount = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'work_time'


class WorkType(models.Model):
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=256)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'work_type'


class Workcenter(models.Model):
    asset = models.ForeignKey(AccountFixedAsset, models.DO_NOTHING, blank=True, null=True)
    code = models.CharField(max_length=256, blank=True, null=True)
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    location = models.ForeignKey(StockLocation, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    schedule = models.ForeignKey(HrSchedule, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'workcenter'


class WorkflowRule(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'workflow_rule'


class WsEvent(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    ctime = models.DateTimeField()
    listener = models.ForeignKey('WsListener', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=256)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ws_event'


class WsListener(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    last_check_time = models.DateTimeField()
    user = models.ForeignKey(BaseUser, models.DO_NOTHING, blank=True, null=True)
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ws_listener'


class YearEnd(models.Model):
    create_time = models.DateTimeField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    write_time = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'year_end'
